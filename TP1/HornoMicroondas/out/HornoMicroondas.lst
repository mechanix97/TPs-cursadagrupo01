
TP1/HornoMicroondas/out/HornoMicroondas.elf:     file format elf32-littlearm
TP1/HornoMicroondas/out/HornoMicroondas.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0012d1

Program Header:
0x70000001 off    0x00011b4c vaddr 0x1a001b4c paddr 0x1a001b4c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010038 vaddr 0x10000038 paddr 0x10000038 align 2**16
         filesz 0x00000000 memsz 0x00000030 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001b54 memsz 0x00001b54 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001b54 align 2**16
         filesz 0x00000038 memsz 0x00000038 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b4c  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  10000000  1a001b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020038  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
  6 .bss          00000030  10000038  10000038  00010038  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001b4c  1a001b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020038  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020038  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020038  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 17 .noinit       00000000  10000068  10000068  00020038  2**2
                  CONTENTS
 18 .debug_info   00010fad  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002c8d  00000000  00000000  00030fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000675d  00000000  00000000  00033c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000888  00000000  00000000  0003a3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000008a0  00000000  00000000  0003ac57  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000085e9  00000000  00000000  0003b4f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000af8c  00000000  00000000  00043ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001dffd  00000000  00000000  0004ea6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  0006ca69  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000034  00000000  00000000  0006cad1  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000015a4  00000000  00000000  0006cb08  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000038 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001b4c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000068 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 HornoMicroondas.c
1a000300 l     F .text	0000000e clearInEvents
1a00030e l     F .text	00000008 exseq_Modo_Modo_0
1a000316 l     F .text	00000008 exseq_Modo_Modo_1
1a00031e l     F .text	00000008 exseq_Modo_Modo_2
1a000326 l     F .text	0000000a exseq_Coccion_Stand_By
1a000330 l     F .text	00000004 react
1a000334 l     F .text	0000000a enact_Modo_Modo_0
1a00033e l     F .text	00000012 enseq_Modo_Modo_0_default
1a000350 l     F .text	00000008 react_Modo__entry_Default
1a000358 l     F .text	00000008 enseq_Modo_default
1a000360 l     F .text	00000026 Modo_Modo_2_react
1a000386 l     F .text	0000000a enact_Modo_Modo_1
1a000390 l     F .text	00000012 enseq_Modo_Modo_1_default
1a0003a2 l     F .text	00000026 Modo_Modo_0_react
1a0003c8 l     F .text	0000000a enact_Modo_Modo_2
1a0003d2 l     F .text	00000012 enseq_Modo_Modo_2_default
1a0003e4 l     F .text	00000026 Modo_Modo_1_react
1a00040a l     F .text	00000008 enact_Coccion_Stand_By
1a000412 l     F .text	00000012 enseq_Coccion_Stand_By_default
1a000424 l     F .text	00000008 react_Coccion__entry_Default
1a00042c l     F .text	00000008 enseq_Coccion_default
1a000434 l     F .text	0000001c enact_Coccion_Cocinando
1a000450 l     F .text	00000012 enseq_Coccion_Cocinando_default
1a000462 l     F .text	0000001e Coccion_Stand_By_react
1a000480 l     F .text	0000000c exact_Coccion_Cocinando
1a00048c l     F .text	00000010 exseq_Coccion_Cocinando
1a00049c l     F .text	0000003e Coccion_Cocinando_react
00000000 l    df *ABS*	00000000 board.c
1a0005a0 l     F .text	00000044 Board_LED_Init
1a0005e4 l     F .text	00000040 Board_TEC_Init
1a000624 l     F .text	00000040 Board_GPIO_Init
1a000664 l     F .text	00000030 Board_ADC_Init
1a000694 l     F .text	00000038 Board_SPI_Init
1a0006cc l     F .text	00000024 Board_I2C_Init
1a0019d8 l     O .text	00000008 GpioButtons
1a0019e0 l     O .text	0000000c GpioLeds
1a0019ec l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001a04 l     O .text	00000004 InitClkStates
1a001a08 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000844 l     F .text	0000002c Chip_UART_GetIndex
1a001a7c l     O .text	00000008 UART_BClock
1a001a84 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0009a0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0009b4 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000a68 l     F .text	000000a0 pll_calc_divs
1a000b08 l     F .text	0000010c pll_get_frac
1a000c14 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000e88 l     F .text	00000022 Chip_Clock_GetDivRate
10000038 l     O .bss	00000008 audio_usb_pll_freq
1a001a98 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001b04 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0011e0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0011f4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 HornoMicroondasRequired.c
00000000 l    df *ABS*	00000000 main.c
10000044 l     O .bss	00000010 statechart
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a001b4c l       .bss_RAM5	00000000 __init_array_end
1a001b4c l       .bss_RAM5	00000000 __preinit_array_end
1a001b4c l       .bss_RAM5	00000000 __init_array_start
1a001b4c l       .bss_RAM5	00000000 __preinit_array_start
1a000cac g     F .text	0000001c Chip_Clock_GetDividerSource
10000040 g     O .bss	00000001 SysTick_Time_Flag
1a000178  w    F .text	00000002 TIMER2_IRQHandler
1a000186  w    F .text	00000002 DebugMon_Handler
1a000178  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000178  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000178  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000178  w    F .text	00000002 I2C0_IRQHandler
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000a5a g     F .text	0000000c Chip_ADC_SetResolution
1a001558 g     F .text	0000000c SysTick_Handler
1a00147a g     F .text	00000074 hornoMicroondasIface_opSetModo
1a0014ee g     F .text	0000001c hornoMicroondasIface_opCocinar
1a0012cc  w    F .text	00000002 initialise_monitor_handles
1a000178  w    F .text	00000002 SDIO_IRQHandler
1a000178  w    F .text	00000002 ATIMER_IRQHandler
1a000188  w    F .text	00000002 PendSV_Handler
1a00017a  w    F .text	00000002 NMI_Handler
1a001b54 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000178  w    F .text	00000002 I2C1_IRQHandler
1a000178  w    F .text	00000002 UART1_IRQHandler
1a000178  w    F .text	00000002 GPIO5_IRQHandler
1a000178  w    F .text	00000002 CAN1_IRQHandler
53ff65b4 g       *ABS*	00000000 __valid_user_code_checksum
1a001b54 g       .ARM.exidx	00000000 _etext
1a000178  w    F .text	00000002 USB1_IRQHandler
1a000178  w    F .text	00000002 I2S0_IRQHandler
1a001436 g     F .text	00000044 UpdateTimers
1a000178  w    F .text	00000002 TIMER3_IRQHandler
1a000f2a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a0013e4 g     F .text	0000002e IsPendEvent
1a000178  w    F .text	00000002 SGPIO_IRQHandler
1a001412 g     F .text	00000024 MarkAsAttEvent
1a001678 g     F .text	00000000 .hidden __aeabi_uldivmod
10000068 g       .noinit	00000000 _noinit
10000054 g     O .bss	00000004 SystemCoreClock
1a000870 g     F .text	00000054 Chip_UART_Init
1a000178  w    F .text	00000002 ADC0_IRQHandler
1a000182  w    F .text	00000002 UsageFault_Handler
1a000fa8 g     F .text	0000004c Chip_Clock_GetRate
1a000178  w    F .text	00000002 GPIO6_IRQHandler
1a0007cc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0016a8 g     F .text	000002d0 .hidden __udivmoddi4
1a0019d4 g     O .text	00000004 ExtRateIn
1a000178  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000178  w    F .text	00000002 GPIO1_IRQHandler
1a000178  w    F .text	00000002 SSP0_IRQHandler
1a001b4c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00197c g     F .text	00000048 __libc_init_array
1a001544 g     F .text	00000014 hornoMicroondas_unsetTimer
1a000178  w    F .text	00000002 ADC1_IRQHandler
1a000738 g     F .text	00000030 Board_Init
1a00135a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a001528 g     F .text	0000001c hornoMicroondas_setTimer
1a000178  w    F .text	00000002 RTC_IRQHandler
10000068 g       .bss	00000000 _ebss
1a000178  w    F .text	00000002 TIMER0_IRQHandler
1a0012d0 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000178  w    F .text	00000002 SPI_IRQHandler
1a0011a8 g     F .text	00000038 Chip_I2C_SetClockRate
1a000178  w    F .text	00000002 LCD_IRQHandler
1a000c60 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000574 g     F .text	00000012 hornoMicroondas_raiseTimeEvent
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a000178  w    F .text	00000002 TIMER1_IRQHandler
1a001184 g     F .text	00000024 Chip_I2C_Init
1a00137e g     F .text	00000032 SetNewTimerTick
1a000178  w    F .text	00000002 UART2_IRQHandler
1a000e1c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a000592 g     F .text	00000006 hornoMicroondasIface_raise_evParar
1a00120c g     F .text	00000012 Chip_SSP_SetClockRate
1a000178  w    F .text	00000002 GPIO2_IRQHandler
1a000f04 g     F .text	00000026 Chip_Clock_GetBaseClock
10000038 g       .bss	00000000 _bss
1a000a28 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000178  w    F .text	00000002 I2S1_IRQHandler
1a00121e g     F .text	0000003e Chip_SSP_SetBitRate
1a001160 g     F .text	00000002 Chip_GPIO_Init
1a000586 g     F .text	00000006 hornoMicroondasIface_raise_evModo
1a001a00 g     O .text	00000004 OscRateIn
10000068 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000178  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000504 g     F .text	00000070 hornoMicroondas_runCycle
1a001978  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00150a g     F .text	0000001c hornoMicroondasIface_opIdle
1a000178  w    F .text	00000002 USB0_IRQHandler
1a000178  w    F .text	00000002 GPIO3_IRQHandler
1a000178  w    F .text	00000002 SCT_IRQHandler
1a000cc8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0019c4 g     F .text	00000010 memset
1a00017e  w    F .text	00000002 MemManage_Handler
1a00158c g     F .text	000000ec main
1a000178  w    F .text	00000002 WDT_IRQHandler
1a0013b0 g     F .text	00000034 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000184  w    F .text	00000002 SVC_Handler
1a000178  w    F .text	00000002 GPIO7_IRQHandler
1a000f38 g     F .text	0000003c Chip_Clock_EnableOpts
1a000ce4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000d9c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00058c g     F .text	00000006 hornoMicroondasIface_raise_evIniciar
1a001294 g     F .text	00000038 SystemInit
1a000178  w    F .text	00000002 SPIFI_IRQHandler
1a000178  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001358  w    F .text	00000002 _fini
1a0009e8 g     F .text	00000040 Chip_ADC_Init
1a000794 g     F .text	00000038 Board_SetupMuxing
1a001564 g     F .text	00000026 Buttons_GetStatus_
1a0008c4 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000178  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000058 g     O .bss	00000010 ticks
1a000178  w    F .text	00000002 CAN0_IRQHandler
1a00135c g     F .text	00000022 InitTimerTicks
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a00125c g     F .text	00000038 Chip_SSP_Init
1a0004f4 g     F .text	00000010 hornoMicroondas_enter
1a000178  w    F .text	00000002 GINT0_IRQHandler
1a000178  w    F .text	00000002 DAC_IRQHandler
1a0006f0 g     F .text	00000024 Board_Debug_Init
10000038 g       .data	00000000 _edata
1a001164 g     F .text	00000020 Chip_I2C_EventHandler
1a000178  w    F .text	00000002 M0SUB_IRQHandler
1a001008 g     F .text	00000158 Chip_SetupCoreClock
1a000178  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000ff4 g     F .text	00000014 SystemCoreClockUpdate
1a000178  w    F .text	00000002 DMA_IRQHandler
1a000178  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a000768 g     F .text	0000002c Board_TEC_GetStatus
1a001978  w    F .text	00000002 .hidden __aeabi_idiv0
1a000180  w    F .text	00000002 BusFault_Handler
1a000f74 g     F .text	00000034 Chip_Clock_Enable
1a000178  w    F .text	00000002 UART3_IRQHandler
1a000178  w    F .text	00000002 MCPWM_IRQHandler
1a000714 g     F .text	00000024 Board_LED_Set
1a000178  w    F .text	00000002 M0APP_IRQHandler
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a000178  w    F .text	00000002 GINT1_IRQHandler
1a0004da g     F .text	0000001a hornoMicroondas_init
1a000eac g     F .text	00000058 Chip_Clock_SetBaseClock
1a000178  w    F .text	00000002 GPIO4_IRQHandler
1a000598 g     F .text	00000006 hornoMicroondasIface_raise_evPuertaAbierta
1a000838 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 d1 12 00 1a 7b 01 00 1a 7d 01 00 1a     ........{...}...
1a000010:	7f 01 00 1a 81 01 00 1a 83 01 00 1a b4 65 ff 53     .............e.S
	...
1a00002c:	85 01 00 1a 87 01 00 1a 00 00 00 00 89 01 00 1a     ................
1a00003c:	59 15 00 1a                                         Y...

1a000040 <g_pfnVendorVectors>:
1a000040:	79 01 00 1a 79 01 00 1a 79 01 00 1a 00 00 00 00     y...y...y.......
1a000050:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000060:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000070:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000080:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000090:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000a0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000b0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000c0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000d0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000e0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000f0:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000100:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000110:	79 01 00 1a                                         y...

1a000114 <__data_section_table>:
1a000114:	1a001b54 	.word	0x1a001b54
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000038 	.word	0x00000038
1a000120:	1a001b54 	.word	0x1a001b54
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001b54 	.word	0x1a001b54
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001b54 	.word	0x1a001b54
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001b54 	.word	0x1a001b54
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000038 	.word	0x10000038
1a000154:	00000030 	.word	0x00000030
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <ADC0_IRQHandler>

1a00017a <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <NMI_Handler>

1a00017c <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>

1a00017e <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <MemManage_Handler>

1a000180 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <BusFault_Handler>

1a000182 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler>

1a000184 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <SVC_Handler>

1a000186 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler>

1a000188 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <PendSV_Handler+0x2>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clearInEvents>:
	return result;
}

static void clearInEvents(HornoMicroondas* handle)
{
	handle->iface.evModo_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7203      	strb	r3, [r0, #8]
	handle->iface.evIniciar_raised = bool_false;
1a000304:	7243      	strb	r3, [r0, #9]
	handle->iface.evParar_raised = bool_false;
1a000306:	7283      	strb	r3, [r0, #10]
	handle->iface.evPuertaAbierta_raised = bool_false;
1a000308:	72c3      	strb	r3, [r0, #11]
	handle->timeEvents.hornoMicroondas_Coccion_Cocinando_tev0_raised = bool_false;
1a00030a:	7303      	strb	r3, [r0, #12]
}
1a00030c:	4770      	bx	lr

1a00030e <exseq_Modo_Modo_0>:

/* Default exit sequence for state Modo 0 */
static void exseq_Modo_Modo_0(HornoMicroondas* handle)
{
	/* Default exit sequence for state Modo 0 */
	handle->stateConfVector[0] = HornoMicroondas_last_state;
1a00030e:	2300      	movs	r3, #0
1a000310:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000312:	6043      	str	r3, [r0, #4]
}
1a000314:	4770      	bx	lr

1a000316 <exseq_Modo_Modo_1>:

/* Default exit sequence for state Modo 1 */
static void exseq_Modo_Modo_1(HornoMicroondas* handle)
{
	/* Default exit sequence for state Modo 1 */
	handle->stateConfVector[0] = HornoMicroondas_last_state;
1a000316:	2300      	movs	r3, #0
1a000318:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00031a:	6043      	str	r3, [r0, #4]
}
1a00031c:	4770      	bx	lr

1a00031e <exseq_Modo_Modo_2>:

/* Default exit sequence for state Modo 2 */
static void exseq_Modo_Modo_2(HornoMicroondas* handle)
{
	/* Default exit sequence for state Modo 2 */
	handle->stateConfVector[0] = HornoMicroondas_last_state;
1a00031e:	2300      	movs	r3, #0
1a000320:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000322:	6043      	str	r3, [r0, #4]
}
1a000324:	4770      	bx	lr

1a000326 <exseq_Coccion_Stand_By>:

/* Default exit sequence for state Stand By */
static void exseq_Coccion_Stand_By(HornoMicroondas* handle)
{
	/* Default exit sequence for state Stand By */
	handle->stateConfVector[1] = HornoMicroondas_last_state;
1a000326:	2300      	movs	r3, #0
1a000328:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00032a:	2301      	movs	r3, #1
1a00032c:	6043      	str	r3, [r0, #4]
}
1a00032e:	4770      	bx	lr

1a000330 <react>:

static sc_boolean react(HornoMicroondas* handle) {
	/* State machine reactions. */
	SC_UNUSED(handle);
	return bool_false;
}
1a000330:	2000      	movs	r0, #0
1a000332:	4770      	bx	lr

1a000334 <enact_Modo_Modo_0>:
{
1a000334:	b508      	push	{r3, lr}
	hornoMicroondasIface_opSetModo(handle, HORNOMICROONDAS_HORNOMICROONDASIFACE_MODO0);
1a000336:	2100      	movs	r1, #0
1a000338:	f001 f89f 	bl	1a00147a <hornoMicroondasIface_opSetModo>
}
1a00033c:	bd08      	pop	{r3, pc}

1a00033e <enseq_Modo_Modo_0_default>:
{
1a00033e:	b510      	push	{r4, lr}
1a000340:	4604      	mov	r4, r0
	enact_Modo_Modo_0(handle);
1a000342:	f7ff fff7 	bl	1a000334 <enact_Modo_Modo_0>
	handle->stateConfVector[0] = HornoMicroondas_Modo_Modo_0;
1a000346:	2301      	movs	r3, #1
1a000348:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00034a:	2300      	movs	r3, #0
1a00034c:	6063      	str	r3, [r4, #4]
}
1a00034e:	bd10      	pop	{r4, pc}

1a000350 <react_Modo__entry_Default>:
{
1a000350:	b508      	push	{r3, lr}
	enseq_Modo_Modo_0_default(handle);
1a000352:	f7ff fff4 	bl	1a00033e <enseq_Modo_Modo_0_default>
}
1a000356:	bd08      	pop	{r3, pc}

1a000358 <enseq_Modo_default>:
{
1a000358:	b508      	push	{r3, lr}
	react_Modo__entry_Default(handle);
1a00035a:	f7ff fff9 	bl	1a000350 <react_Modo__entry_Default>
}
1a00035e:	bd08      	pop	{r3, pc}

1a000360 <Modo_Modo_2_react>:
			}
		} 
	} return did_transition;
}

static sc_boolean Modo_Modo_2_react(HornoMicroondas* handle, const sc_boolean try_transition) {
1a000360:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Modo 2. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000362:	460c      	mov	r4, r1
1a000364:	b131      	cbz	r1, 1a000374 <Modo_Modo_2_react+0x14>
1a000366:	4605      	mov	r5, r0
	{ 
		if ((react(handle)) == (bool_false))
1a000368:	f7ff ffe2 	bl	1a000330 <react>
1a00036c:	b910      	cbnz	r0, 1a000374 <Modo_Modo_2_react+0x14>
		{ 
			if (handle->iface.evModo_raised == bool_true)
1a00036e:	7a2b      	ldrb	r3, [r5, #8]
1a000370:	b913      	cbnz	r3, 1a000378 <Modo_Modo_2_react+0x18>
			{ 
				exseq_Modo_Modo_2(handle);
				enseq_Modo_Modo_0_default(handle);
			}  else
			{
				did_transition = bool_false;
1a000372:	2400      	movs	r4, #0
			}
		} 
	} return did_transition;
}
1a000374:	4620      	mov	r0, r4
1a000376:	bd38      	pop	{r3, r4, r5, pc}
				exseq_Modo_Modo_2(handle);
1a000378:	4628      	mov	r0, r5
1a00037a:	f7ff ffd0 	bl	1a00031e <exseq_Modo_Modo_2>
				enseq_Modo_Modo_0_default(handle);
1a00037e:	4628      	mov	r0, r5
1a000380:	f7ff ffdd 	bl	1a00033e <enseq_Modo_Modo_0_default>
1a000384:	e7f6      	b.n	1a000374 <Modo_Modo_2_react+0x14>

1a000386 <enact_Modo_Modo_1>:
{
1a000386:	b508      	push	{r3, lr}
	hornoMicroondasIface_opSetModo(handle, HORNOMICROONDAS_HORNOMICROONDASIFACE_MODO1);
1a000388:	2101      	movs	r1, #1
1a00038a:	f001 f876 	bl	1a00147a <hornoMicroondasIface_opSetModo>
}
1a00038e:	bd08      	pop	{r3, pc}

1a000390 <enseq_Modo_Modo_1_default>:
{
1a000390:	b510      	push	{r4, lr}
1a000392:	4604      	mov	r4, r0
	enact_Modo_Modo_1(handle);
1a000394:	f7ff fff7 	bl	1a000386 <enact_Modo_Modo_1>
	handle->stateConfVector[0] = HornoMicroondas_Modo_Modo_1;
1a000398:	2302      	movs	r3, #2
1a00039a:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00039c:	2300      	movs	r3, #0
1a00039e:	6063      	str	r3, [r4, #4]
}
1a0003a0:	bd10      	pop	{r4, pc}

1a0003a2 <Modo_Modo_0_react>:
static sc_boolean Modo_Modo_0_react(HornoMicroondas* handle, const sc_boolean try_transition) {
1a0003a2:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0003a4:	460c      	mov	r4, r1
1a0003a6:	b131      	cbz	r1, 1a0003b6 <Modo_Modo_0_react+0x14>
1a0003a8:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a0003aa:	f7ff ffc1 	bl	1a000330 <react>
1a0003ae:	b910      	cbnz	r0, 1a0003b6 <Modo_Modo_0_react+0x14>
			if (handle->iface.evModo_raised == bool_true)
1a0003b0:	7a2b      	ldrb	r3, [r5, #8]
1a0003b2:	b913      	cbnz	r3, 1a0003ba <Modo_Modo_0_react+0x18>
				did_transition = bool_false;
1a0003b4:	2400      	movs	r4, #0
}
1a0003b6:	4620      	mov	r0, r4
1a0003b8:	bd38      	pop	{r3, r4, r5, pc}
				exseq_Modo_Modo_0(handle);
1a0003ba:	4628      	mov	r0, r5
1a0003bc:	f7ff ffa7 	bl	1a00030e <exseq_Modo_Modo_0>
				enseq_Modo_Modo_1_default(handle);
1a0003c0:	4628      	mov	r0, r5
1a0003c2:	f7ff ffe5 	bl	1a000390 <enseq_Modo_Modo_1_default>
1a0003c6:	e7f6      	b.n	1a0003b6 <Modo_Modo_0_react+0x14>

1a0003c8 <enact_Modo_Modo_2>:
{
1a0003c8:	b508      	push	{r3, lr}
	hornoMicroondasIface_opSetModo(handle, HORNOMICROONDAS_HORNOMICROONDASIFACE_MODO2);
1a0003ca:	2102      	movs	r1, #2
1a0003cc:	f001 f855 	bl	1a00147a <hornoMicroondasIface_opSetModo>
}
1a0003d0:	bd08      	pop	{r3, pc}

1a0003d2 <enseq_Modo_Modo_2_default>:
{
1a0003d2:	b510      	push	{r4, lr}
1a0003d4:	4604      	mov	r4, r0
	enact_Modo_Modo_2(handle);
1a0003d6:	f7ff fff7 	bl	1a0003c8 <enact_Modo_Modo_2>
	handle->stateConfVector[0] = HornoMicroondas_Modo_Modo_2;
1a0003da:	2303      	movs	r3, #3
1a0003dc:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0003de:	2300      	movs	r3, #0
1a0003e0:	6063      	str	r3, [r4, #4]
}
1a0003e2:	bd10      	pop	{r4, pc}

1a0003e4 <Modo_Modo_1_react>:
static sc_boolean Modo_Modo_1_react(HornoMicroondas* handle, const sc_boolean try_transition) {
1a0003e4:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0003e6:	460c      	mov	r4, r1
1a0003e8:	b131      	cbz	r1, 1a0003f8 <Modo_Modo_1_react+0x14>
1a0003ea:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a0003ec:	f7ff ffa0 	bl	1a000330 <react>
1a0003f0:	b910      	cbnz	r0, 1a0003f8 <Modo_Modo_1_react+0x14>
			if (handle->iface.evModo_raised == bool_true)
1a0003f2:	7a2b      	ldrb	r3, [r5, #8]
1a0003f4:	b913      	cbnz	r3, 1a0003fc <Modo_Modo_1_react+0x18>
				did_transition = bool_false;
1a0003f6:	2400      	movs	r4, #0
}
1a0003f8:	4620      	mov	r0, r4
1a0003fa:	bd38      	pop	{r3, r4, r5, pc}
				exseq_Modo_Modo_1(handle);
1a0003fc:	4628      	mov	r0, r5
1a0003fe:	f7ff ff8a 	bl	1a000316 <exseq_Modo_Modo_1>
				enseq_Modo_Modo_2_default(handle);
1a000402:	4628      	mov	r0, r5
1a000404:	f7ff ffe5 	bl	1a0003d2 <enseq_Modo_Modo_2_default>
1a000408:	e7f6      	b.n	1a0003f8 <Modo_Modo_1_react+0x14>

1a00040a <enact_Coccion_Stand_By>:
{
1a00040a:	b508      	push	{r3, lr}
	hornoMicroondasIface_opIdle(handle);
1a00040c:	f001 f87d 	bl	1a00150a <hornoMicroondasIface_opIdle>
}
1a000410:	bd08      	pop	{r3, pc}

1a000412 <enseq_Coccion_Stand_By_default>:
{
1a000412:	b510      	push	{r4, lr}
1a000414:	4604      	mov	r4, r0
	enact_Coccion_Stand_By(handle);
1a000416:	f7ff fff8 	bl	1a00040a <enact_Coccion_Stand_By>
	handle->stateConfVector[1] = HornoMicroondas_Coccion_Stand_By;
1a00041a:	2304      	movs	r3, #4
1a00041c:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00041e:	2301      	movs	r3, #1
1a000420:	6063      	str	r3, [r4, #4]
}
1a000422:	bd10      	pop	{r4, pc}

1a000424 <react_Coccion__entry_Default>:
{
1a000424:	b508      	push	{r3, lr}
	enseq_Coccion_Stand_By_default(handle);
1a000426:	f7ff fff4 	bl	1a000412 <enseq_Coccion_Stand_By_default>
}
1a00042a:	bd08      	pop	{r3, pc}

1a00042c <enseq_Coccion_default>:
{
1a00042c:	b508      	push	{r3, lr}
	react_Coccion__entry_Default(handle);
1a00042e:	f7ff fff9 	bl	1a000424 <react_Coccion__entry_Default>
}
1a000432:	bd08      	pop	{r3, pc}

1a000434 <enact_Coccion_Cocinando>:
{
1a000434:	b510      	push	{r4, lr}
1a000436:	4604      	mov	r4, r0
	hornoMicroondas_setTimer(handle, (sc_eventid) &(handle->timeEvents.hornoMicroondas_Coccion_Cocinando_tev0_raised) , 1000, bool_false);
1a000438:	2300      	movs	r3, #0
1a00043a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00043e:	f100 010c 	add.w	r1, r0, #12
1a000442:	f001 f871 	bl	1a001528 <hornoMicroondas_setTimer>
	hornoMicroondasIface_opCocinar(handle, HORNOMICROONDAS_HORNOMICROONDASIFACE_MODO);
1a000446:	2100      	movs	r1, #0
1a000448:	4620      	mov	r0, r4
1a00044a:	f001 f850 	bl	1a0014ee <hornoMicroondasIface_opCocinar>
}
1a00044e:	bd10      	pop	{r4, pc}

1a000450 <enseq_Coccion_Cocinando_default>:
{
1a000450:	b510      	push	{r4, lr}
1a000452:	4604      	mov	r4, r0
	enact_Coccion_Cocinando(handle);
1a000454:	f7ff ffee 	bl	1a000434 <enact_Coccion_Cocinando>
	handle->stateConfVector[1] = HornoMicroondas_Coccion_Cocinando;
1a000458:	2305      	movs	r3, #5
1a00045a:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00045c:	2301      	movs	r3, #1
1a00045e:	6063      	str	r3, [r4, #4]
}
1a000460:	bd10      	pop	{r4, pc}

1a000462 <Coccion_Stand_By_react>:

static sc_boolean Coccion_Stand_By_react(HornoMicroondas* handle, const sc_boolean try_transition) {
1a000462:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Stand By. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000464:	460c      	mov	r4, r1
1a000466:	b119      	cbz	r1, 1a000470 <Coccion_Stand_By_react+0xe>
1a000468:	4605      	mov	r5, r0
	{ 
		if (handle->iface.evIniciar_raised == bool_true)
1a00046a:	7a43      	ldrb	r3, [r0, #9]
1a00046c:	b913      	cbnz	r3, 1a000474 <Coccion_Stand_By_react+0x12>
		{ 
			exseq_Coccion_Stand_By(handle);
			enseq_Coccion_Cocinando_default(handle);
		}  else
		{
			did_transition = bool_false;
1a00046e:	2400      	movs	r4, #0
		}
	} return did_transition;
}
1a000470:	4620      	mov	r0, r4
1a000472:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Coccion_Stand_By(handle);
1a000474:	f7ff ff57 	bl	1a000326 <exseq_Coccion_Stand_By>
			enseq_Coccion_Cocinando_default(handle);
1a000478:	4628      	mov	r0, r5
1a00047a:	f7ff ffe9 	bl	1a000450 <enseq_Coccion_Cocinando_default>
1a00047e:	e7f7      	b.n	1a000470 <Coccion_Stand_By_react+0xe>

1a000480 <exact_Coccion_Cocinando>:
{
1a000480:	b508      	push	{r3, lr}
	hornoMicroondas_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.hornoMicroondas_Coccion_Cocinando_tev0_raised) );		
1a000482:	f100 010c 	add.w	r1, r0, #12
1a000486:	f001 f85d 	bl	1a001544 <hornoMicroondas_unsetTimer>
}
1a00048a:	bd08      	pop	{r3, pc}

1a00048c <exseq_Coccion_Cocinando>:
{
1a00048c:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = HornoMicroondas_last_state;
1a00048e:	2200      	movs	r2, #0
1a000490:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000492:	2201      	movs	r2, #1
1a000494:	6042      	str	r2, [r0, #4]
	exact_Coccion_Cocinando(handle);
1a000496:	f7ff fff3 	bl	1a000480 <exact_Coccion_Cocinando>
}
1a00049a:	bd08      	pop	{r3, pc}

1a00049c <Coccion_Cocinando_react>:

static sc_boolean Coccion_Cocinando_react(HornoMicroondas* handle, const sc_boolean try_transition) {
1a00049c:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state Cocinando. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a00049e:	460d      	mov	r5, r1
1a0004a0:	b169      	cbz	r1, 1a0004be <Coccion_Cocinando_react+0x22>
1a0004a2:	4604      	mov	r4, r0
	{ 
		if (handle->iface.evParar_raised == bool_true)
1a0004a4:	7a83      	ldrb	r3, [r0, #10]
1a0004a6:	b92b      	cbnz	r3, 1a0004b4 <Coccion_Cocinando_react+0x18>
		{ 
			exseq_Coccion_Cocinando(handle);
			enseq_Coccion_Stand_By_default(handle);
		}  else
		{
			if (handle->iface.evPuertaAbierta_raised == bool_true)
1a0004a8:	7ac3      	ldrb	r3, [r0, #11]
1a0004aa:	b953      	cbnz	r3, 1a0004c2 <Coccion_Cocinando_react+0x26>
			{ 
				exseq_Coccion_Cocinando(handle);
				enseq_Coccion_Stand_By_default(handle);
			}  else
			{
				if (handle->timeEvents.hornoMicroondas_Coccion_Cocinando_tev0_raised == bool_true)
1a0004ac:	7b03      	ldrb	r3, [r0, #12]
1a0004ae:	b973      	cbnz	r3, 1a0004ce <Coccion_Cocinando_react+0x32>
				{ 
					exseq_Coccion_Cocinando(handle);
					enseq_Coccion_Stand_By_default(handle);
				}  else
				{
					did_transition = bool_false;
1a0004b0:	2500      	movs	r5, #0
1a0004b2:	e004      	b.n	1a0004be <Coccion_Cocinando_react+0x22>
			exseq_Coccion_Cocinando(handle);
1a0004b4:	f7ff ffea 	bl	1a00048c <exseq_Coccion_Cocinando>
			enseq_Coccion_Stand_By_default(handle);
1a0004b8:	4620      	mov	r0, r4
1a0004ba:	f7ff ffaa 	bl	1a000412 <enseq_Coccion_Stand_By_default>
				}
			}
		}
	} return did_transition;
}
1a0004be:	4628      	mov	r0, r5
1a0004c0:	bd38      	pop	{r3, r4, r5, pc}
				exseq_Coccion_Cocinando(handle);
1a0004c2:	f7ff ffe3 	bl	1a00048c <exseq_Coccion_Cocinando>
				enseq_Coccion_Stand_By_default(handle);
1a0004c6:	4620      	mov	r0, r4
1a0004c8:	f7ff ffa3 	bl	1a000412 <enseq_Coccion_Stand_By_default>
1a0004cc:	e7f7      	b.n	1a0004be <Coccion_Cocinando_react+0x22>
					exseq_Coccion_Cocinando(handle);
1a0004ce:	f7ff ffdd 	bl	1a00048c <exseq_Coccion_Cocinando>
					enseq_Coccion_Stand_By_default(handle);
1a0004d2:	4620      	mov	r0, r4
1a0004d4:	f7ff ff9d 	bl	1a000412 <enseq_Coccion_Stand_By_default>
1a0004d8:	e7f1      	b.n	1a0004be <Coccion_Cocinando_react+0x22>

1a0004da <hornoMicroondas_init>:
{
1a0004da:	b508      	push	{r3, lr}
	for (i = 0; i < HORNOMICROONDAS_MAX_ORTHOGONAL_STATES; ++i)
1a0004dc:	2300      	movs	r3, #0
1a0004de:	e002      	b.n	1a0004e6 <hornoMicroondas_init+0xc>
		handle->stateConfVector[i] = HornoMicroondas_last_state;
1a0004e0:	2200      	movs	r2, #0
1a0004e2:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < HORNOMICROONDAS_MAX_ORTHOGONAL_STATES; ++i)
1a0004e4:	3301      	adds	r3, #1
1a0004e6:	2b01      	cmp	r3, #1
1a0004e8:	ddfa      	ble.n	1a0004e0 <hornoMicroondas_init+0x6>
	handle->stateConfVectorPosition = 0;
1a0004ea:	2300      	movs	r3, #0
1a0004ec:	6043      	str	r3, [r0, #4]
	clearInEvents(handle);
1a0004ee:	f7ff ff07 	bl	1a000300 <clearInEvents>
}
1a0004f2:	bd08      	pop	{r3, pc}

1a0004f4 <hornoMicroondas_enter>:
{
1a0004f4:	b510      	push	{r4, lr}
1a0004f6:	4604      	mov	r4, r0
	enseq_Modo_default(handle);
1a0004f8:	f7ff ff2e 	bl	1a000358 <enseq_Modo_default>
	enseq_Coccion_default(handle);
1a0004fc:	4620      	mov	r0, r4
1a0004fe:	f7ff ff95 	bl	1a00042c <enseq_Coccion_default>
}
1a000502:	bd10      	pop	{r4, pc}

1a000504 <hornoMicroondas_runCycle>:
{
1a000504:	b510      	push	{r4, lr}
1a000506:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a000508:	2300      	movs	r3, #0
1a00050a:	6043      	str	r3, [r0, #4]
1a00050c:	e006      	b.n	1a00051c <hornoMicroondas_runCycle+0x18>
			Modo_Modo_0_react(handle, bool_true);
1a00050e:	2101      	movs	r1, #1
1a000510:	4620      	mov	r0, r4
1a000512:	f7ff ff46 	bl	1a0003a2 <Modo_Modo_0_react>
		handle->stateConfVectorPosition++)
1a000516:	6863      	ldr	r3, [r4, #4]
1a000518:	3301      	adds	r3, #1
1a00051a:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < HORNOMICROONDAS_MAX_ORTHOGONAL_STATES;
1a00051c:	6863      	ldr	r3, [r4, #4]
	for (handle->stateConfVectorPosition = 0;
1a00051e:	2b01      	cmp	r3, #1
1a000520:	d824      	bhi.n	1a00056c <hornoMicroondas_runCycle+0x68>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a000522:	5ce3      	ldrb	r3, [r4, r3]
1a000524:	3b01      	subs	r3, #1
1a000526:	2b04      	cmp	r3, #4
1a000528:	d8f5      	bhi.n	1a000516 <hornoMicroondas_runCycle+0x12>
1a00052a:	a201      	add	r2, pc, #4	; (adr r2, 1a000530 <hornoMicroondas_runCycle+0x2c>)
1a00052c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000530:	1a00050f 	.word	0x1a00050f
1a000534:	1a000545 	.word	0x1a000545
1a000538:	1a00054f 	.word	0x1a00054f
1a00053c:	1a000559 	.word	0x1a000559
1a000540:	1a000563 	.word	0x1a000563
			Modo_Modo_1_react(handle, bool_true);
1a000544:	2101      	movs	r1, #1
1a000546:	4620      	mov	r0, r4
1a000548:	f7ff ff4c 	bl	1a0003e4 <Modo_Modo_1_react>
			break;
1a00054c:	e7e3      	b.n	1a000516 <hornoMicroondas_runCycle+0x12>
			Modo_Modo_2_react(handle, bool_true);
1a00054e:	2101      	movs	r1, #1
1a000550:	4620      	mov	r0, r4
1a000552:	f7ff ff05 	bl	1a000360 <Modo_Modo_2_react>
			break;
1a000556:	e7de      	b.n	1a000516 <hornoMicroondas_runCycle+0x12>
			Coccion_Stand_By_react(handle, bool_true);
1a000558:	2101      	movs	r1, #1
1a00055a:	4620      	mov	r0, r4
1a00055c:	f7ff ff81 	bl	1a000462 <Coccion_Stand_By_react>
			break;
1a000560:	e7d9      	b.n	1a000516 <hornoMicroondas_runCycle+0x12>
			Coccion_Cocinando_react(handle, bool_true);
1a000562:	2101      	movs	r1, #1
1a000564:	4620      	mov	r0, r4
1a000566:	f7ff ff99 	bl	1a00049c <Coccion_Cocinando_react>
			break;
1a00056a:	e7d4      	b.n	1a000516 <hornoMicroondas_runCycle+0x12>
	clearInEvents(handle);
1a00056c:	4620      	mov	r0, r4
1a00056e:	f7ff fec7 	bl	1a000300 <clearInEvents>
}
1a000572:	bd10      	pop	{r4, pc}

1a000574 <hornoMicroondas_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a000574:	300c      	adds	r0, #12
1a000576:	4288      	cmp	r0, r1
1a000578:	dc04      	bgt.n	1a000584 <hornoMicroondas_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(HornoMicroondasTimeEvents))
1a00057a:	3001      	adds	r0, #1
1a00057c:	4288      	cmp	r0, r1
1a00057e:	d901      	bls.n	1a000584 <hornoMicroondas_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a000580:	2301      	movs	r3, #1
1a000582:	700b      	strb	r3, [r1, #0]
}
1a000584:	4770      	bx	lr

1a000586 <hornoMicroondasIface_raise_evModo>:
	handle->iface.evModo_raised = bool_true;
1a000586:	2301      	movs	r3, #1
1a000588:	7203      	strb	r3, [r0, #8]
}
1a00058a:	4770      	bx	lr

1a00058c <hornoMicroondasIface_raise_evIniciar>:
	handle->iface.evIniciar_raised = bool_true;
1a00058c:	2301      	movs	r3, #1
1a00058e:	7243      	strb	r3, [r0, #9]
}
1a000590:	4770      	bx	lr

1a000592 <hornoMicroondasIface_raise_evParar>:
	handle->iface.evParar_raised = bool_true;
1a000592:	2301      	movs	r3, #1
1a000594:	7283      	strb	r3, [r0, #10]
}
1a000596:	4770      	bx	lr

1a000598 <hornoMicroondasIface_raise_evPuertaAbierta>:
	handle->iface.evPuertaAbierta_raised = bool_true;
1a000598:	2301      	movs	r3, #1
1a00059a:	72c3      	strb	r3, [r0, #11]
}
1a00059c:	4770      	bx	lr
1a00059e:	Address 0x000000001a00059e is out of bounds.


1a0005a0 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0005a0:	2200      	movs	r2, #0
1a0005a2:	2a05      	cmp	r2, #5
1a0005a4:	d819      	bhi.n	1a0005da <Board_LED_Init+0x3a>
{
1a0005a6:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0005a8:	490c      	ldr	r1, [pc, #48]	; (1a0005dc <Board_LED_Init+0x3c>)
1a0005aa:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0005ae:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0005b2:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0005b4:	4b0a      	ldr	r3, [pc, #40]	; (1a0005e0 <Board_LED_Init+0x40>)
1a0005b6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0005ba:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0005be:	2001      	movs	r0, #1
1a0005c0:	40a0      	lsls	r0, r4
1a0005c2:	4301      	orrs	r1, r0
1a0005c4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0005c8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0005cc:	2100      	movs	r1, #0
1a0005ce:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0005d0:	3201      	adds	r2, #1
1a0005d2:	2a05      	cmp	r2, #5
1a0005d4:	d9e8      	bls.n	1a0005a8 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0005d6:	bc70      	pop	{r4, r5, r6}
1a0005d8:	4770      	bx	lr
1a0005da:	4770      	bx	lr
1a0005dc:	1a0019e0 	.word	0x1a0019e0
1a0005e0:	400f4000 	.word	0x400f4000

1a0005e4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0005e4:	2300      	movs	r3, #0
1a0005e6:	2b03      	cmp	r3, #3
1a0005e8:	d816      	bhi.n	1a000618 <Board_TEC_Init+0x34>
{
1a0005ea:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0005ec:	490b      	ldr	r1, [pc, #44]	; (1a00061c <Board_TEC_Init+0x38>)
1a0005ee:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005f2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0005f6:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0005f8:	4c09      	ldr	r4, [pc, #36]	; (1a000620 <Board_TEC_Init+0x3c>)
1a0005fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0005fe:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000602:	2001      	movs	r0, #1
1a000604:	40a8      	lsls	r0, r5
1a000606:	ea21 0100 	bic.w	r1, r1, r0
1a00060a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00060e:	3301      	adds	r3, #1
1a000610:	2b03      	cmp	r3, #3
1a000612:	d9eb      	bls.n	1a0005ec <Board_TEC_Init+0x8>
   }
}
1a000614:	bc30      	pop	{r4, r5}
1a000616:	4770      	bx	lr
1a000618:	4770      	bx	lr
1a00061a:	bf00      	nop
1a00061c:	1a0019d8 	.word	0x1a0019d8
1a000620:	400f4000 	.word	0x400f4000

1a000624 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000624:	2300      	movs	r3, #0
1a000626:	2b08      	cmp	r3, #8
1a000628:	d816      	bhi.n	1a000658 <Board_GPIO_Init+0x34>
{
1a00062a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00062c:	490b      	ldr	r1, [pc, #44]	; (1a00065c <Board_GPIO_Init+0x38>)
1a00062e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000632:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000636:	784d      	ldrb	r5, [r1, #1]
1a000638:	4c09      	ldr	r4, [pc, #36]	; (1a000660 <Board_GPIO_Init+0x3c>)
1a00063a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00063e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000642:	2001      	movs	r0, #1
1a000644:	40a8      	lsls	r0, r5
1a000646:	ea21 0100 	bic.w	r1, r1, r0
1a00064a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00064e:	3301      	adds	r3, #1
1a000650:	2b08      	cmp	r3, #8
1a000652:	d9eb      	bls.n	1a00062c <Board_GPIO_Init+0x8>
   }
}
1a000654:	bc30      	pop	{r4, r5}
1a000656:	4770      	bx	lr
1a000658:	4770      	bx	lr
1a00065a:	bf00      	nop
1a00065c:	1a0019ec 	.word	0x1a0019ec
1a000660:	400f4000 	.word	0x400f4000

1a000664 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000664:	b510      	push	{r4, lr}
1a000666:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000668:	4c08      	ldr	r4, [pc, #32]	; (1a00068c <Board_ADC_Init+0x28>)
1a00066a:	4669      	mov	r1, sp
1a00066c:	4620      	mov	r0, r4
1a00066e:	f000 f9bb 	bl	1a0009e8 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000672:	4a07      	ldr	r2, [pc, #28]	; (1a000690 <Board_ADC_Init+0x2c>)
1a000674:	4669      	mov	r1, sp
1a000676:	4620      	mov	r0, r4
1a000678:	f000 f9d6 	bl	1a000a28 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a00067c:	2200      	movs	r2, #0
1a00067e:	4669      	mov	r1, sp
1a000680:	4620      	mov	r0, r4
1a000682:	f000 f9ea 	bl	1a000a5a <Chip_ADC_SetResolution>
}
1a000686:	b002      	add	sp, #8
1a000688:	bd10      	pop	{r4, pc}
1a00068a:	bf00      	nop
1a00068c:	400e3000 	.word	0x400e3000
1a000690:	00061a80 	.word	0x00061a80

1a000694 <Board_SPI_Init>:
{
1a000694:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000696:	4c0b      	ldr	r4, [pc, #44]	; (1a0006c4 <Board_SPI_Init+0x30>)
1a000698:	4620      	mov	r0, r4
1a00069a:	f000 fddf 	bl	1a00125c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00069e:	6863      	ldr	r3, [r4, #4]
1a0006a0:	f023 0304 	bic.w	r3, r3, #4
1a0006a4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0006a6:	6823      	ldr	r3, [r4, #0]
1a0006a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0006ac:	f043 0307 	orr.w	r3, r3, #7
1a0006b0:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0006b2:	4905      	ldr	r1, [pc, #20]	; (1a0006c8 <Board_SPI_Init+0x34>)
1a0006b4:	4620      	mov	r0, r4
1a0006b6:	f000 fdb2 	bl	1a00121e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0006ba:	6863      	ldr	r3, [r4, #4]
1a0006bc:	f043 0302 	orr.w	r3, r3, #2
1a0006c0:	6063      	str	r3, [r4, #4]
}
1a0006c2:	bd10      	pop	{r4, pc}
1a0006c4:	400c5000 	.word	0x400c5000
1a0006c8:	000186a0 	.word	0x000186a0

1a0006cc <Board_I2C_Init>:
{
1a0006cc:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0006ce:	2000      	movs	r0, #0
1a0006d0:	f000 fd58 	bl	1a001184 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0006d4:	4b04      	ldr	r3, [pc, #16]	; (1a0006e8 <Board_I2C_Init+0x1c>)
1a0006d6:	f640 0208 	movw	r2, #2056	; 0x808
1a0006da:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0006de:	4903      	ldr	r1, [pc, #12]	; (1a0006ec <Board_I2C_Init+0x20>)
1a0006e0:	2000      	movs	r0, #0
1a0006e2:	f000 fd61 	bl	1a0011a8 <Chip_I2C_SetClockRate>
}
1a0006e6:	bd08      	pop	{r3, pc}
1a0006e8:	40086000 	.word	0x40086000
1a0006ec:	000f4240 	.word	0x000f4240

1a0006f0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0006f0:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0006f2:	4c07      	ldr	r4, [pc, #28]	; (1a000710 <Board_Debug_Init+0x20>)
1a0006f4:	4620      	mov	r0, r4
1a0006f6:	f000 f8bb 	bl	1a000870 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0006fa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0006fe:	4620      	mov	r0, r4
1a000700:	f000 f8e0 	bl	1a0008c4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000704:	2303      	movs	r3, #3
1a000706:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000708:	2301      	movs	r3, #1
1a00070a:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a00070c:	bd10      	pop	{r4, pc}
1a00070e:	bf00      	nop
1a000710:	400c1000 	.word	0x400c1000

1a000714 <Board_LED_Set>:
}


void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a000714:	2805      	cmp	r0, #5
1a000716:	d80b      	bhi.n	1a000730 <Board_LED_Set+0x1c>
      return;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, On);
1a000718:	4a06      	ldr	r2, [pc, #24]	; (1a000734 <Board_LED_Set+0x20>)
1a00071a:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a00071e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a000722:	7842      	ldrb	r2, [r0, #1]
	pGPIO->B[port][pin] = setting;
1a000724:	015b      	lsls	r3, r3, #5
1a000726:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00072a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00072e:	5499      	strb	r1, [r3, r2]
}
1a000730:	4770      	bx	lr
1a000732:	bf00      	nop
1a000734:	1a0019e0 	.word	0x1a0019e0

1a000738 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000738:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00073a:	f7ff ffd9 	bl	1a0006f0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00073e:	4809      	ldr	r0, [pc, #36]	; (1a000764 <Board_Init+0x2c>)
1a000740:	f000 fd0e 	bl	1a001160 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000744:	f7ff ff6e 	bl	1a000624 <Board_GPIO_Init>
   Board_ADC_Init();
1a000748:	f7ff ff8c 	bl	1a000664 <Board_ADC_Init>
   Board_SPI_Init();
1a00074c:	f7ff ffa2 	bl	1a000694 <Board_SPI_Init>
   Board_I2C_Init();
1a000750:	f7ff ffbc 	bl	1a0006cc <Board_I2C_Init>

   Board_LED_Init();
1a000754:	f7ff ff24 	bl	1a0005a0 <Board_LED_Init>
   Board_TEC_Init();
1a000758:	f7ff ff44 	bl	1a0005e4 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00075c:	f000 fc4a 	bl	1a000ff4 <SystemCoreClockUpdate>
}
1a000760:	bd08      	pop	{r3, pc}
1a000762:	bf00      	nop
1a000764:	400f4000 	.word	0x400f4000

1a000768 <Board_TEC_GetStatus>:


bool Board_TEC_GetStatus(uint8_t button)
{
   if (button >= GPIO_BUTTONS_SIZE) {
1a000768:	2803      	cmp	r0, #3
1a00076a:	d80f      	bhi.n	1a00078c <Board_TEC_GetStatus+0x24>
      return false;
   }

   return Chip_GPIO_GetPinState(LPC_GPIO_PORT, GpioButtons[button].port,
1a00076c:	4a08      	ldr	r2, [pc, #32]	; (1a000790 <Board_TEC_GetStatus+0x28>)
1a00076e:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a000772:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a000776:	7842      	ldrb	r2, [r0, #1]
	return (bool) pGPIO->B[port][pin];
1a000778:	015b      	lsls	r3, r3, #5
1a00077a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00077e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000782:	5c98      	ldrb	r0, [r3, r2]
1a000784:	3000      	adds	r0, #0
1a000786:	bf18      	it	ne
1a000788:	2001      	movne	r0, #1
1a00078a:	4770      	bx	lr
      return false;
1a00078c:	2000      	movs	r0, #0
                                GpioButtons[button].pin);
}
1a00078e:	4770      	bx	lr
1a000790:	1a0019d8 	.word	0x1a0019d8

1a000794 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000794:	2300      	movs	r3, #0
1a000796:	2b1c      	cmp	r3, #28
1a000798:	d812      	bhi.n	1a0007c0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00079a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00079c:	4a09      	ldr	r2, [pc, #36]	; (1a0007c4 <Board_SetupMuxing+0x30>)
1a00079e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0007a2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0007a6:	784a      	ldrb	r2, [r1, #1]
1a0007a8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0007aa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0007ae:	4906      	ldr	r1, [pc, #24]	; (1a0007c8 <Board_SetupMuxing+0x34>)
1a0007b0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0007b4:	3301      	adds	r3, #1
1a0007b6:	2b1c      	cmp	r3, #28
1a0007b8:	d9f0      	bls.n	1a00079c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0007ba:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0007be:	4770      	bx	lr
1a0007c0:	4770      	bx	lr
1a0007c2:	bf00      	nop
1a0007c4:	1a001a08 	.word	0x1a001a08
1a0007c8:	40086000 	.word	0x40086000

1a0007cc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0007cc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0007ce:	4a17      	ldr	r2, [pc, #92]	; (1a00082c <Board_SetupClocking+0x60>)
1a0007d0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0007d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0007d8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0007dc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0007e0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0007e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0007e8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0007ec:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0007f0:	2201      	movs	r2, #1
1a0007f2:	490f      	ldr	r1, [pc, #60]	; (1a000830 <Board_SetupClocking+0x64>)
1a0007f4:	2006      	movs	r0, #6
1a0007f6:	f000 fc07 	bl	1a001008 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0007fa:	2400      	movs	r4, #0
1a0007fc:	b14c      	cbz	r4, 1a000812 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0007fe:	4b0b      	ldr	r3, [pc, #44]	; (1a00082c <Board_SetupClocking+0x60>)
1a000800:	685a      	ldr	r2, [r3, #4]
1a000802:	f022 020c 	bic.w	r2, r2, #12
1a000806:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000808:	685a      	ldr	r2, [r3, #4]
1a00080a:	f042 0203 	orr.w	r2, r2, #3
1a00080e:	605a      	str	r2, [r3, #4]
}
1a000810:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000812:	4808      	ldr	r0, [pc, #32]	; (1a000834 <Board_SetupClocking+0x68>)
1a000814:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000818:	2301      	movs	r3, #1
1a00081a:	788a      	ldrb	r2, [r1, #2]
1a00081c:	7849      	ldrb	r1, [r1, #1]
1a00081e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000822:	f000 fb43 	bl	1a000eac <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000826:	3401      	adds	r4, #1
1a000828:	e7e8      	b.n	1a0007fc <Board_SetupClocking+0x30>
1a00082a:	bf00      	nop
1a00082c:	40043000 	.word	0x40043000
1a000830:	0c28cb00 	.word	0x0c28cb00
1a000834:	1a001a04 	.word	0x1a001a04

1a000838 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000838:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00083a:	f7ff ffab 	bl	1a000794 <Board_SetupMuxing>
    Board_SetupClocking();
1a00083e:	f7ff ffc5 	bl	1a0007cc <Board_SetupClocking>
}
1a000842:	bd08      	pop	{r3, pc}

1a000844 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000844:	4b09      	ldr	r3, [pc, #36]	; (1a00086c <Chip_UART_GetIndex+0x28>)
1a000846:	4298      	cmp	r0, r3
1a000848:	d009      	beq.n	1a00085e <Chip_UART_GetIndex+0x1a>
1a00084a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00084e:	4298      	cmp	r0, r3
1a000850:	d007      	beq.n	1a000862 <Chip_UART_GetIndex+0x1e>
1a000852:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000856:	4298      	cmp	r0, r3
1a000858:	d005      	beq.n	1a000866 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00085a:	2000      	movs	r0, #0
1a00085c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00085e:	2002      	movs	r0, #2
1a000860:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000862:	2003      	movs	r0, #3
1a000864:	4770      	bx	lr
			return 1;
1a000866:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000868:	4770      	bx	lr
1a00086a:	bf00      	nop
1a00086c:	400c1000 	.word	0x400c1000

1a000870 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000870:	b530      	push	{r4, r5, lr}
1a000872:	b083      	sub	sp, #12
1a000874:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000876:	f7ff ffe5 	bl	1a000844 <Chip_UART_GetIndex>
1a00087a:	2301      	movs	r3, #1
1a00087c:	461a      	mov	r2, r3
1a00087e:	4619      	mov	r1, r3
1a000880:	4d0e      	ldr	r5, [pc, #56]	; (1a0008bc <Chip_UART_Init+0x4c>)
1a000882:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000886:	f000 fb57 	bl	1a000f38 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00088a:	2307      	movs	r3, #7
1a00088c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00088e:	2300      	movs	r3, #0
1a000890:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000892:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000894:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000896:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000898:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00089a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00089c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00089e:	4b08      	ldr	r3, [pc, #32]	; (1a0008c0 <Chip_UART_Init+0x50>)
1a0008a0:	429c      	cmp	r4, r3
1a0008a2:	d006      	beq.n	1a0008b2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0008a4:	2303      	movs	r3, #3
1a0008a6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0008a8:	2310      	movs	r3, #16
1a0008aa:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0008ac:	9b01      	ldr	r3, [sp, #4]
}
1a0008ae:	b003      	add	sp, #12
1a0008b0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0008b2:	2300      	movs	r3, #0
1a0008b4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0008b6:	69a3      	ldr	r3, [r4, #24]
1a0008b8:	9301      	str	r3, [sp, #4]
1a0008ba:	e7f3      	b.n	1a0008a4 <Chip_UART_Init+0x34>
1a0008bc:	1a001a84 	.word	0x1a001a84
1a0008c0:	40082000 	.word	0x40082000

1a0008c4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0008c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0008c8:	b083      	sub	sp, #12
1a0008ca:	9001      	str	r0, [sp, #4]
1a0008cc:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0008ce:	f7ff ffb9 	bl	1a000844 <Chip_UART_GetIndex>
1a0008d2:	4b32      	ldr	r3, [pc, #200]	; (1a00099c <Chip_UART_SetBaudFDR+0xd8>)
1a0008d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0008d8:	f000 fb66 	bl	1a000fa8 <Chip_Clock_GetRate>
1a0008dc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0008de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0008e2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0008e4:	f04f 0b00 	mov.w	fp, #0
1a0008e8:	46a2      	mov	sl, r4
1a0008ea:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0008ec:	e02a      	b.n	1a000944 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0008ee:	4242      	negs	r2, r0
				div ++;
1a0008f0:	1c4b      	adds	r3, r1, #1
1a0008f2:	e017      	b.n	1a000924 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0008f4:	b30a      	cbz	r2, 1a00093a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0008f6:	4617      	mov	r7, r2
			sd = d;
1a0008f8:	46ab      	mov	fp, r5
			sm = m;
1a0008fa:	46a2      	mov	sl, r4
			sdiv = div;
1a0008fc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0008fe:	3501      	adds	r5, #1
1a000900:	42ac      	cmp	r4, r5
1a000902:	d91e      	bls.n	1a000942 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000904:	0933      	lsrs	r3, r6, #4
1a000906:	0730      	lsls	r0, r6, #28
1a000908:	fba4 0100 	umull	r0, r1, r4, r0
1a00090c:	fb04 1103 	mla	r1, r4, r3, r1
1a000910:	1962      	adds	r2, r4, r5
1a000912:	fb08 f202 	mul.w	r2, r8, r2
1a000916:	2300      	movs	r3, #0
1a000918:	f000 feae 	bl	1a001678 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00091c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00091e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000920:	2800      	cmp	r0, #0
1a000922:	dbe4      	blt.n	1a0008ee <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000924:	4297      	cmp	r7, r2
1a000926:	d3ea      	bcc.n	1a0008fe <Chip_UART_SetBaudFDR+0x3a>
1a000928:	2b00      	cmp	r3, #0
1a00092a:	d0e8      	beq.n	1a0008fe <Chip_UART_SetBaudFDR+0x3a>
1a00092c:	0c19      	lsrs	r1, r3, #16
1a00092e:	d1e6      	bne.n	1a0008fe <Chip_UART_SetBaudFDR+0x3a>
1a000930:	2b02      	cmp	r3, #2
1a000932:	d8df      	bhi.n	1a0008f4 <Chip_UART_SetBaudFDR+0x30>
1a000934:	2d00      	cmp	r5, #0
1a000936:	d0dd      	beq.n	1a0008f4 <Chip_UART_SetBaudFDR+0x30>
1a000938:	e7e1      	b.n	1a0008fe <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00093a:	4617      	mov	r7, r2
			sd = d;
1a00093c:	46ab      	mov	fp, r5
			sm = m;
1a00093e:	46a2      	mov	sl, r4
			sdiv = div;
1a000940:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000942:	3401      	adds	r4, #1
1a000944:	b11f      	cbz	r7, 1a00094e <Chip_UART_SetBaudFDR+0x8a>
1a000946:	2c0f      	cmp	r4, #15
1a000948:	d801      	bhi.n	1a00094e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00094a:	2500      	movs	r5, #0
1a00094c:	e7d8      	b.n	1a000900 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00094e:	f1b9 0f00 	cmp.w	r9, #0
1a000952:	d01e      	beq.n	1a000992 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000954:	9a01      	ldr	r2, [sp, #4]
1a000956:	4611      	mov	r1, r2
1a000958:	68d3      	ldr	r3, [r2, #12]
1a00095a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00095e:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000960:	fa5f f389 	uxtb.w	r3, r9
1a000964:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000966:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00096a:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00096c:	68d3      	ldr	r3, [r2, #12]
1a00096e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000972:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000974:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000978:	b2db      	uxtb	r3, r3
1a00097a:	f00b 020f 	and.w	r2, fp, #15
1a00097e:	4313      	orrs	r3, r2
1a000980:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000982:	0933      	lsrs	r3, r6, #4
1a000984:	fb0a f303 	mul.w	r3, sl, r3
1a000988:	44da      	add	sl, fp
1a00098a:	fb09 f90a 	mul.w	r9, r9, sl
1a00098e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000992:	4648      	mov	r0, r9
1a000994:	b003      	add	sp, #12
1a000996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00099a:	bf00      	nop
1a00099c:	1a001a7c 	.word	0x1a001a7c

1a0009a0 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0009a0:	4b03      	ldr	r3, [pc, #12]	; (1a0009b0 <Chip_ADC_GetClockIndex+0x10>)
1a0009a2:	4298      	cmp	r0, r3
1a0009a4:	d001      	beq.n	1a0009aa <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0009a6:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0009a8:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0009aa:	2004      	movs	r0, #4
1a0009ac:	4770      	bx	lr
1a0009ae:	bf00      	nop
1a0009b0:	400e4000 	.word	0x400e4000

1a0009b4 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0009b4:	b570      	push	{r4, r5, r6, lr}
1a0009b6:	460d      	mov	r5, r1
1a0009b8:	4614      	mov	r4, r2
1a0009ba:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0009bc:	f7ff fff0 	bl	1a0009a0 <Chip_ADC_GetClockIndex>
1a0009c0:	f000 faf2 	bl	1a000fa8 <Chip_Clock_GetRate>
	if (burstMode) {
1a0009c4:	b155      	cbz	r5, 1a0009dc <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0009c6:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0009ca:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0009ce:	0064      	lsls	r4, r4, #1
1a0009d0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0009d4:	b2c0      	uxtb	r0, r0
1a0009d6:	3801      	subs	r0, #1
	return div;
}
1a0009d8:	b2c0      	uxtb	r0, r0
1a0009da:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0009dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0009e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0009e4:	e7f1      	b.n	1a0009ca <getClkDiv+0x16>
1a0009e6:	Address 0x000000001a0009e6 is out of bounds.


1a0009e8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0009e8:	b538      	push	{r3, r4, r5, lr}
1a0009ea:	4605      	mov	r5, r0
1a0009ec:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0009ee:	f7ff ffd7 	bl	1a0009a0 <Chip_ADC_GetClockIndex>
1a0009f2:	2301      	movs	r3, #1
1a0009f4:	461a      	mov	r2, r3
1a0009f6:	4619      	mov	r1, r3
1a0009f8:	f000 fa9e 	bl	1a000f38 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0009fc:	2100      	movs	r1, #0
1a0009fe:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000a00:	4a08      	ldr	r2, [pc, #32]	; (1a000a24 <Chip_ADC_Init+0x3c>)
1a000a02:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000a04:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000a06:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000a08:	230b      	movs	r3, #11
1a000a0a:	4628      	mov	r0, r5
1a000a0c:	f7ff ffd2 	bl	1a0009b4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000a10:	0200      	lsls	r0, r0, #8
1a000a12:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000a16:	7920      	ldrb	r0, [r4, #4]
1a000a18:	0440      	lsls	r0, r0, #17
1a000a1a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000a1e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000a20:	6028      	str	r0, [r5, #0]
}
1a000a22:	bd38      	pop	{r3, r4, r5, pc}
1a000a24:	00061a80 	.word	0x00061a80

1a000a28 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000a28:	b570      	push	{r4, r5, r6, lr}
1a000a2a:	4605      	mov	r5, r0
1a000a2c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000a2e:	6804      	ldr	r4, [r0, #0]
1a000a30:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000a34:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000a38:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000a3a:	790b      	ldrb	r3, [r1, #4]
1a000a3c:	f1c3 030b 	rsb	r3, r3, #11
1a000a40:	b2db      	uxtb	r3, r3
1a000a42:	7949      	ldrb	r1, [r1, #5]
1a000a44:	f7ff ffb6 	bl	1a0009b4 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000a48:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000a4c:	7933      	ldrb	r3, [r6, #4]
1a000a4e:	045b      	lsls	r3, r3, #17
1a000a50:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000a54:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000a56:	602b      	str	r3, [r5, #0]
}
1a000a58:	bd70      	pop	{r4, r5, r6, pc}

1a000a5a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000a5a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000a5c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000a5e:	680a      	ldr	r2, [r1, #0]
1a000a60:	f7ff ffe2 	bl	1a000a28 <Chip_ADC_SetSampleRate>
}
1a000a64:	bd08      	pop	{r3, pc}
1a000a66:	Address 0x000000001a000a66 is out of bounds.


1a000a68 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000a68:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000a6a:	680b      	ldr	r3, [r1, #0]
1a000a6c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000a70:	d002      	beq.n	1a000a78 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000a76:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000a78:	4607      	mov	r7, r0
1a000a7a:	2501      	movs	r5, #1
1a000a7c:	e03a      	b.n	1a000af4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000a7e:	694b      	ldr	r3, [r1, #20]
1a000a80:	fb03 f302 	mul.w	r3, r3, r2
1a000a84:	fbb3 f3f5 	udiv	r3, r3, r5
1a000a88:	e01c      	b.n	1a000ac4 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000a8a:	461c      	mov	r4, r3
	if (val < 0)
1a000a8c:	ebb0 0c04 	subs.w	ip, r0, r4
1a000a90:	d427      	bmi.n	1a000ae2 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000a92:	4567      	cmp	r7, ip
1a000a94:	d906      	bls.n	1a000aa4 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000a96:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000a98:	1c77      	adds	r7, r6, #1
1a000a9a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000a9c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000a9e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000aa0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000aa2:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000aa4:	3201      	adds	r2, #1
1a000aa6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000aaa:	dc1d      	bgt.n	1a000ae8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000aac:	680c      	ldr	r4, [r1, #0]
1a000aae:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000ab2:	d0e4      	beq.n	1a000a7e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000ab4:	1c73      	adds	r3, r6, #1
1a000ab6:	fa02 fc03 	lsl.w	ip, r2, r3
1a000aba:	694b      	ldr	r3, [r1, #20]
1a000abc:	fb03 f30c 	mul.w	r3, r3, ip
1a000ac0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000ac4:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000b00 <pll_calc_divs+0x98>
1a000ac8:	4563      	cmp	r3, ip
1a000aca:	d9eb      	bls.n	1a000aa4 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000acc:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000b04 <pll_calc_divs+0x9c>
1a000ad0:	4563      	cmp	r3, ip
1a000ad2:	d809      	bhi.n	1a000ae8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000ad4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000ad8:	d1d7      	bne.n	1a000a8a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000ada:	1c74      	adds	r4, r6, #1
1a000adc:	fa23 f404 	lsr.w	r4, r3, r4
1a000ae0:	e7d4      	b.n	1a000a8c <pll_calc_divs+0x24>
		return -val;
1a000ae2:	f1cc 0c00 	rsb	ip, ip, #0
1a000ae6:	e7d4      	b.n	1a000a92 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000ae8:	3601      	adds	r6, #1
1a000aea:	2e03      	cmp	r6, #3
1a000aec:	dc01      	bgt.n	1a000af2 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000aee:	2201      	movs	r2, #1
1a000af0:	e7d9      	b.n	1a000aa6 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000af2:	3501      	adds	r5, #1
1a000af4:	2d04      	cmp	r5, #4
1a000af6:	dc01      	bgt.n	1a000afc <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000af8:	2600      	movs	r6, #0
1a000afa:	e7f6      	b.n	1a000aea <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000afc:	bcf0      	pop	{r4, r5, r6, r7}
1a000afe:	4770      	bx	lr
1a000b00:	094c5eff 	.word	0x094c5eff
1a000b04:	1312d000 	.word	0x1312d000

1a000b08 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b0a:	b099      	sub	sp, #100	; 0x64
1a000b0c:	4605      	mov	r5, r0
1a000b0e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000b10:	225c      	movs	r2, #92	; 0x5c
1a000b12:	2100      	movs	r1, #0
1a000b14:	a801      	add	r0, sp, #4
1a000b16:	f000 ff55 	bl	1a0019c4 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000b1a:	2380      	movs	r3, #128	; 0x80
1a000b1c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000b1e:	6963      	ldr	r3, [r4, #20]
1a000b20:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000b22:	7923      	ldrb	r3, [r4, #4]
1a000b24:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000b28:	4669      	mov	r1, sp
1a000b2a:	4628      	mov	r0, r5
1a000b2c:	f7ff ff9c 	bl	1a000a68 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000b30:	9b06      	ldr	r3, [sp, #24]
1a000b32:	42ab      	cmp	r3, r5
1a000b34:	d027      	beq.n	1a000b86 <pll_get_frac+0x7e>
	if (val < 0)
1a000b36:	1aeb      	subs	r3, r5, r3
1a000b38:	d42e      	bmi.n	1a000b98 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000b3a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000b42:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000b44:	6963      	ldr	r3, [r4, #20]
1a000b46:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000b48:	7923      	ldrb	r3, [r4, #4]
1a000b4a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000b4e:	a910      	add	r1, sp, #64	; 0x40
1a000b50:	4628      	mov	r0, r5
1a000b52:	f7ff ff89 	bl	1a000a68 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000b56:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000b58:	42ab      	cmp	r3, r5
1a000b5a:	d01f      	beq.n	1a000b9c <pll_get_frac+0x94>
	if (val < 0)
1a000b5c:	1aeb      	subs	r3, r5, r3
1a000b5e:	d425      	bmi.n	1a000bac <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000b60:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000b62:	4b2b      	ldr	r3, [pc, #172]	; (1a000c10 <pll_get_frac+0x108>)
1a000b64:	429d      	cmp	r5, r3
1a000b66:	d923      	bls.n	1a000bb0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000b6a:	1aed      	subs	r5, r5, r3
1a000b6c:	d433      	bmi.n	1a000bd6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000b6e:	42ae      	cmp	r6, r5
1a000b70:	dc3b      	bgt.n	1a000bea <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000b72:	42be      	cmp	r6, r7
1a000b74:	dc31      	bgt.n	1a000bda <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000b76:	466d      	mov	r5, sp
1a000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b84:	e006      	b.n	1a000b94 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000b86:	466d      	mov	r5, sp
1a000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000b94:	b019      	add	sp, #100	; 0x64
1a000b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000b98:	425b      	negs	r3, r3
1a000b9a:	e7ce      	b.n	1a000b3a <pll_get_frac+0x32>
		*ppll = pll[2];
1a000b9c:	ad10      	add	r5, sp, #64	; 0x40
1a000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ba2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000baa:	e7f3      	b.n	1a000b94 <pll_get_frac+0x8c>
		return -val;
1a000bac:	425b      	negs	r3, r3
1a000bae:	e7d7      	b.n	1a000b60 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000bb0:	2340      	movs	r3, #64	; 0x40
1a000bb2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000bb4:	6963      	ldr	r3, [r4, #20]
1a000bb6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000bb8:	a908      	add	r1, sp, #32
1a000bba:	4628      	mov	r0, r5
1a000bbc:	f7ff ff54 	bl	1a000a68 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000bc2:	42ab      	cmp	r3, r5
1a000bc4:	d1d0      	bne.n	1a000b68 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000bc6:	ad08      	add	r5, sp, #32
1a000bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bcc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000bd4:	e7de      	b.n	1a000b94 <pll_get_frac+0x8c>
		return -val;
1a000bd6:	426d      	negs	r5, r5
1a000bd8:	e7c9      	b.n	1a000b6e <pll_get_frac+0x66>
			*ppll = pll[2];
1a000bda:	ad10      	add	r5, sp, #64	; 0x40
1a000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000be0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000be8:	e7d4      	b.n	1a000b94 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000bea:	42af      	cmp	r7, r5
1a000bec:	db07      	blt.n	1a000bfe <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000bee:	ad08      	add	r5, sp, #32
1a000bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bfc:	e7ca      	b.n	1a000b94 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000bfe:	ad10      	add	r5, sp, #64	; 0x40
1a000c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c0c:	e7c2      	b.n	1a000b94 <pll_get_frac+0x8c>
1a000c0e:	bf00      	nop
1a000c10:	068e7780 	.word	0x068e7780

1a000c14 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000c14:	b430      	push	{r4, r5}
1a000c16:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000c18:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000c1a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c1c:	e000      	b.n	1a000c20 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000c1e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c20:	281c      	cmp	r0, #28
1a000c22:	d118      	bne.n	1a000c56 <Chip_Clock_FindBaseClock+0x42>
1a000c24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000c28:	0051      	lsls	r1, r2, #1
1a000c2a:	4a0c      	ldr	r2, [pc, #48]	; (1a000c5c <Chip_Clock_FindBaseClock+0x48>)
1a000c2c:	440a      	add	r2, r1
1a000c2e:	7914      	ldrb	r4, [r2, #4]
1a000c30:	4284      	cmp	r4, r0
1a000c32:	d010      	beq.n	1a000c56 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000c34:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000c38:	004a      	lsls	r2, r1, #1
1a000c3a:	4908      	ldr	r1, [pc, #32]	; (1a000c5c <Chip_Clock_FindBaseClock+0x48>)
1a000c3c:	5a8a      	ldrh	r2, [r1, r2]
1a000c3e:	42aa      	cmp	r2, r5
1a000c40:	d8ed      	bhi.n	1a000c1e <Chip_Clock_FindBaseClock+0xa>
1a000c42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000c46:	0051      	lsls	r1, r2, #1
1a000c48:	4a04      	ldr	r2, [pc, #16]	; (1a000c5c <Chip_Clock_FindBaseClock+0x48>)
1a000c4a:	440a      	add	r2, r1
1a000c4c:	8852      	ldrh	r2, [r2, #2]
1a000c4e:	42aa      	cmp	r2, r5
1a000c50:	d3e5      	bcc.n	1a000c1e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000c52:	4620      	mov	r0, r4
1a000c54:	e7e4      	b.n	1a000c20 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000c56:	bc30      	pop	{r4, r5}
1a000c58:	4770      	bx	lr
1a000c5a:	bf00      	nop
1a000c5c:	1a001a98 	.word	0x1a001a98

1a000c60 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000c60:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000c66:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000c68:	4a0d      	ldr	r2, [pc, #52]	; (1a000ca0 <Chip_Clock_EnableCrystal+0x40>)
1a000c6a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000c6c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000c70:	6992      	ldr	r2, [r2, #24]
1a000c72:	428a      	cmp	r2, r1
1a000c74:	d001      	beq.n	1a000c7a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000c76:	4a0a      	ldr	r2, [pc, #40]	; (1a000ca0 <Chip_Clock_EnableCrystal+0x40>)
1a000c78:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000c7a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000c7e:	4a09      	ldr	r2, [pc, #36]	; (1a000ca4 <Chip_Clock_EnableCrystal+0x44>)
1a000c80:	6811      	ldr	r1, [r2, #0]
1a000c82:	4a09      	ldr	r2, [pc, #36]	; (1a000ca8 <Chip_Clock_EnableCrystal+0x48>)
1a000c84:	4291      	cmp	r1, r2
1a000c86:	d901      	bls.n	1a000c8c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000c88:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000c8c:	4a04      	ldr	r2, [pc, #16]	; (1a000ca0 <Chip_Clock_EnableCrystal+0x40>)
1a000c8e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000c90:	9b01      	ldr	r3, [sp, #4]
1a000c92:	1e5a      	subs	r2, r3, #1
1a000c94:	9201      	str	r2, [sp, #4]
1a000c96:	2b00      	cmp	r3, #0
1a000c98:	d1fa      	bne.n	1a000c90 <Chip_Clock_EnableCrystal+0x30>
}
1a000c9a:	b002      	add	sp, #8
1a000c9c:	4770      	bx	lr
1a000c9e:	bf00      	nop
1a000ca0:	40050000 	.word	0x40050000
1a000ca4:	1a001a00 	.word	0x1a001a00
1a000ca8:	01312cff 	.word	0x01312cff

1a000cac <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000cac:	3012      	adds	r0, #18
1a000cae:	4b05      	ldr	r3, [pc, #20]	; (1a000cc4 <Chip_Clock_GetDividerSource+0x18>)
1a000cb0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000cb4:	f010 0f01 	tst.w	r0, #1
1a000cb8:	d102      	bne.n	1a000cc0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000cba:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000cbe:	4770      	bx	lr
		return CLKINPUT_PD;
1a000cc0:	2011      	movs	r0, #17
}
1a000cc2:	4770      	bx	lr
1a000cc4:	40050000 	.word	0x40050000

1a000cc8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000cc8:	f100 0212 	add.w	r2, r0, #18
1a000ccc:	4b03      	ldr	r3, [pc, #12]	; (1a000cdc <Chip_Clock_GetDividerDivisor+0x14>)
1a000cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000cd2:	4b03      	ldr	r3, [pc, #12]	; (1a000ce0 <Chip_Clock_GetDividerDivisor+0x18>)
1a000cd4:	5c18      	ldrb	r0, [r3, r0]
}
1a000cd6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000cda:	4770      	bx	lr
1a000cdc:	40050000 	.word	0x40050000
1a000ce0:	1a001a90 	.word	0x1a001a90

1a000ce4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000ce4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000ce6:	2810      	cmp	r0, #16
1a000ce8:	d80a      	bhi.n	1a000d00 <Chip_Clock_GetClockInputHz+0x1c>
1a000cea:	e8df f000 	tbb	[pc, r0]
1a000cee:	0b44      	.short	0x0b44
1a000cf0:	0921180d 	.word	0x0921180d
1a000cf4:	2d2a2724 	.word	0x2d2a2724
1a000cf8:	34300909 	.word	0x34300909
1a000cfc:	3c38      	.short	0x3c38
1a000cfe:	40          	.byte	0x40
1a000cff:	00          	.byte	0x00
	uint32_t rate = 0;
1a000d00:	2000      	movs	r0, #0
1a000d02:	e03a      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000d04:	481e      	ldr	r0, [pc, #120]	; (1a000d80 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000d06:	e038      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d08:	4b1e      	ldr	r3, [pc, #120]	; (1a000d84 <Chip_Clock_GetClockInputHz+0xa0>)
1a000d0a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d0e:	f003 0307 	and.w	r3, r3, #7
1a000d12:	2b04      	cmp	r3, #4
1a000d14:	d001      	beq.n	1a000d1a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000d16:	481c      	ldr	r0, [pc, #112]	; (1a000d88 <Chip_Clock_GetClockInputHz+0xa4>)
1a000d18:	e02f      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000d1a:	2000      	movs	r0, #0
1a000d1c:	e02d      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d1e:	4b19      	ldr	r3, [pc, #100]	; (1a000d84 <Chip_Clock_GetClockInputHz+0xa0>)
1a000d20:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d24:	f003 0307 	and.w	r3, r3, #7
1a000d28:	2b04      	cmp	r3, #4
1a000d2a:	d027      	beq.n	1a000d7c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000d2c:	4816      	ldr	r0, [pc, #88]	; (1a000d88 <Chip_Clock_GetClockInputHz+0xa4>)
1a000d2e:	e024      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000d30:	4b16      	ldr	r3, [pc, #88]	; (1a000d8c <Chip_Clock_GetClockInputHz+0xa8>)
1a000d32:	6818      	ldr	r0, [r3, #0]
		break;
1a000d34:	e021      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000d36:	4b16      	ldr	r3, [pc, #88]	; (1a000d90 <Chip_Clock_GetClockInputHz+0xac>)
1a000d38:	6818      	ldr	r0, [r3, #0]
		break;
1a000d3a:	e01e      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000d3c:	4b15      	ldr	r3, [pc, #84]	; (1a000d94 <Chip_Clock_GetClockInputHz+0xb0>)
1a000d3e:	6818      	ldr	r0, [r3, #0]
		break;
1a000d40:	e01b      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000d42:	4b14      	ldr	r3, [pc, #80]	; (1a000d94 <Chip_Clock_GetClockInputHz+0xb0>)
1a000d44:	6858      	ldr	r0, [r3, #4]
		break;
1a000d46:	e018      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000d48:	f000 f868 	bl	1a000e1c <Chip_Clock_GetMainPLLHz>
		break;
1a000d4c:	e015      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000d4e:	2100      	movs	r1, #0
1a000d50:	f000 f89a 	bl	1a000e88 <Chip_Clock_GetDivRate>
		break;
1a000d54:	e011      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000d56:	2101      	movs	r1, #1
1a000d58:	f000 f896 	bl	1a000e88 <Chip_Clock_GetDivRate>
		break;
1a000d5c:	e00d      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000d5e:	2102      	movs	r1, #2
1a000d60:	f000 f892 	bl	1a000e88 <Chip_Clock_GetDivRate>
		break;
1a000d64:	e009      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000d66:	2103      	movs	r1, #3
1a000d68:	f000 f88e 	bl	1a000e88 <Chip_Clock_GetDivRate>
		break;
1a000d6c:	e005      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000d6e:	2104      	movs	r1, #4
1a000d70:	f000 f88a 	bl	1a000e88 <Chip_Clock_GetDivRate>
		break;
1a000d74:	e001      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000d76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000d7a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000d7c:	4806      	ldr	r0, [pc, #24]	; (1a000d98 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000d7e:	e7fc      	b.n	1a000d7a <Chip_Clock_GetClockInputHz+0x96>
1a000d80:	00b71b00 	.word	0x00b71b00
1a000d84:	40043000 	.word	0x40043000
1a000d88:	017d7840 	.word	0x017d7840
1a000d8c:	1a0019d4 	.word	0x1a0019d4
1a000d90:	1a001a00 	.word	0x1a001a00
1a000d94:	10000038 	.word	0x10000038
1a000d98:	02faf080 	.word	0x02faf080

1a000d9c <Chip_Clock_CalcMainPLLValue>:
{
1a000d9c:	b538      	push	{r3, r4, r5, lr}
1a000d9e:	4605      	mov	r5, r0
1a000da0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000da2:	7908      	ldrb	r0, [r1, #4]
1a000da4:	f7ff ff9e 	bl	1a000ce4 <Chip_Clock_GetClockInputHz>
1a000da8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000daa:	4b19      	ldr	r3, [pc, #100]	; (1a000e10 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000dac:	442b      	add	r3, r5
1a000dae:	4a19      	ldr	r2, [pc, #100]	; (1a000e14 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000db0:	4293      	cmp	r3, r2
1a000db2:	d821      	bhi.n	1a000df8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000db4:	b318      	cbz	r0, 1a000dfe <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000db6:	2380      	movs	r3, #128	; 0x80
1a000db8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000dba:	2300      	movs	r3, #0
1a000dbc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000dbe:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000dc0:	fbb5 f3f0 	udiv	r3, r5, r0
1a000dc4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000dc6:	4a14      	ldr	r2, [pc, #80]	; (1a000e18 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000dc8:	4295      	cmp	r5, r2
1a000dca:	d903      	bls.n	1a000dd4 <Chip_Clock_CalcMainPLLValue+0x38>
1a000dcc:	fb03 f000 	mul.w	r0, r3, r0
1a000dd0:	42a8      	cmp	r0, r5
1a000dd2:	d007      	beq.n	1a000de4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000dd4:	4621      	mov	r1, r4
1a000dd6:	4628      	mov	r0, r5
1a000dd8:	f7ff fe96 	bl	1a000b08 <pll_get_frac>
		if (!ppll->nsel) {
1a000ddc:	68a3      	ldr	r3, [r4, #8]
1a000dde:	b18b      	cbz	r3, 1a000e04 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000de0:	3b01      	subs	r3, #1
1a000de2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000de4:	6923      	ldr	r3, [r4, #16]
1a000de6:	b183      	cbz	r3, 1a000e0a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000de8:	68e2      	ldr	r2, [r4, #12]
1a000dea:	b10a      	cbz	r2, 1a000df0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000dec:	3a01      	subs	r2, #1
1a000dee:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000df0:	3b01      	subs	r3, #1
1a000df2:	6123      	str	r3, [r4, #16]
	return 0;
1a000df4:	2000      	movs	r0, #0
}
1a000df6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dfc:	e7fb      	b.n	1a000df6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e02:	e7f8      	b.n	1a000df6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e08:	e7f5      	b.n	1a000df6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000e0e:	e7f2      	b.n	1a000df6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000e10:	ff6b3a10 	.word	0xff6b3a10
1a000e14:	0b940510 	.word	0x0b940510
1a000e18:	094c5eff 	.word	0x094c5eff

1a000e1c <Chip_Clock_GetMainPLLHz>:
{
1a000e1c:	b530      	push	{r4, r5, lr}
1a000e1e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000e20:	4d17      	ldr	r5, [pc, #92]	; (1a000e80 <Chip_Clock_GetMainPLLHz+0x64>)
1a000e22:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000e24:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000e28:	f7ff ff5c 	bl	1a000ce4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000e2c:	4b15      	ldr	r3, [pc, #84]	; (1a000e84 <Chip_Clock_GetMainPLLHz+0x68>)
1a000e2e:	681b      	ldr	r3, [r3, #0]
1a000e30:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000e32:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000e34:	f013 0f01 	tst.w	r3, #1
1a000e38:	d020      	beq.n	1a000e7c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000e3a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000e3e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000e42:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000e46:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000e4a:	3301      	adds	r3, #1
	n = nsel + 1;
1a000e4c:	3201      	adds	r2, #1
	p = ptab[psel];
1a000e4e:	f10d 0c08 	add.w	ip, sp, #8
1a000e52:	4461      	add	r1, ip
1a000e54:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000e58:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000e5c:	d108      	bne.n	1a000e70 <Chip_Clock_GetMainPLLHz+0x54>
1a000e5e:	b93d      	cbnz	r5, 1a000e70 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000e60:	0049      	lsls	r1, r1, #1
1a000e62:	fbb3 f3f1 	udiv	r3, r3, r1
1a000e66:	fbb0 f0f2 	udiv	r0, r0, r2
1a000e6a:	fb00 f003 	mul.w	r0, r0, r3
1a000e6e:	e003      	b.n	1a000e78 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000e70:	fbb0 f0f2 	udiv	r0, r0, r2
1a000e74:	fb03 f000 	mul.w	r0, r3, r0
}
1a000e78:	b003      	add	sp, #12
1a000e7a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a000e7c:	2000      	movs	r0, #0
1a000e7e:	e7fb      	b.n	1a000e78 <Chip_Clock_GetMainPLLHz+0x5c>
1a000e80:	40050000 	.word	0x40050000
1a000e84:	1a001a8c 	.word	0x1a001a8c

1a000e88 <Chip_Clock_GetDivRate>:
{
1a000e88:	b538      	push	{r3, r4, r5, lr}
1a000e8a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000e8c:	4608      	mov	r0, r1
1a000e8e:	f7ff ff0d 	bl	1a000cac <Chip_Clock_GetDividerSource>
1a000e92:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000e94:	4620      	mov	r0, r4
1a000e96:	f7ff ff17 	bl	1a000cc8 <Chip_Clock_GetDividerDivisor>
1a000e9a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000e9c:	4628      	mov	r0, r5
1a000e9e:	f7ff ff21 	bl	1a000ce4 <Chip_Clock_GetClockInputHz>
1a000ea2:	3401      	adds	r4, #1
}
1a000ea4:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ea8:	bd38      	pop	{r3, r4, r5, pc}
1a000eaa:	Address 0x000000001a000eaa is out of bounds.


1a000eac <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000eac:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000eae:	f100 0416 	add.w	r4, r0, #22
1a000eb2:	00a4      	lsls	r4, r4, #2
1a000eb4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000eb8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000ebc:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000ebe:	281b      	cmp	r0, #27
1a000ec0:	d813      	bhi.n	1a000eea <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000ec2:	2911      	cmp	r1, #17
1a000ec4:	d01a      	beq.n	1a000efc <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000ec6:	4d0e      	ldr	r5, [pc, #56]	; (1a000f00 <Chip_Clock_SetBaseClock+0x54>)
1a000ec8:	4025      	ands	r5, r4

			if (autoblocken) {
1a000eca:	b10a      	cbz	r2, 1a000ed0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000ecc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000ed0:	b10b      	cbz	r3, 1a000ed6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000ed2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000ed6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000eda:	3016      	adds	r0, #22
1a000edc:	0080      	lsls	r0, r0, #2
1a000ede:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ee2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ee6:	6045      	str	r5, [r0, #4]
1a000ee8:	e008      	b.n	1a000efc <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000eea:	f044 0401 	orr.w	r4, r4, #1
1a000eee:	3016      	adds	r0, #22
1a000ef0:	0080      	lsls	r0, r0, #2
1a000ef2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ef6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000efa:	6044      	str	r4, [r0, #4]
	}
}
1a000efc:	bc30      	pop	{r4, r5}
1a000efe:	4770      	bx	lr
1a000f00:	e0fff7fe 	.word	0xe0fff7fe

1a000f04 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000f04:	281b      	cmp	r0, #27
1a000f06:	d80c      	bhi.n	1a000f22 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f08:	3016      	adds	r0, #22
1a000f0a:	0080      	lsls	r0, r0, #2
1a000f0c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f10:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f14:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000f16:	f010 0f01 	tst.w	r0, #1
1a000f1a:	d104      	bne.n	1a000f26 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f1c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f20:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f22:	2011      	movs	r0, #17
1a000f24:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f26:	2011      	movs	r0, #17
}
1a000f28:	4770      	bx	lr

1a000f2a <Chip_Clock_GetBaseClocktHz>:
{
1a000f2a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000f2c:	f7ff ffea 	bl	1a000f04 <Chip_Clock_GetBaseClock>
1a000f30:	f7ff fed8 	bl	1a000ce4 <Chip_Clock_GetClockInputHz>
}
1a000f34:	bd08      	pop	{r3, pc}
1a000f36:	Address 0x000000001a000f36 is out of bounds.


1a000f38 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000f38:	b971      	cbnz	r1, 1a000f58 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000f3a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000f3c:	b10a      	cbz	r2, 1a000f42 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000f3e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000f42:	2b02      	cmp	r3, #2
1a000f44:	d00a      	beq.n	1a000f5c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000f46:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f4a:	d30a      	bcc.n	1a000f62 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000f4c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000f50:	4b06      	ldr	r3, [pc, #24]	; (1a000f6c <Chip_Clock_EnableOpts+0x34>)
1a000f52:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000f56:	4770      	bx	lr
		reg |= (1 << 1);
1a000f58:	2103      	movs	r1, #3
1a000f5a:	e7ef      	b.n	1a000f3c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000f5c:	f041 0120 	orr.w	r1, r1, #32
1a000f60:	e7f1      	b.n	1a000f46 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000f62:	3020      	adds	r0, #32
1a000f64:	4b02      	ldr	r3, [pc, #8]	; (1a000f70 <Chip_Clock_EnableOpts+0x38>)
1a000f66:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000f6a:	4770      	bx	lr
1a000f6c:	40052000 	.word	0x40052000
1a000f70:	40051000 	.word	0x40051000

1a000f74 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000f74:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f78:	d309      	bcc.n	1a000f8e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000f7a:	4a09      	ldr	r2, [pc, #36]	; (1a000fa0 <Chip_Clock_Enable+0x2c>)
1a000f7c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000f80:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000f84:	f043 0301 	orr.w	r3, r3, #1
1a000f88:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000f8c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000f8e:	4a05      	ldr	r2, [pc, #20]	; (1a000fa4 <Chip_Clock_Enable+0x30>)
1a000f90:	3020      	adds	r0, #32
1a000f92:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000f96:	f043 0301 	orr.w	r3, r3, #1
1a000f9a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000f9e:	4770      	bx	lr
1a000fa0:	40052000 	.word	0x40052000
1a000fa4:	40051000 	.word	0x40051000

1a000fa8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000fa8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000faa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000fae:	d309      	bcc.n	1a000fc4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000fb0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000fb4:	4a0d      	ldr	r2, [pc, #52]	; (1a000fec <Chip_Clock_GetRate+0x44>)
1a000fb6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000fba:	f014 0f01 	tst.w	r4, #1
1a000fbe:	d107      	bne.n	1a000fd0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000fc0:	2000      	movs	r0, #0
	}

	return rate;
}
1a000fc2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000fc4:	f100 0320 	add.w	r3, r0, #32
1a000fc8:	4a09      	ldr	r2, [pc, #36]	; (1a000ff0 <Chip_Clock_GetRate+0x48>)
1a000fca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000fce:	e7f4      	b.n	1a000fba <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000fd0:	f7ff fe20 	bl	1a000c14 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000fd4:	f7ff ffa9 	bl	1a000f2a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000fd8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000fdc:	d103      	bne.n	1a000fe6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000fde:	2301      	movs	r3, #1
		rate = rate / div;
1a000fe0:	fbb0 f0f3 	udiv	r0, r0, r3
1a000fe4:	e7ed      	b.n	1a000fc2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000fe6:	2302      	movs	r3, #2
1a000fe8:	e7fa      	b.n	1a000fe0 <Chip_Clock_GetRate+0x38>
1a000fea:	bf00      	nop
1a000fec:	40052000 	.word	0x40052000
1a000ff0:	40051000 	.word	0x40051000

1a000ff4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000ff4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000ff6:	2069      	movs	r0, #105	; 0x69
1a000ff8:	f7ff ffd6 	bl	1a000fa8 <Chip_Clock_GetRate>
1a000ffc:	4b01      	ldr	r3, [pc, #4]	; (1a001004 <SystemCoreClockUpdate+0x10>)
1a000ffe:	6018      	str	r0, [r3, #0]
}
1a001000:	bd08      	pop	{r3, pc}
1a001002:	bf00      	nop
1a001004:	10000054 	.word	0x10000054

1a001008 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001008:	b570      	push	{r4, r5, r6, lr}
1a00100a:	b08a      	sub	sp, #40	; 0x28
1a00100c:	4605      	mov	r5, r0
1a00100e:	460e      	mov	r6, r1
1a001010:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001012:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001016:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001018:	2806      	cmp	r0, #6
1a00101a:	d018      	beq.n	1a00104e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00101c:	2300      	movs	r3, #0
1a00101e:	2201      	movs	r2, #1
1a001020:	4629      	mov	r1, r5
1a001022:	2004      	movs	r0, #4
1a001024:	f7ff ff42 	bl	1a000eac <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001028:	4a4a      	ldr	r2, [pc, #296]	; (1a001154 <Chip_SetupCoreClock+0x14c>)
1a00102a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00102c:	f043 0301 	orr.w	r3, r3, #1
1a001030:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001032:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001036:	a901      	add	r1, sp, #4
1a001038:	4630      	mov	r0, r6
1a00103a:	f7ff feaf 	bl	1a000d9c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00103e:	4b46      	ldr	r3, [pc, #280]	; (1a001158 <Chip_SetupCoreClock+0x150>)
1a001040:	429e      	cmp	r6, r3
1a001042:	d916      	bls.n	1a001072 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001044:	9b01      	ldr	r3, [sp, #4]
1a001046:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00104a:	d003      	beq.n	1a001054 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00104c:	e7fe      	b.n	1a00104c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00104e:	f7ff fe07 	bl	1a000c60 <Chip_Clock_EnableCrystal>
1a001052:	e7e3      	b.n	1a00101c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001054:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001058:	d005      	beq.n	1a001066 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00105a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00105e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001060:	2500      	movs	r5, #0
			direct = 1;
1a001062:	2601      	movs	r6, #1
1a001064:	e007      	b.n	1a001076 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001066:	9b04      	ldr	r3, [sp, #16]
1a001068:	3301      	adds	r3, #1
1a00106a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00106c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00106e:	2600      	movs	r6, #0
1a001070:	e001      	b.n	1a001076 <Chip_SetupCoreClock+0x6e>
1a001072:	2500      	movs	r5, #0
1a001074:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001076:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00107a:	9b01      	ldr	r3, [sp, #4]
1a00107c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001080:	9a05      	ldr	r2, [sp, #20]
1a001082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001086:	9a03      	ldr	r2, [sp, #12]
1a001088:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00108c:	9a04      	ldr	r2, [sp, #16]
1a00108e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001092:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001096:	4a2f      	ldr	r2, [pc, #188]	; (1a001154 <Chip_SetupCoreClock+0x14c>)
1a001098:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00109a:	4b2e      	ldr	r3, [pc, #184]	; (1a001154 <Chip_SetupCoreClock+0x14c>)
1a00109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00109e:	f013 0f01 	tst.w	r3, #1
1a0010a2:	d0fa      	beq.n	1a00109a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0010a4:	2300      	movs	r3, #0
1a0010a6:	2201      	movs	r2, #1
1a0010a8:	2109      	movs	r1, #9
1a0010aa:	2004      	movs	r0, #4
1a0010ac:	f7ff fefe 	bl	1a000eac <Chip_Clock_SetBaseClock>

	if (direct) {
1a0010b0:	b306      	cbz	r6, 1a0010f4 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0010b2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0010b6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0010b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0010ba:	1e5a      	subs	r2, r3, #1
1a0010bc:	9209      	str	r2, [sp, #36]	; 0x24
1a0010be:	2b00      	cmp	r3, #0
1a0010c0:	d1fa      	bne.n	1a0010b8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0010c2:	9b01      	ldr	r3, [sp, #4]
1a0010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0010c8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0010ca:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0010ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0010d2:	9a05      	ldr	r2, [sp, #20]
1a0010d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0010d8:	9a03      	ldr	r2, [sp, #12]
1a0010da:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0010de:	9a04      	ldr	r2, [sp, #16]
1a0010e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0010e8:	4a1a      	ldr	r2, [pc, #104]	; (1a001154 <Chip_SetupCoreClock+0x14c>)
1a0010ea:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0010ec:	2c00      	cmp	r4, #0
1a0010ee:	d12e      	bne.n	1a00114e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0010f0:	b00a      	add	sp, #40	; 0x28
1a0010f2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0010f4:	2d00      	cmp	r5, #0
1a0010f6:	d0f9      	beq.n	1a0010ec <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0010f8:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0010fc:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0010fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001100:	1e5a      	subs	r2, r3, #1
1a001102:	9209      	str	r2, [sp, #36]	; 0x24
1a001104:	2b00      	cmp	r3, #0
1a001106:	d1fa      	bne.n	1a0010fe <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001108:	9b04      	ldr	r3, [sp, #16]
1a00110a:	1e5a      	subs	r2, r3, #1
1a00110c:	9204      	str	r2, [sp, #16]
1a00110e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001112:	9b01      	ldr	r3, [sp, #4]
1a001114:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001118:	9905      	ldr	r1, [sp, #20]
1a00111a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00111e:	9903      	ldr	r1, [sp, #12]
1a001120:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00112c:	4a09      	ldr	r2, [pc, #36]	; (1a001154 <Chip_SetupCoreClock+0x14c>)
1a00112e:	6453      	str	r3, [r2, #68]	; 0x44
1a001130:	e7dc      	b.n	1a0010ec <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001132:	480a      	ldr	r0, [pc, #40]	; (1a00115c <Chip_SetupCoreClock+0x154>)
1a001134:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001138:	78cb      	ldrb	r3, [r1, #3]
1a00113a:	788a      	ldrb	r2, [r1, #2]
1a00113c:	7849      	ldrb	r1, [r1, #1]
1a00113e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001142:	f7ff feb3 	bl	1a000eac <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001146:	3401      	adds	r4, #1
1a001148:	2c11      	cmp	r4, #17
1a00114a:	d9f2      	bls.n	1a001132 <Chip_SetupCoreClock+0x12a>
1a00114c:	e7d0      	b.n	1a0010f0 <Chip_SetupCoreClock+0xe8>
1a00114e:	2400      	movs	r4, #0
1a001150:	e7fa      	b.n	1a001148 <Chip_SetupCoreClock+0x140>
1a001152:	bf00      	nop
1a001154:	40050000 	.word	0x40050000
1a001158:	068e7780 	.word	0x068e7780
1a00115c:	1a001b04 	.word	0x1a001b04

1a001160 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001160:	4770      	bx	lr
1a001162:	Address 0x000000001a001162 is out of bounds.


1a001164 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001164:	2901      	cmp	r1, #1
1a001166:	d109      	bne.n	1a00117c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001168:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00116c:	0082      	lsls	r2, r0, #2
1a00116e:	4b04      	ldr	r3, [pc, #16]	; (1a001180 <Chip_I2C_EventHandler+0x1c>)
1a001170:	4413      	add	r3, r2
1a001172:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001174:	7d13      	ldrb	r3, [r2, #20]
1a001176:	b2db      	uxtb	r3, r3
1a001178:	2b04      	cmp	r3, #4
1a00117a:	d0fb      	beq.n	1a001174 <Chip_I2C_EventHandler+0x10>
}
1a00117c:	4770      	bx	lr
1a00117e:	bf00      	nop
1a001180:	10000000 	.word	0x10000000

1a001184 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001184:	b570      	push	{r4, r5, r6, lr}
1a001186:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001188:	4e06      	ldr	r6, [pc, #24]	; (1a0011a4 <Chip_I2C_Init+0x20>)
1a00118a:	00c4      	lsls	r4, r0, #3
1a00118c:	1a22      	subs	r2, r4, r0
1a00118e:	0093      	lsls	r3, r2, #2
1a001190:	4433      	add	r3, r6
1a001192:	8898      	ldrh	r0, [r3, #4]
1a001194:	f7ff feee 	bl	1a000f74 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001198:	1b64      	subs	r4, r4, r5
1a00119a:	00a3      	lsls	r3, r4, #2
1a00119c:	58f3      	ldr	r3, [r6, r3]
1a00119e:	226c      	movs	r2, #108	; 0x6c
1a0011a0:	619a      	str	r2, [r3, #24]
}
1a0011a2:	bd70      	pop	{r4, r5, r6, pc}
1a0011a4:	10000000 	.word	0x10000000

1a0011a8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0011a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0011ac:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0011ae:	4e0b      	ldr	r6, [pc, #44]	; (1a0011dc <Chip_I2C_SetClockRate+0x34>)
1a0011b0:	00c5      	lsls	r5, r0, #3
1a0011b2:	1a2b      	subs	r3, r5, r0
1a0011b4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0011b8:	eb06 0308 	add.w	r3, r6, r8
1a0011bc:	8898      	ldrh	r0, [r3, #4]
1a0011be:	f7ff fef3 	bl	1a000fa8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0011c2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0011c6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011ca:	0842      	lsrs	r2, r0, #1
1a0011cc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0011ce:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011d2:	691a      	ldr	r2, [r3, #16]
1a0011d4:	1a80      	subs	r0, r0, r2
1a0011d6:	6158      	str	r0, [r3, #20]
}
1a0011d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0011dc:	10000000 	.word	0x10000000

1a0011e0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0011e0:	4b03      	ldr	r3, [pc, #12]	; (1a0011f0 <Chip_SSP_GetClockIndex+0x10>)
1a0011e2:	4298      	cmp	r0, r3
1a0011e4:	d001      	beq.n	1a0011ea <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0011e6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0011e8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0011ea:	20a5      	movs	r0, #165	; 0xa5
1a0011ec:	4770      	bx	lr
1a0011ee:	bf00      	nop
1a0011f0:	400c5000 	.word	0x400c5000

1a0011f4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0011f4:	4b04      	ldr	r3, [pc, #16]	; (1a001208 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0011f6:	4298      	cmp	r0, r3
1a0011f8:	d002      	beq.n	1a001200 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0011fa:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0011fe:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001200:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001204:	4770      	bx	lr
1a001206:	bf00      	nop
1a001208:	400c5000 	.word	0x400c5000

1a00120c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00120c:	6803      	ldr	r3, [r0, #0]
1a00120e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001212:	0209      	lsls	r1, r1, #8
1a001214:	b289      	uxth	r1, r1
1a001216:	4319      	orrs	r1, r3
1a001218:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00121a:	6102      	str	r2, [r0, #16]
}
1a00121c:	4770      	bx	lr

1a00121e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00121e:	b570      	push	{r4, r5, r6, lr}
1a001220:	4606      	mov	r6, r0
1a001222:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001224:	f7ff ffe6 	bl	1a0011f4 <Chip_SSP_GetPeriphClockIndex>
1a001228:	f7ff febe 	bl	1a000fa8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00122c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00122e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001232:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001234:	e000      	b.n	1a001238 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001236:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001238:	42ab      	cmp	r3, r5
1a00123a:	d90b      	bls.n	1a001254 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00123c:	1c4c      	adds	r4, r1, #1
1a00123e:	fb02 f304 	mul.w	r3, r2, r4
1a001242:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001246:	429d      	cmp	r5, r3
1a001248:	d2f6      	bcs.n	1a001238 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00124a:	2cff      	cmp	r4, #255	; 0xff
1a00124c:	d9f3      	bls.n	1a001236 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00124e:	3202      	adds	r2, #2
				cr0_div = 0;
1a001250:	2100      	movs	r1, #0
1a001252:	e7f1      	b.n	1a001238 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001254:	4630      	mov	r0, r6
1a001256:	f7ff ffd9 	bl	1a00120c <Chip_SSP_SetClockRate>
}
1a00125a:	bd70      	pop	{r4, r5, r6, pc}

1a00125c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00125c:	b510      	push	{r4, lr}
1a00125e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001260:	f7ff ffbe 	bl	1a0011e0 <Chip_SSP_GetClockIndex>
1a001264:	f7ff fe86 	bl	1a000f74 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001268:	4620      	mov	r0, r4
1a00126a:	f7ff ffc3 	bl	1a0011f4 <Chip_SSP_GetPeriphClockIndex>
1a00126e:	f7ff fe81 	bl	1a000f74 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001272:	6863      	ldr	r3, [r4, #4]
1a001274:	f023 0304 	bic.w	r3, r3, #4
1a001278:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00127a:	6823      	ldr	r3, [r4, #0]
1a00127c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001280:	f043 0307 	orr.w	r3, r3, #7
1a001284:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001286:	4902      	ldr	r1, [pc, #8]	; (1a001290 <Chip_SSP_Init+0x34>)
1a001288:	4620      	mov	r0, r4
1a00128a:	f7ff ffc8 	bl	1a00121e <Chip_SSP_SetBitRate>
}
1a00128e:	bd10      	pop	{r4, pc}
1a001290:	000186a0 	.word	0x000186a0

1a001294 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001294:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001296:	4a0b      	ldr	r2, [pc, #44]	; (1a0012c4 <SystemInit+0x30>)
1a001298:	4b0b      	ldr	r3, [pc, #44]	; (1a0012c8 <SystemInit+0x34>)
1a00129a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00129c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0012a0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0012a2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0012a6:	2b20      	cmp	r3, #32
1a0012a8:	d004      	beq.n	1a0012b4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0012aa:	f7ff fac5 	bl	1a000838 <Board_SystemInit>
   Board_Init();
1a0012ae:	f7ff fa43 	bl	1a000738 <Board_Init>
}
1a0012b2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0012b4:	4a04      	ldr	r2, [pc, #16]	; (1a0012c8 <SystemInit+0x34>)
1a0012b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0012ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0012be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0012c2:	e7f2      	b.n	1a0012aa <SystemInit+0x16>
1a0012c4:	1a000000 	.word	0x1a000000
1a0012c8:	e000ed00 	.word	0xe000ed00

1a0012cc <initialise_monitor_handles>:
}
1a0012cc:	4770      	bx	lr
1a0012ce:	Address 0x000000001a0012ce is out of bounds.


1a0012d0 <Reset_Handler>:
void Reset_Handler(void) {
1a0012d0:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0012d2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0012d4:	4b19      	ldr	r3, [pc, #100]	; (1a00133c <Reset_Handler+0x6c>)
1a0012d6:	4a1a      	ldr	r2, [pc, #104]	; (1a001340 <Reset_Handler+0x70>)
1a0012d8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0012da:	3304      	adds	r3, #4
1a0012dc:	4a19      	ldr	r2, [pc, #100]	; (1a001344 <Reset_Handler+0x74>)
1a0012de:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0012e0:	2300      	movs	r3, #0
1a0012e2:	e005      	b.n	1a0012f0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0012e4:	4a18      	ldr	r2, [pc, #96]	; (1a001348 <Reset_Handler+0x78>)
1a0012e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0012ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0012ee:	3301      	adds	r3, #1
1a0012f0:	2b07      	cmp	r3, #7
1a0012f2:	d9f7      	bls.n	1a0012e4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0012f4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0012f6:	4b15      	ldr	r3, [pc, #84]	; (1a00134c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0012f8:	e007      	b.n	1a00130a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0012fa:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0012fe:	689a      	ldr	r2, [r3, #8]
1a001300:	6859      	ldr	r1, [r3, #4]
1a001302:	6818      	ldr	r0, [r3, #0]
1a001304:	f7fe ff42 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a001308:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00130a:	4a11      	ldr	r2, [pc, #68]	; (1a001350 <Reset_Handler+0x80>)
1a00130c:	4293      	cmp	r3, r2
1a00130e:	d3f4      	bcc.n	1a0012fa <Reset_Handler+0x2a>
1a001310:	e006      	b.n	1a001320 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001312:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001314:	6859      	ldr	r1, [r3, #4]
1a001316:	f854 0b08 	ldr.w	r0, [r4], #8
1a00131a:	f7fe ff46 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a00131e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001320:	4a0c      	ldr	r2, [pc, #48]	; (1a001354 <Reset_Handler+0x84>)
1a001322:	4293      	cmp	r3, r2
1a001324:	d3f5      	bcc.n	1a001312 <Reset_Handler+0x42>
    SystemInit();
1a001326:	f7ff ffb5 	bl	1a001294 <SystemInit>
    __libc_init_array();
1a00132a:	f000 fb27 	bl	1a00197c <__libc_init_array>
    initialise_monitor_handles();
1a00132e:	f7ff ffcd 	bl	1a0012cc <initialise_monitor_handles>
    main();
1a001332:	f000 f92b 	bl	1a00158c <main>
        __asm__ volatile("wfi");
1a001336:	bf30      	wfi
1a001338:	e7fd      	b.n	1a001336 <Reset_Handler+0x66>
1a00133a:	bf00      	nop
1a00133c:	40053100 	.word	0x40053100
1a001340:	10df1000 	.word	0x10df1000
1a001344:	01dff7ff 	.word	0x01dff7ff
1a001348:	e000e280 	.word	0xe000e280
1a00134c:	1a000114 	.word	0x1a000114
1a001350:	1a000150 	.word	0x1a000150
1a001354:	1a000178 	.word	0x1a000178

1a001358 <_fini>:
void _fini(void) {}
1a001358:	4770      	bx	lr

1a00135a <_init>:
void _init(void) {}
1a00135a:	4770      	bx	lr

1a00135c <InitTimerTicks>:
#include "HornoMicroondas.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a00135c:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00135e:	2400      	movs	r4, #0
1a001360:	428c      	cmp	r4, r1
1a001362:	d20a      	bcs.n	1a00137a <InitTimerTicks+0x1e>
		list[i].evid = (sc_eventid)0;
1a001364:	0125      	lsls	r5, r4, #4
1a001366:	1942      	adds	r2, r0, r5
1a001368:	2300      	movs	r3, #0
1a00136a:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a00136c:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a00136e:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a001370:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a001372:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a001374:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a001376:	3401      	adds	r4, #1
1a001378:	e7f2      	b.n	1a001360 <InitTimerTicks+0x4>
	}
}
1a00137a:	bc30      	pop	{r4, r5}
1a00137c:	4770      	bx	lr

1a00137e <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a00137e:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a001380:	2400      	movs	r4, #0
1a001382:	428c      	cmp	r4, r1
1a001384:	d211      	bcs.n	1a0013aa <SetNewTimerTick+0x2c>
		if(!list[i].evid) {
1a001386:	0125      	lsls	r5, r4, #4
1a001388:	1946      	adds	r6, r0, r5
1a00138a:	5945      	ldr	r5, [r0, r5]
1a00138c:	b10d      	cbz	r5, 1a001392 <SetNewTimerTick+0x14>
	for(i = 0; i < len; i++) {
1a00138e:	3401      	adds	r4, #1
1a001390:	e7f7      	b.n	1a001382 <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a001392:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a001394:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a001396:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a001398:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00139c:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a00139e:	2301      	movs	r3, #1
1a0013a0:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a0013a2:	2300      	movs	r3, #0
1a0013a4:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a0013a6:	4610      	mov	r0, r2
			break;
1a0013a8:	e000      	b.n	1a0013ac <SetNewTimerTick+0x2e>
	sc_eventid ret = (sc_eventid)0;
1a0013aa:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a0013ac:	bc70      	pop	{r4, r5, r6}
1a0013ae:	4770      	bx	lr

1a0013b0 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a0013b0:	2300      	movs	r3, #0
1a0013b2:	428b      	cmp	r3, r1
1a0013b4:	d214      	bcs.n	1a0013e0 <UnsetTimerTick+0x30>
{
1a0013b6:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a0013b8:	011c      	lsls	r4, r3, #4
1a0013ba:	1905      	adds	r5, r0, r4
1a0013bc:	5904      	ldr	r4, [r0, r4]
1a0013be:	4294      	cmp	r4, r2
1a0013c0:	d004      	beq.n	1a0013cc <UnsetTimerTick+0x1c>
	for(i = 0; i < len; i++) {
1a0013c2:	3301      	adds	r3, #1
1a0013c4:	428b      	cmp	r3, r1
1a0013c6:	d3f7      	bcc.n	1a0013b8 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a0013c8:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a0013ca:	e007      	b.n	1a0013dc <UnsetTimerTick+0x2c>
			list[i].evid = (sc_eventid)0;
1a0013cc:	2300      	movs	r3, #0
1a0013ce:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a0013d0:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a0013d2:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a0013d4:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a0013d6:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a0013d8:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a0013da:	4610      	mov	r0, r2
}
1a0013dc:	bc30      	pop	{r4, r5}
1a0013de:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a0013e0:	2000      	movs	r0, #0
}
1a0013e2:	4770      	bx	lr

1a0013e4 <IsPendEvent>:

sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a0013e4:	2300      	movs	r3, #0
1a0013e6:	428b      	cmp	r3, r1
1a0013e8:	d211      	bcs.n	1a00140e <IsPendEvent+0x2a>
{
1a0013ea:	b430      	push	{r4, r5}
1a0013ec:	e002      	b.n	1a0013f4 <IsPendEvent+0x10>
	for(i=0; i < len; i++) {
1a0013ee:	3301      	adds	r3, #1
1a0013f0:	428b      	cmp	r3, r1
1a0013f2:	d209      	bcs.n	1a001408 <IsPendEvent+0x24>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a0013f4:	011c      	lsls	r4, r3, #4
1a0013f6:	1905      	adds	r5, r0, r4
1a0013f8:	5904      	ldr	r4, [r0, r4]
1a0013fa:	4294      	cmp	r4, r2
1a0013fc:	d1f7      	bne.n	1a0013ee <IsPendEvent+0xa>
1a0013fe:	7bac      	ldrb	r4, [r5, #14]
1a001400:	2c00      	cmp	r4, #0
1a001402:	d0f4      	beq.n	1a0013ee <IsPendEvent+0xa>
			ret = true;
1a001404:	2001      	movs	r0, #1
1a001406:	e000      	b.n	1a00140a <IsPendEvent+0x26>
	sc_boolean ret = false;
1a001408:	2000      	movs	r0, #0
			break;
		}
	}
	return ret;
}
1a00140a:	bc30      	pop	{r4, r5}
1a00140c:	4770      	bx	lr
	sc_boolean ret = false;
1a00140e:	2000      	movs	r0, #0
}
1a001410:	4770      	bx	lr

1a001412 <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001412:	2300      	movs	r3, #0
1a001414:	428b      	cmp	r3, r1
1a001416:	d20d      	bcs.n	1a001434 <MarkAsAttEvent+0x22>
{
1a001418:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a00141a:	011c      	lsls	r4, r3, #4
1a00141c:	1905      	adds	r5, r0, r4
1a00141e:	5904      	ldr	r4, [r0, r4]
1a001420:	4294      	cmp	r4, r2
1a001422:	d003      	beq.n	1a00142c <MarkAsAttEvent+0x1a>
	for(i = 0; i < len; i++) {
1a001424:	3301      	adds	r3, #1
1a001426:	428b      	cmp	r3, r1
1a001428:	d3f7      	bcc.n	1a00141a <MarkAsAttEvent+0x8>
1a00142a:	e001      	b.n	1a001430 <MarkAsAttEvent+0x1e>
			list[i].evPending = false;
1a00142c:	2300      	movs	r3, #0
1a00142e:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a001430:	bc30      	pop	{r4, r5}
1a001432:	4770      	bx	lr
1a001434:	4770      	bx	lr

1a001436 <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001436:	2300      	movs	r3, #0
1a001438:	428b      	cmp	r3, r1
1a00143a:	d21d      	bcs.n	1a001478 <UpdateTimers+0x42>
{
1a00143c:	b410      	push	{r4}
1a00143e:	e006      	b.n	1a00144e <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a001440:	2400      	movs	r4, #0
1a001442:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a001444:	2401      	movs	r4, #1
1a001446:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a001448:	3301      	adds	r3, #1
1a00144a:	428b      	cmp	r3, r1
1a00144c:	d211      	bcs.n	1a001472 <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a00144e:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a001452:	7b54      	ldrb	r4, [r2, #13]
1a001454:	2c00      	cmp	r4, #0
1a001456:	d0f7      	beq.n	1a001448 <UpdateTimers+0x12>
			if(list[i].count)
1a001458:	6894      	ldr	r4, [r2, #8]
1a00145a:	b10c      	cbz	r4, 1a001460 <UpdateTimers+0x2a>
				list[i].count--;
1a00145c:	3c01      	subs	r4, #1
1a00145e:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a001460:	6894      	ldr	r4, [r2, #8]
1a001462:	2c00      	cmp	r4, #0
1a001464:	d1f0      	bne.n	1a001448 <UpdateTimers+0x12>
				if(list[i].periodic)
1a001466:	7b14      	ldrb	r4, [r2, #12]
1a001468:	2c00      	cmp	r4, #0
1a00146a:	d0e9      	beq.n	1a001440 <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a00146c:	6854      	ldr	r4, [r2, #4]
1a00146e:	6094      	str	r4, [r2, #8]
1a001470:	e7e8      	b.n	1a001444 <UpdateTimers+0xe>
			}
		}
	}
}
1a001472:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001476:	4770      	bx	lr
1a001478:	4770      	bx	lr

1a00147a <hornoMicroondasIface_opSetModo>:

#define LED1      3
#define LED2      4
#define LED3      5

void hornoMicroondasIface_opSetModo(const HornoMicroondas* handle, const sc_integer Number){
1a00147a:	b508      	push	{r3, lr}
	switch (Number){
1a00147c:	2901      	cmp	r1, #1
1a00147e:	d01c      	beq.n	1a0014ba <hornoMicroondasIface_opSetModo+0x40>
1a001480:	2902      	cmp	r1, #2
1a001482:	d027      	beq.n	1a0014d4 <hornoMicroondasIface_opSetModo+0x5a>
1a001484:	b161      	cbz	r1, 1a0014a0 <hornoMicroondasIface_opSetModo+0x26>
			Board_LED_Set(LED1, false);
			Board_LED_Set(LED2, false);
			Board_LED_Set(LED3, true);
			break;
		default:
			Board_LED_Set(LED1, false);
1a001486:	2100      	movs	r1, #0
1a001488:	2003      	movs	r0, #3
1a00148a:	f7ff f943 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED2, false);
1a00148e:	2100      	movs	r1, #0
1a001490:	2004      	movs	r0, #4
1a001492:	f7ff f93f 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED3, false);
1a001496:	2100      	movs	r1, #0
1a001498:	2005      	movs	r0, #5
1a00149a:	f7ff f93b 	bl	1a000714 <Board_LED_Set>
			break;
	}

}
1a00149e:	e00b      	b.n	1a0014b8 <hornoMicroondasIface_opSetModo+0x3e>
			Board_LED_Set(LED1, true);
1a0014a0:	2101      	movs	r1, #1
1a0014a2:	2003      	movs	r0, #3
1a0014a4:	f7ff f936 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED2, false);
1a0014a8:	2100      	movs	r1, #0
1a0014aa:	2004      	movs	r0, #4
1a0014ac:	f7ff f932 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED3, false);
1a0014b0:	2100      	movs	r1, #0
1a0014b2:	2005      	movs	r0, #5
1a0014b4:	f7ff f92e 	bl	1a000714 <Board_LED_Set>
}
1a0014b8:	bd08      	pop	{r3, pc}
			Board_LED_Set(LED1, false);
1a0014ba:	2100      	movs	r1, #0
1a0014bc:	2003      	movs	r0, #3
1a0014be:	f7ff f929 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED2, true);
1a0014c2:	2101      	movs	r1, #1
1a0014c4:	2004      	movs	r0, #4
1a0014c6:	f7ff f925 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED3, false);
1a0014ca:	2100      	movs	r1, #0
1a0014cc:	2005      	movs	r0, #5
1a0014ce:	f7ff f921 	bl	1a000714 <Board_LED_Set>
			break;
1a0014d2:	e7f1      	b.n	1a0014b8 <hornoMicroondasIface_opSetModo+0x3e>
			Board_LED_Set(LED1, false);
1a0014d4:	2100      	movs	r1, #0
1a0014d6:	2003      	movs	r0, #3
1a0014d8:	f7ff f91c 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED2, false);
1a0014dc:	2100      	movs	r1, #0
1a0014de:	2004      	movs	r0, #4
1a0014e0:	f7ff f918 	bl	1a000714 <Board_LED_Set>
			Board_LED_Set(LED3, true);
1a0014e4:	2101      	movs	r1, #1
1a0014e6:	2005      	movs	r0, #5
1a0014e8:	f7ff f914 	bl	1a000714 <Board_LED_Set>
			break;
1a0014ec:	e7e4      	b.n	1a0014b8 <hornoMicroondasIface_opSetModo+0x3e>

1a0014ee <hornoMicroondasIface_opCocinar>:

void hornoMicroondasIface_opCocinar(const HornoMicroondas* handle, const sc_integer Number){
1a0014ee:	b508      	push	{r3, lr}
	Board_LED_Set(LED1, true);
1a0014f0:	2101      	movs	r1, #1
1a0014f2:	2003      	movs	r0, #3
1a0014f4:	f7ff f90e 	bl	1a000714 <Board_LED_Set>
	Board_LED_Set(LED2, true);
1a0014f8:	2101      	movs	r1, #1
1a0014fa:	2004      	movs	r0, #4
1a0014fc:	f7ff f90a 	bl	1a000714 <Board_LED_Set>
	Board_LED_Set(LED3, true);
1a001500:	2101      	movs	r1, #1
1a001502:	2005      	movs	r0, #5
1a001504:	f7ff f906 	bl	1a000714 <Board_LED_Set>
}
1a001508:	bd08      	pop	{r3, pc}

1a00150a <hornoMicroondasIface_opIdle>:

void hornoMicroondasIface_opIdle(const HornoMicroondas* handle){
1a00150a:	b508      	push	{r3, lr}
	Board_LED_Set(LED1, false);
1a00150c:	2100      	movs	r1, #0
1a00150e:	2003      	movs	r0, #3
1a001510:	f7ff f900 	bl	1a000714 <Board_LED_Set>
	Board_LED_Set(LED2, false);
1a001514:	2100      	movs	r1, #0
1a001516:	2004      	movs	r0, #4
1a001518:	f7ff f8fc 	bl	1a000714 <Board_LED_Set>
	Board_LED_Set(LED3, false);
1a00151c:	2100      	movs	r1, #0
1a00151e:	2005      	movs	r0, #5
1a001520:	f7ff f8f8 	bl	1a000714 <Board_LED_Set>
}
1a001524:	bd08      	pop	{r3, pc}
1a001526:	Address 0x000000001a001526 is out of bounds.


1a001528 <hornoMicroondas_setTimer>:
 *  \time_ms The time in milli seconds
 *  \periodic Indicates the the time event must be raised periodically until
 *   the timer is unset
 */
void hornoMicroondas_setTimer( HornoMicroondas* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic )
{
1a001528:	b500      	push	{lr}
1a00152a:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a00152c:	9300      	str	r3, [sp, #0]
1a00152e:	4613      	mov	r3, r2
1a001530:	460a      	mov	r2, r1
1a001532:	2101      	movs	r1, #1
1a001534:	4802      	ldr	r0, [pc, #8]	; (1a001540 <hornoMicroondas_setTimer+0x18>)
1a001536:	f7ff ff22 	bl	1a00137e <SetNewTimerTick>
}
1a00153a:	b003      	add	sp, #12
1a00153c:	f85d fb04 	ldr.w	pc, [sp], #4
1a001540:	10000058 	.word	0x10000058

1a001544 <hornoMicroondas_unsetTimer>:
/*! This function will be called for each time event that is relevant for a
 *  state when a state will be left.
 *  \param evid An unique identifier of the event.
 */
void hornoMicroondas_unsetTimer( HornoMicroondas* handle, const sc_eventid evid )
{
1a001544:	b508      	push	{r3, lr}
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a001546:	460a      	mov	r2, r1
1a001548:	2101      	movs	r1, #1
1a00154a:	4802      	ldr	r0, [pc, #8]	; (1a001554 <hornoMicroondas_unsetTimer+0x10>)
1a00154c:	f7ff ff30 	bl	1a0013b0 <UnsetTimerTick>
}
1a001550:	bd08      	pop	{r3, pc}
1a001552:	bf00      	nop
1a001554:	10000058 	.word	0x10000058

1a001558 <SysTick_Handler>:
/**
 * @brief	Hook on Handle interrupt from SysTick timer
 * @return	Nothing
 */
void SysTick_Handler(void){
	SysTick_Time_Flag = true;
1a001558:	4b01      	ldr	r3, [pc, #4]	; (1a001560 <SysTick_Handler+0x8>)
1a00155a:	2201      	movs	r2, #1
1a00155c:	701a      	strb	r2, [r3, #0]
}
1a00155e:	4770      	bx	lr
1a001560:	10000040 	.word	0x10000040

1a001564 <Buttons_GetStatus_>:

/*! This function scan all EDU-CIAA-NXP buttons (TEC1, TEC2, TEC3 and TEC4),
 *  and return ID of pressed button (TEC1 or TEC2 or TEC3 or TEC4)
 *  or false if no button was pressed.
 */
uint32_t Buttons_GetStatus_(void) {
1a001564:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = false;
	uint32_t idx;

	for (idx = 0; idx < 4; ++idx) {
1a001566:	2400      	movs	r4, #0
	uint8_t ret = false;
1a001568:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a00156a:	e000      	b.n	1a00156e <Buttons_GetStatus_+0xa>
1a00156c:	3401      	adds	r4, #1
1a00156e:	2c03      	cmp	r4, #3
1a001570:	d809      	bhi.n	1a001586 <Buttons_GetStatus_+0x22>
		if (Board_TEC_GetStatus( idx ) == 0)
1a001572:	b2e0      	uxtb	r0, r4
1a001574:	f7ff f8f8 	bl	1a000768 <Board_TEC_GetStatus>
1a001578:	2800      	cmp	r0, #0
1a00157a:	d1f7      	bne.n	1a00156c <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a00157c:	2301      	movs	r3, #1
1a00157e:	40a3      	lsls	r3, r4
1a001580:	431d      	orrs	r5, r3
1a001582:	b2ed      	uxtb	r5, r5
1a001584:	e7f2      	b.n	1a00156c <Buttons_GetStatus_+0x8>
	}
	return ret;
}
1a001586:	4628      	mov	r0, r5
1a001588:	bd38      	pop	{r3, r4, r5, pc}
1a00158a:	Address 0x000000001a00158a is out of bounds.


1a00158c <main>:
/**
 * @brief	main routine for statechart example: EDU-CIAA-NXP - HornoMicroondas LED3
 * @return	Function should not exit.
 */
int main(void)
{
1a00158c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	uint32_t BUTTON_Status;

	/* Generic Initialization */
	Board_Init();
1a00158e:	f7ff f8d3 	bl	1a000738 <Board_Init>

	/* Init Ticks counter => TICKRATE_MS */
	SysTick_Config(SystemCoreClock / TICKRATE_MS);
1a001592:	4b32      	ldr	r3, [pc, #200]	; (1a00165c <main+0xd0>)
1a001594:	681b      	ldr	r3, [r3, #0]
1a001596:	4a32      	ldr	r2, [pc, #200]	; (1a001660 <main+0xd4>)
1a001598:	fba2 2303 	umull	r2, r3, r2, r3
1a00159c:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a00159e:	3b01      	subs	r3, #1
1a0015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a0015a4:	d209      	bcs.n	1a0015ba <main+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0015a6:	4a2f      	ldr	r2, [pc, #188]	; (1a001664 <main+0xd8>)
1a0015a8:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0015aa:	4b2f      	ldr	r3, [pc, #188]	; (1a001668 <main+0xdc>)
1a0015ac:	21e0      	movs	r1, #224	; 0xe0
1a0015ae:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0015b2:	2300      	movs	r3, #0
1a0015b4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0015b6:	2307      	movs	r3, #7
1a0015b8:	6013      	str	r3, [r2, #0]

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a0015ba:	2101      	movs	r1, #1
1a0015bc:	482b      	ldr	r0, [pc, #172]	; (1a00166c <main+0xe0>)
1a0015be:	f7ff fecd 	bl	1a00135c <InitTimerTicks>

	/* Statechart Initialization */
	hornoMicroondas_init( &statechart );
1a0015c2:	4c2b      	ldr	r4, [pc, #172]	; (1a001670 <main+0xe4>)
1a0015c4:	4620      	mov	r0, r4
1a0015c6:	f7fe ff88 	bl	1a0004da <hornoMicroondas_init>
	hornoMicroondas_enter( &statechart );
1a0015ca:	4620      	mov	r0, r4
1a0015cc:	f7fe ff92 	bl	1a0004f4 <hornoMicroondas_enter>
1a0015d0:	e027      	b.n	1a001622 <main+0x96>

			/* Then Scan all Timer Ticks */
			for (i = 0; i < NOF_TIMERS; i++) {

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a0015d2:	4826      	ldr	r0, [pc, #152]	; (1a00166c <main+0xe0>)
1a0015d4:	0123      	lsls	r3, r4, #4
1a0015d6:	58c2      	ldr	r2, [r0, r3]
1a0015d8:	2101      	movs	r1, #1
1a0015da:	f7ff ff03 	bl	1a0013e4 <IsPendEvent>
1a0015de:	b908      	cbnz	r0, 1a0015e4 <main+0x58>
			for (i = 0; i < NOF_TIMERS; i++) {
1a0015e0:	3401      	adds	r4, #1
1a0015e2:	e02a      	b.n	1a00163a <main+0xae>

					/* Then Raise an Event -> Ticks.evid => OK */
					hornoMicroondas_raiseTimeEvent( &statechart, ticks[i].evid );
1a0015e4:	4d21      	ldr	r5, [pc, #132]	; (1a00166c <main+0xe0>)
1a0015e6:	0126      	lsls	r6, r4, #4
1a0015e8:	59a9      	ldr	r1, [r5, r6]
1a0015ea:	4821      	ldr	r0, [pc, #132]	; (1a001670 <main+0xe4>)
1a0015ec:	f7fe ffc2 	bl	1a000574 <hornoMicroondas_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a0015f0:	59aa      	ldr	r2, [r5, r6]
1a0015f2:	2101      	movs	r1, #1
1a0015f4:	4628      	mov	r0, r5
1a0015f6:	f7ff ff0c 	bl	1a001412 <MarkAsAttEvent>
1a0015fa:	e7f1      	b.n	1a0015e0 <main+0x54>

			/* Then if there are a pressed button */
			if (BUTTON_Status != 0){
				if(BUTTON_Status & 1){
					hornoMicroondasIface_raise_evModo(&statechart);
				} else if( BUTTON_Status & 2){
1a0015fc:	f010 0f02 	tst.w	r0, #2
1a001600:	d109      	bne.n	1a001616 <main+0x8a>
					hornoMicroondasIface_raise_evIniciar(&statechart);
				}else if( BUTTON_Status & 3){
1a001602:	f010 0f03 	tst.w	r0, #3
1a001606:	d125      	bne.n	1a001654 <main+0xc8>
					hornoMicroondasIface_raise_evParar(&statechart);
				}else if( BUTTON_Status & 4){
1a001608:	f010 0f04 	tst.w	r0, #4
1a00160c:	d006      	beq.n	1a00161c <main+0x90>
					hornoMicroondasIface_raise_evPuertaAbierta(&statechart);
1a00160e:	4818      	ldr	r0, [pc, #96]	; (1a001670 <main+0xe4>)
1a001610:	f7fe ffc2 	bl	1a000598 <hornoMicroondasIface_raise_evPuertaAbierta>
1a001614:	e002      	b.n	1a00161c <main+0x90>
					hornoMicroondasIface_raise_evIniciar(&statechart);
1a001616:	4816      	ldr	r0, [pc, #88]	; (1a001670 <main+0xe4>)
1a001618:	f7fe ffb8 	bl	1a00058c <hornoMicroondasIface_raise_evIniciar>

			}


			/* Then Run an Cycle of Statechart */
			hornoMicroondas_runCycle(&statechart);		// Run Cycle of Statechart
1a00161c:	4814      	ldr	r0, [pc, #80]	; (1a001670 <main+0xe4>)
1a00161e:	f7fe ff71 	bl	1a000504 <hornoMicroondas_runCycle>
		__WFI();
1a001622:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a001624:	4b13      	ldr	r3, [pc, #76]	; (1a001674 <main+0xe8>)
1a001626:	781b      	ldrb	r3, [r3, #0]
1a001628:	2b00      	cmp	r3, #0
1a00162a:	d0fa      	beq.n	1a001622 <main+0x96>
			SysTick_Time_Flag = false;
1a00162c:	2400      	movs	r4, #0
1a00162e:	4b11      	ldr	r3, [pc, #68]	; (1a001674 <main+0xe8>)
1a001630:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a001632:	2101      	movs	r1, #1
1a001634:	480d      	ldr	r0, [pc, #52]	; (1a00166c <main+0xe0>)
1a001636:	f7ff fefe 	bl	1a001436 <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a00163a:	2c00      	cmp	r4, #0
1a00163c:	d0c9      	beq.n	1a0015d2 <main+0x46>
			BUTTON_Status = Buttons_GetStatus_();
1a00163e:	f7ff ff91 	bl	1a001564 <Buttons_GetStatus_>
			if (BUTTON_Status != 0){
1a001642:	2800      	cmp	r0, #0
1a001644:	d0ea      	beq.n	1a00161c <main+0x90>
				if(BUTTON_Status & 1){
1a001646:	f010 0f01 	tst.w	r0, #1
1a00164a:	d0d7      	beq.n	1a0015fc <main+0x70>
					hornoMicroondasIface_raise_evModo(&statechart);
1a00164c:	4808      	ldr	r0, [pc, #32]	; (1a001670 <main+0xe4>)
1a00164e:	f7fe ff9a 	bl	1a000586 <hornoMicroondasIface_raise_evModo>
1a001652:	e7e3      	b.n	1a00161c <main+0x90>
					hornoMicroondasIface_raise_evParar(&statechart);
1a001654:	4806      	ldr	r0, [pc, #24]	; (1a001670 <main+0xe4>)
1a001656:	f7fe ff9c 	bl	1a000592 <hornoMicroondasIface_raise_evParar>
1a00165a:	e7df      	b.n	1a00161c <main+0x90>
1a00165c:	10000054 	.word	0x10000054
1a001660:	10624dd3 	.word	0x10624dd3
1a001664:	e000e010 	.word	0xe000e010
1a001668:	e000ed00 	.word	0xe000ed00
1a00166c:	10000058 	.word	0x10000058
1a001670:	10000044 	.word	0x10000044
1a001674:	10000040 	.word	0x10000040

1a001678 <__aeabi_uldivmod>:
1a001678:	b953      	cbnz	r3, 1a001690 <__aeabi_uldivmod+0x18>
1a00167a:	b94a      	cbnz	r2, 1a001690 <__aeabi_uldivmod+0x18>
1a00167c:	2900      	cmp	r1, #0
1a00167e:	bf08      	it	eq
1a001680:	2800      	cmpeq	r0, #0
1a001682:	bf1c      	itt	ne
1a001684:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001688:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00168c:	f000 b974 	b.w	1a001978 <__aeabi_idiv0>
1a001690:	f1ad 0c08 	sub.w	ip, sp, #8
1a001694:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001698:	f000 f806 	bl	1a0016a8 <__udivmoddi4>
1a00169c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0016a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0016a4:	b004      	add	sp, #16
1a0016a6:	4770      	bx	lr

1a0016a8 <__udivmoddi4>:
1a0016a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0016ac:	9e08      	ldr	r6, [sp, #32]
1a0016ae:	4604      	mov	r4, r0
1a0016b0:	4688      	mov	r8, r1
1a0016b2:	2b00      	cmp	r3, #0
1a0016b4:	f040 8085 	bne.w	1a0017c2 <__udivmoddi4+0x11a>
1a0016b8:	428a      	cmp	r2, r1
1a0016ba:	4615      	mov	r5, r2
1a0016bc:	d948      	bls.n	1a001750 <__udivmoddi4+0xa8>
1a0016be:	fab2 f282 	clz	r2, r2
1a0016c2:	b14a      	cbz	r2, 1a0016d8 <__udivmoddi4+0x30>
1a0016c4:	f1c2 0720 	rsb	r7, r2, #32
1a0016c8:	fa01 f302 	lsl.w	r3, r1, r2
1a0016cc:	fa20 f707 	lsr.w	r7, r0, r7
1a0016d0:	4095      	lsls	r5, r2
1a0016d2:	ea47 0803 	orr.w	r8, r7, r3
1a0016d6:	4094      	lsls	r4, r2
1a0016d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0016dc:	0c23      	lsrs	r3, r4, #16
1a0016de:	fbb8 f7fe 	udiv	r7, r8, lr
1a0016e2:	fa1f fc85 	uxth.w	ip, r5
1a0016e6:	fb0e 8817 	mls	r8, lr, r7, r8
1a0016ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0016ee:	fb07 f10c 	mul.w	r1, r7, ip
1a0016f2:	4299      	cmp	r1, r3
1a0016f4:	d909      	bls.n	1a00170a <__udivmoddi4+0x62>
1a0016f6:	18eb      	adds	r3, r5, r3
1a0016f8:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0016fc:	f080 80e3 	bcs.w	1a0018c6 <__udivmoddi4+0x21e>
1a001700:	4299      	cmp	r1, r3
1a001702:	f240 80e0 	bls.w	1a0018c6 <__udivmoddi4+0x21e>
1a001706:	3f02      	subs	r7, #2
1a001708:	442b      	add	r3, r5
1a00170a:	1a5b      	subs	r3, r3, r1
1a00170c:	b2a4      	uxth	r4, r4
1a00170e:	fbb3 f0fe 	udiv	r0, r3, lr
1a001712:	fb0e 3310 	mls	r3, lr, r0, r3
1a001716:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00171a:	fb00 fc0c 	mul.w	ip, r0, ip
1a00171e:	45a4      	cmp	ip, r4
1a001720:	d909      	bls.n	1a001736 <__udivmoddi4+0x8e>
1a001722:	192c      	adds	r4, r5, r4
1a001724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001728:	f080 80cb 	bcs.w	1a0018c2 <__udivmoddi4+0x21a>
1a00172c:	45a4      	cmp	ip, r4
1a00172e:	f240 80c8 	bls.w	1a0018c2 <__udivmoddi4+0x21a>
1a001732:	3802      	subs	r0, #2
1a001734:	442c      	add	r4, r5
1a001736:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00173a:	eba4 040c 	sub.w	r4, r4, ip
1a00173e:	2700      	movs	r7, #0
1a001740:	b11e      	cbz	r6, 1a00174a <__udivmoddi4+0xa2>
1a001742:	40d4      	lsrs	r4, r2
1a001744:	2300      	movs	r3, #0
1a001746:	e9c6 4300 	strd	r4, r3, [r6]
1a00174a:	4639      	mov	r1, r7
1a00174c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001750:	2a00      	cmp	r2, #0
1a001752:	d053      	beq.n	1a0017fc <__udivmoddi4+0x154>
1a001754:	fab2 f282 	clz	r2, r2
1a001758:	2a00      	cmp	r2, #0
1a00175a:	f040 80b6 	bne.w	1a0018ca <__udivmoddi4+0x222>
1a00175e:	1b49      	subs	r1, r1, r5
1a001760:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001764:	fa1f f885 	uxth.w	r8, r5
1a001768:	2701      	movs	r7, #1
1a00176a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00176e:	0c23      	lsrs	r3, r4, #16
1a001770:	fb0e 111c 	mls	r1, lr, ip, r1
1a001774:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001778:	fb08 f10c 	mul.w	r1, r8, ip
1a00177c:	4299      	cmp	r1, r3
1a00177e:	d907      	bls.n	1a001790 <__udivmoddi4+0xe8>
1a001780:	18eb      	adds	r3, r5, r3
1a001782:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001786:	d202      	bcs.n	1a00178e <__udivmoddi4+0xe6>
1a001788:	4299      	cmp	r1, r3
1a00178a:	f200 80ec 	bhi.w	1a001966 <__udivmoddi4+0x2be>
1a00178e:	4684      	mov	ip, r0
1a001790:	1a59      	subs	r1, r3, r1
1a001792:	b2a3      	uxth	r3, r4
1a001794:	fbb1 f0fe 	udiv	r0, r1, lr
1a001798:	fb0e 1410 	mls	r4, lr, r0, r1
1a00179c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0017a0:	fb08 f800 	mul.w	r8, r8, r0
1a0017a4:	45a0      	cmp	r8, r4
1a0017a6:	d907      	bls.n	1a0017b8 <__udivmoddi4+0x110>
1a0017a8:	192c      	adds	r4, r5, r4
1a0017aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0017ae:	d202      	bcs.n	1a0017b6 <__udivmoddi4+0x10e>
1a0017b0:	45a0      	cmp	r8, r4
1a0017b2:	f200 80dc 	bhi.w	1a00196e <__udivmoddi4+0x2c6>
1a0017b6:	4618      	mov	r0, r3
1a0017b8:	eba4 0408 	sub.w	r4, r4, r8
1a0017bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0017c0:	e7be      	b.n	1a001740 <__udivmoddi4+0x98>
1a0017c2:	428b      	cmp	r3, r1
1a0017c4:	d908      	bls.n	1a0017d8 <__udivmoddi4+0x130>
1a0017c6:	2e00      	cmp	r6, #0
1a0017c8:	d078      	beq.n	1a0018bc <__udivmoddi4+0x214>
1a0017ca:	2700      	movs	r7, #0
1a0017cc:	e9c6 0100 	strd	r0, r1, [r6]
1a0017d0:	4638      	mov	r0, r7
1a0017d2:	4639      	mov	r1, r7
1a0017d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017d8:	fab3 f783 	clz	r7, r3
1a0017dc:	b97f      	cbnz	r7, 1a0017fe <__udivmoddi4+0x156>
1a0017de:	428b      	cmp	r3, r1
1a0017e0:	d302      	bcc.n	1a0017e8 <__udivmoddi4+0x140>
1a0017e2:	4282      	cmp	r2, r0
1a0017e4:	f200 80bd 	bhi.w	1a001962 <__udivmoddi4+0x2ba>
1a0017e8:	1a84      	subs	r4, r0, r2
1a0017ea:	eb61 0303 	sbc.w	r3, r1, r3
1a0017ee:	2001      	movs	r0, #1
1a0017f0:	4698      	mov	r8, r3
1a0017f2:	2e00      	cmp	r6, #0
1a0017f4:	d0a9      	beq.n	1a00174a <__udivmoddi4+0xa2>
1a0017f6:	e9c6 4800 	strd	r4, r8, [r6]
1a0017fa:	e7a6      	b.n	1a00174a <__udivmoddi4+0xa2>
1a0017fc:	deff      	udf	#255	; 0xff
1a0017fe:	f1c7 0520 	rsb	r5, r7, #32
1a001802:	40bb      	lsls	r3, r7
1a001804:	fa22 fc05 	lsr.w	ip, r2, r5
1a001808:	ea4c 0c03 	orr.w	ip, ip, r3
1a00180c:	fa01 f407 	lsl.w	r4, r1, r7
1a001810:	fa20 f805 	lsr.w	r8, r0, r5
1a001814:	fa21 f305 	lsr.w	r3, r1, r5
1a001818:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a00181c:	ea48 0404 	orr.w	r4, r8, r4
1a001820:	fbb3 f9fe 	udiv	r9, r3, lr
1a001824:	0c21      	lsrs	r1, r4, #16
1a001826:	fb0e 3319 	mls	r3, lr, r9, r3
1a00182a:	fa1f f88c 	uxth.w	r8, ip
1a00182e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001832:	fb09 fa08 	mul.w	sl, r9, r8
1a001836:	459a      	cmp	sl, r3
1a001838:	fa02 f207 	lsl.w	r2, r2, r7
1a00183c:	fa00 f107 	lsl.w	r1, r0, r7
1a001840:	d90b      	bls.n	1a00185a <__udivmoddi4+0x1b2>
1a001842:	eb1c 0303 	adds.w	r3, ip, r3
1a001846:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00184a:	f080 8088 	bcs.w	1a00195e <__udivmoddi4+0x2b6>
1a00184e:	459a      	cmp	sl, r3
1a001850:	f240 8085 	bls.w	1a00195e <__udivmoddi4+0x2b6>
1a001854:	f1a9 0902 	sub.w	r9, r9, #2
1a001858:	4463      	add	r3, ip
1a00185a:	eba3 030a 	sub.w	r3, r3, sl
1a00185e:	b2a4      	uxth	r4, r4
1a001860:	fbb3 f0fe 	udiv	r0, r3, lr
1a001864:	fb0e 3310 	mls	r3, lr, r0, r3
1a001868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00186c:	fb00 f808 	mul.w	r8, r0, r8
1a001870:	45a0      	cmp	r8, r4
1a001872:	d908      	bls.n	1a001886 <__udivmoddi4+0x1de>
1a001874:	eb1c 0404 	adds.w	r4, ip, r4
1a001878:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00187c:	d26b      	bcs.n	1a001956 <__udivmoddi4+0x2ae>
1a00187e:	45a0      	cmp	r8, r4
1a001880:	d969      	bls.n	1a001956 <__udivmoddi4+0x2ae>
1a001882:	3802      	subs	r0, #2
1a001884:	4464      	add	r4, ip
1a001886:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00188a:	eba4 0408 	sub.w	r4, r4, r8
1a00188e:	fba0 8902 	umull	r8, r9, r0, r2
1a001892:	454c      	cmp	r4, r9
1a001894:	46c6      	mov	lr, r8
1a001896:	464b      	mov	r3, r9
1a001898:	d354      	bcc.n	1a001944 <__udivmoddi4+0x29c>
1a00189a:	d051      	beq.n	1a001940 <__udivmoddi4+0x298>
1a00189c:	2e00      	cmp	r6, #0
1a00189e:	d069      	beq.n	1a001974 <__udivmoddi4+0x2cc>
1a0018a0:	ebb1 020e 	subs.w	r2, r1, lr
1a0018a4:	eb64 0403 	sbc.w	r4, r4, r3
1a0018a8:	fa04 f505 	lsl.w	r5, r4, r5
1a0018ac:	fa22 f307 	lsr.w	r3, r2, r7
1a0018b0:	40fc      	lsrs	r4, r7
1a0018b2:	431d      	orrs	r5, r3
1a0018b4:	e9c6 5400 	strd	r5, r4, [r6]
1a0018b8:	2700      	movs	r7, #0
1a0018ba:	e746      	b.n	1a00174a <__udivmoddi4+0xa2>
1a0018bc:	4637      	mov	r7, r6
1a0018be:	4630      	mov	r0, r6
1a0018c0:	e743      	b.n	1a00174a <__udivmoddi4+0xa2>
1a0018c2:	4618      	mov	r0, r3
1a0018c4:	e737      	b.n	1a001736 <__udivmoddi4+0x8e>
1a0018c6:	4607      	mov	r7, r0
1a0018c8:	e71f      	b.n	1a00170a <__udivmoddi4+0x62>
1a0018ca:	f1c2 0320 	rsb	r3, r2, #32
1a0018ce:	fa20 f703 	lsr.w	r7, r0, r3
1a0018d2:	4095      	lsls	r5, r2
1a0018d4:	fa01 f002 	lsl.w	r0, r1, r2
1a0018d8:	fa21 f303 	lsr.w	r3, r1, r3
1a0018dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0018e0:	4338      	orrs	r0, r7
1a0018e2:	0c01      	lsrs	r1, r0, #16
1a0018e4:	fbb3 f7fe 	udiv	r7, r3, lr
1a0018e8:	fa1f f885 	uxth.w	r8, r5
1a0018ec:	fb0e 3317 	mls	r3, lr, r7, r3
1a0018f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0018f4:	fb07 f308 	mul.w	r3, r7, r8
1a0018f8:	428b      	cmp	r3, r1
1a0018fa:	fa04 f402 	lsl.w	r4, r4, r2
1a0018fe:	d907      	bls.n	1a001910 <__udivmoddi4+0x268>
1a001900:	1869      	adds	r1, r5, r1
1a001902:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001906:	d228      	bcs.n	1a00195a <__udivmoddi4+0x2b2>
1a001908:	428b      	cmp	r3, r1
1a00190a:	d926      	bls.n	1a00195a <__udivmoddi4+0x2b2>
1a00190c:	3f02      	subs	r7, #2
1a00190e:	4429      	add	r1, r5
1a001910:	1acb      	subs	r3, r1, r3
1a001912:	b281      	uxth	r1, r0
1a001914:	fbb3 f0fe 	udiv	r0, r3, lr
1a001918:	fb0e 3310 	mls	r3, lr, r0, r3
1a00191c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001920:	fb00 f308 	mul.w	r3, r0, r8
1a001924:	428b      	cmp	r3, r1
1a001926:	d907      	bls.n	1a001938 <__udivmoddi4+0x290>
1a001928:	1869      	adds	r1, r5, r1
1a00192a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00192e:	d210      	bcs.n	1a001952 <__udivmoddi4+0x2aa>
1a001930:	428b      	cmp	r3, r1
1a001932:	d90e      	bls.n	1a001952 <__udivmoddi4+0x2aa>
1a001934:	3802      	subs	r0, #2
1a001936:	4429      	add	r1, r5
1a001938:	1ac9      	subs	r1, r1, r3
1a00193a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00193e:	e714      	b.n	1a00176a <__udivmoddi4+0xc2>
1a001940:	4541      	cmp	r1, r8
1a001942:	d2ab      	bcs.n	1a00189c <__udivmoddi4+0x1f4>
1a001944:	ebb8 0e02 	subs.w	lr, r8, r2
1a001948:	eb69 020c 	sbc.w	r2, r9, ip
1a00194c:	3801      	subs	r0, #1
1a00194e:	4613      	mov	r3, r2
1a001950:	e7a4      	b.n	1a00189c <__udivmoddi4+0x1f4>
1a001952:	4660      	mov	r0, ip
1a001954:	e7f0      	b.n	1a001938 <__udivmoddi4+0x290>
1a001956:	4618      	mov	r0, r3
1a001958:	e795      	b.n	1a001886 <__udivmoddi4+0x1de>
1a00195a:	4667      	mov	r7, ip
1a00195c:	e7d8      	b.n	1a001910 <__udivmoddi4+0x268>
1a00195e:	4681      	mov	r9, r0
1a001960:	e77b      	b.n	1a00185a <__udivmoddi4+0x1b2>
1a001962:	4638      	mov	r0, r7
1a001964:	e745      	b.n	1a0017f2 <__udivmoddi4+0x14a>
1a001966:	f1ac 0c02 	sub.w	ip, ip, #2
1a00196a:	442b      	add	r3, r5
1a00196c:	e710      	b.n	1a001790 <__udivmoddi4+0xe8>
1a00196e:	3802      	subs	r0, #2
1a001970:	442c      	add	r4, r5
1a001972:	e721      	b.n	1a0017b8 <__udivmoddi4+0x110>
1a001974:	4637      	mov	r7, r6
1a001976:	e6e8      	b.n	1a00174a <__udivmoddi4+0xa2>

1a001978 <__aeabi_idiv0>:
1a001978:	4770      	bx	lr
1a00197a:	bf00      	nop

1a00197c <__libc_init_array>:
1a00197c:	b570      	push	{r4, r5, r6, lr}
1a00197e:	4d0d      	ldr	r5, [pc, #52]	; (1a0019b4 <__libc_init_array+0x38>)
1a001980:	4c0d      	ldr	r4, [pc, #52]	; (1a0019b8 <__libc_init_array+0x3c>)
1a001982:	1b64      	subs	r4, r4, r5
1a001984:	10a4      	asrs	r4, r4, #2
1a001986:	2600      	movs	r6, #0
1a001988:	42a6      	cmp	r6, r4
1a00198a:	d109      	bne.n	1a0019a0 <__libc_init_array+0x24>
1a00198c:	4d0b      	ldr	r5, [pc, #44]	; (1a0019bc <__libc_init_array+0x40>)
1a00198e:	4c0c      	ldr	r4, [pc, #48]	; (1a0019c0 <__libc_init_array+0x44>)
1a001990:	f7ff fce3 	bl	1a00135a <_init>
1a001994:	1b64      	subs	r4, r4, r5
1a001996:	10a4      	asrs	r4, r4, #2
1a001998:	2600      	movs	r6, #0
1a00199a:	42a6      	cmp	r6, r4
1a00199c:	d105      	bne.n	1a0019aa <__libc_init_array+0x2e>
1a00199e:	bd70      	pop	{r4, r5, r6, pc}
1a0019a0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0019a4:	4798      	blx	r3
1a0019a6:	3601      	adds	r6, #1
1a0019a8:	e7ee      	b.n	1a001988 <__libc_init_array+0xc>
1a0019aa:	f855 3b04 	ldr.w	r3, [r5], #4
1a0019ae:	4798      	blx	r3
1a0019b0:	3601      	adds	r6, #1
1a0019b2:	e7f2      	b.n	1a00199a <__libc_init_array+0x1e>
1a0019b4:	1a001b4c 	.word	0x1a001b4c
1a0019b8:	1a001b4c 	.word	0x1a001b4c
1a0019bc:	1a001b4c 	.word	0x1a001b4c
1a0019c0:	1a001b4c 	.word	0x1a001b4c

1a0019c4 <memset>:
1a0019c4:	4402      	add	r2, r0
1a0019c6:	4603      	mov	r3, r0
1a0019c8:	4293      	cmp	r3, r2
1a0019ca:	d100      	bne.n	1a0019ce <memset+0xa>
1a0019cc:	4770      	bx	lr
1a0019ce:	f803 1b01 	strb.w	r1, [r3], #1
1a0019d2:	e7f9      	b.n	1a0019c8 <memset+0x4>

1a0019d4 <ExtRateIn>:
1a0019d4:	0000 0000                                   ....

1a0019d8 <GpioButtons>:
1a0019d8:	0400 0800 0900 0901                         ........

1a0019e0 <GpioLeds>:
1a0019e0:	0005 0105 0205 0e00 0b01 0c01               ............

1a0019ec <GpioPorts>:
1a0019ec:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0019fc:	0802 ffff                                   ....

1a001a00 <OscRateIn>:
1a001a00:	1b00 00b7                                   ....

1a001a04 <InitClkStates>:
1a001a04:	0f01 0101                                   ....

1a001a08 <pinmuxing>:
1a001a08:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001a18:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001a28:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001a38:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001a48:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001a58:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001a68:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001a78:	0206 0057                                   ..W.

1a001a7c <UART_BClock>:
1a001a7c:	01c2 01a2 0182 0162                         ......b.

1a001a84 <UART_PClock>:
1a001a84:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a001a94:	00ff 0000                                   ....

1a001a98 <periph_to_base>:
1a001a98:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001aa8:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001ab8:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001ac8:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001ad8:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001ae8:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001af8:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001b04 <InitClkStates>:
1a001b04:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001b14:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001b24:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001b34:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001b44:	111a 0001 111b 0001                         ........
