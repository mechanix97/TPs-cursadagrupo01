
TP1/OrdenadorMoto/out/OrdenadorMoto.elf:     file format elf32-littlearm
TP1/OrdenadorMoto/out/OrdenadorMoto.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0014e9

Program Header:
0x70000001 off    0x00011d78 vaddr 0x1a001d78 paddr 0x1a001d78 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010038 vaddr 0x10000038 paddr 0x10000038 align 2**16
         filesz 0x00000000 memsz 0x00000034 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001d80 memsz 0x00001d80 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001d80 align 2**16
         filesz 0x00000038 memsz 0x00000038 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d78  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  10000000  1a001d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020038  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
  6 .bss          00000034  10000038  10000038  00010038  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020038  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020038  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001d78  1a001d78  00011d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020038  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020038  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020038  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020038  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020038  2**2
                  CONTENTS
 17 .noinit       00000000  1000006c  1000006c  00020038  2**2
                  CONTENTS
 18 .debug_info   000111ce  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002bb1  00000000  00000000  00031206  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00007092  00000000  00000000  00033db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000978  00000000  00000000  0003ae49  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000009a8  00000000  00000000  0003b7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000821c  00000000  00000000  0003c169  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000aea4  00000000  00000000  00044385  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001e6f5  00000000  00000000  0004f229  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  0006d91e  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000034  00000000  00000000  0006d986  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000181c  00000000  00000000  0006d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000038 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001d78 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000006c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 OrdenadorMoto.c
1a000300 l     F .text	0000000c clearInEvents
1a00030c l     F .text	0000000a enseq_Debouncer_NO_OPRIMIDO_default
1a000316 l     F .text	0000000a enseq_Debouncer_VALIDACION_default
1a000320 l     F .text	00000008 exseq_main_region_Pantalla0
1a000328 l     F .text	00000008 exseq_main_region_Pantalla1
1a000330 l     F .text	00000008 exseq_main_region_Pantalla2
1a000338 l     F .text	00000008 exseq_main_region_Pantalla3
1a000340 l     F .text	00000008 exseq_main_region_Pantalla4
1a000348 l     F .text	00000008 exseq_main_region_Pantalla5
1a000350 l     F .text	00000008 exseq_main_region_Pantalla6
1a000358 l     F .text	00000008 exseq_main_region_Pantalla7
1a000360 l     F .text	0000000a exseq_Debouncer_NO_OPRIMIDO
1a00036a l     F .text	0000000a exseq_Debouncer_OPRIMIDO
1a000374 l     F .text	0000000a exseq_Debouncer_VALIDACION
1a00037e l     F .text	00000008 react_Debouncer__entry_Default
1a000386 l     F .text	00000008 enseq_Debouncer_default
1a00038e l     F .text	00000004 react
1a000392 l     F .text	0000001e Debouncer_OPRIMIDO_react
1a0003b0 l     F .text	0000000a enact_main_region_Pantalla0
1a0003ba l     F .text	00000012 enseq_main_region_Pantalla0_default
1a0003cc l     F .text	00000008 react_main_region__entry_Default
1a0003d4 l     F .text	00000008 enseq_main_region_default
1a0003dc l     F .text	00000026 main_region_Pantalla7_react
1a000402 l     F .text	0000000a enact_main_region_Pantalla1
1a00040c l     F .text	00000012 enseq_main_region_Pantalla1_default
1a00041e l     F .text	00000026 main_region_Pantalla0_react
1a000444 l     F .text	0000000a enact_main_region_Pantalla2
1a00044e l     F .text	00000012 enseq_main_region_Pantalla2_default
1a000460 l     F .text	00000026 main_region_Pantalla1_react
1a000486 l     F .text	0000000a enact_main_region_Pantalla3
1a000490 l     F .text	00000012 enseq_main_region_Pantalla3_default
1a0004a2 l     F .text	00000026 main_region_Pantalla2_react
1a0004c8 l     F .text	0000000a enact_main_region_Pantalla4
1a0004d2 l     F .text	00000012 enseq_main_region_Pantalla4_default
1a0004e4 l     F .text	00000026 main_region_Pantalla3_react
1a00050a l     F .text	0000000a enact_main_region_Pantalla5
1a000514 l     F .text	00000012 enseq_main_region_Pantalla5_default
1a000526 l     F .text	00000026 main_region_Pantalla4_react
1a00054c l     F .text	0000000a enact_main_region_Pantalla6
1a000556 l     F .text	00000012 enseq_main_region_Pantalla6_default
1a000568 l     F .text	00000026 main_region_Pantalla5_react
1a00058e l     F .text	0000000a enact_main_region_Pantalla7
1a000598 l     F .text	00000012 enseq_main_region_Pantalla7_default
1a0005aa l     F .text	00000026 main_region_Pantalla6_react
1a0005d0 l     F .text	0000000c exact_Debouncer_DEBOUNCE
1a0005dc l     F .text	00000010 exseq_Debouncer_DEBOUNCE
1a0005ec l     F .text	0000001e Debouncer_DEBOUNCE_react
1a00060a l     F .text	00000010 enact_Debouncer_DEBOUNCE
1a00061a l     F .text	00000012 enseq_Debouncer_DEBOUNCE_default
1a00062c l     F .text	0000001e Debouncer_NO_OPRIMIDO_react
1a00064a l     F .text	00000008 enact_Debouncer_OPRIMIDO
1a000652 l     F .text	00000012 enseq_Debouncer_OPRIMIDO_default
1a000664 l     F .text	0000002e Debouncer_VALIDACION_react
00000000 l    df *ABS*	00000000 board.c
1a0007b8 l     F .text	00000044 Board_LED_Init
1a0007fc l     F .text	00000040 Board_TEC_Init
1a00083c l     F .text	00000040 Board_GPIO_Init
1a00087c l     F .text	00000030 Board_ADC_Init
1a0008ac l     F .text	00000038 Board_SPI_Init
1a0008e4 l     F .text	00000024 Board_I2C_Init
1a001c04 l     O .text	00000008 GpioButtons
1a001c0c l     O .text	0000000c GpioLeds
1a001c18 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001c30 l     O .text	00000004 InitClkStates
1a001c34 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000a5c l     F .text	0000002c Chip_UART_GetIndex
1a001ca8 l     O .text	00000008 UART_BClock
1a001cb0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000bb8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000bcc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000c80 l     F .text	000000a0 pll_calc_divs
1a000d20 l     F .text	0000010c pll_get_frac
1a000e2c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0010a0 l     F .text	00000022 Chip_Clock_GetDivRate
10000038 l     O .bss	00000008 audio_usb_pll_freq
1a001cc4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001d30 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0013f8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00140c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 OrdenadorMotoRequired.c
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 main.c
10000044 l     O .bss	00000014 statechart
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a001d78 l       .bss_RAM5	00000000 __init_array_end
1a001d78 l       .bss_RAM5	00000000 __preinit_array_end
1a001d78 l       .bss_RAM5	00000000 __init_array_start
1a001d78 l       .bss_RAM5	00000000 __preinit_array_start
1a000ec4 g     F .text	0000001c Chip_Clock_GetDividerSource
10000040 g     O .bss	00000001 SysTick_Time_Flag
1a000178  w    F .text	00000002 TIMER2_IRQHandler
1a000186  w    F .text	00000002 DebugMon_Handler
1a000178  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000178  w    F .text	00000002 ADCHS_IRQHandler
1a001574 g     F .text	000000e2 ordenadorMotoIface_opCambiarPantalla
1a000114 g       .text	00000000 __section_table_start
1a000178  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000692 g     F .text	00000020 ordenadorMoto_init
1a000178  w    F .text	00000002 I2C0_IRQHandler
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000c72 g     F .text	0000000c Chip_ADC_SetResolution
1a0017a4 g     F .text	0000000c SysTick_Handler
1a0014e4  w    F .text	00000002 initialise_monitor_handles
1a000178  w    F .text	00000002 SDIO_IRQHandler
1a000178  w    F .text	00000002 ATIMER_IRQHandler
1a000188  w    F .text	00000002 PendSV_Handler
1a00017a  w    F .text	00000002 NMI_Handler
1a001d80 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000178  w    F .text	00000002 I2C1_IRQHandler
1a000178  w    F .text	00000002 UART1_IRQHandler
1a000178  w    F .text	00000002 GPIO5_IRQHandler
1a000178  w    F .text	00000002 CAN1_IRQHandler
53ff639c g       *ABS*	00000000 __valid_user_code_checksum
1a001d80 g       .ARM.exidx	00000000 _etext
1a000178  w    F .text	00000002 USB1_IRQHandler
1a000178  w    F .text	00000002 I2S0_IRQHandler
1a001730 g     F .text	00000044 UpdateTimers
1a000178  w    F .text	00000002 TIMER3_IRQHandler
1a001142 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a0016de g     F .text	0000002e IsPendEvent
1a000178  w    F .text	00000002 SGPIO_IRQHandler
1a00170c g     F .text	00000024 MarkAsAttEvent
1a0018a4 g     F .text	00000000 .hidden __aeabi_uldivmod
1000006c g       .noinit	00000000 _noinit
10000058 g     O .bss	00000004 SystemCoreClock
1a000a88 g     F .text	00000054 Chip_UART_Init
1a000178  w    F .text	00000002 ADC0_IRQHandler
1a000182  w    F .text	00000002 UsageFault_Handler
1a0011c0 g     F .text	0000004c Chip_Clock_GetRate
1a000178  w    F .text	00000002 GPIO6_IRQHandler
1a0009e4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0018d4 g     F .text	000002d0 .hidden __udivmoddi4
1a001c00 g     O .text	00000004 ExtRateIn
1a000178  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000178  w    F .text	00000002 GPIO1_IRQHandler
1a000798 g     F .text	00000012 ordenadorMoto_raiseTimeEvent
1a000178  w    F .text	00000002 SSP0_IRQHandler
1a001d78 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001ba8 g     F .text	00000048 __libc_init_array
1a000178  w    F .text	00000002 ADC1_IRQHandler
1a000950 g     F .text	00000030 Board_Init
1a001572  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000178  w    F .text	00000002 RTC_IRQHandler
1000006c g       .bss	00000000 _ebss
1a000178  w    F .text	00000002 TIMER0_IRQHandler
1a0014e8 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000178  w    F .text	00000002 SPI_IRQHandler
1a0013c0 g     F .text	00000038 Chip_I2C_SetClockRate
1a000178  w    F .text	00000002 LCD_IRQHandler
1a000e78 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a000178  w    F .text	00000002 TIMER1_IRQHandler
1a001774 g     F .text	0000001c ordenadorMoto_setTimer
1a00139c g     F .text	00000024 Chip_I2C_Init
1a001678 g     F .text	00000032 SetNewTimerTick
1a000178  w    F .text	00000002 UART2_IRQHandler
1a001034 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001424 g     F .text	00000012 Chip_SSP_SetClockRate
1a000178  w    F .text	00000002 GPIO2_IRQHandler
1a00111c g     F .text	00000026 Chip_Clock_GetBaseClock
10000038 g       .bss	00000000 _bss
1a000c40 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000178  w    F .text	00000002 I2S1_IRQHandler
1a001436 g     F .text	0000003e Chip_SSP_SetBitRate
1a001378 g     F .text	00000002 Chip_GPIO_Init
1a001c2c g     O .text	00000004 OscRateIn
1000006c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000178  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001ba4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a000178  w    F .text	00000002 USB0_IRQHandler
1a000178  w    F .text	00000002 GPIO3_IRQHandler
1a000178  w    F .text	00000002 SCT_IRQHandler
1a000ee0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001790 g     F .text	00000014 ordenadorMoto_unsetTimer
1a001bf0 g     F .text	00000010 memset
1a00017e  w    F .text	00000002 MemManage_Handler
1a0017d8 g     F .text	000000cc main
1a000178  w    F .text	00000002 WDT_IRQHandler
1a0016aa g     F .text	00000034 UnsetTimerTick
1a0007b0 g     F .text	00000006 ordenadorMotoIface_raise_evCambiarPantalla
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000184  w    F .text	00000002 SVC_Handler
1a0017d6 g     F .text	00000002 ordenadorMotoIface_opBoton
1a000178  w    F .text	00000002 GPIO7_IRQHandler
1a001150 g     F .text	0000003c Chip_Clock_EnableOpts
1a000efc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0006c4 g     F .text	000000d2 ordenadorMoto_runCycle
1a000fb4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0014ac g     F .text	00000038 SystemInit
1a000178  w    F .text	00000002 SPIFI_IRQHandler
1a000178  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001570  w    F .text	00000002 _fini
1a000c00 g     F .text	00000040 Chip_ADC_Init
1a0009ac g     F .text	00000038 Board_SetupMuxing
1a0017b0 g     F .text	00000026 Buttons_GetStatus_
1a000adc g     F .text	000000dc Chip_UART_SetBaudFDR
1a000178  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1000005c g     O .bss	00000010 ticks
1a000178  w    F .text	00000002 CAN0_IRQHandler
1a001656 g     F .text	00000022 InitTimerTicks
10000000 g       .data	00000000 _data
1a0006b2 g     F .text	00000010 ordenadorMoto_enter
1a000178 g       .text	00000000 __section_table_end
1a001474 g     F .text	00000038 Chip_SSP_Init
1a000178  w    F .text	00000002 GINT0_IRQHandler
1a000178  w    F .text	00000002 DAC_IRQHandler
1a000908 g     F .text	00000024 Board_Debug_Init
10000038 g       .data	00000000 _edata
1a00137c g     F .text	00000020 Chip_I2C_EventHandler
1a000178  w    F .text	00000002 M0SUB_IRQHandler
1a0007aa g     F .text	00000006 ordenadorMotoIface_raise_evNoBoton
1a001220 g     F .text	00000158 Chip_SetupCoreClock
1a000178  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a00120c g     F .text	00000014 SystemCoreClockUpdate
1a000178  w    F .text	00000002 DMA_IRQHandler
1a000178  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a000980 g     F .text	0000002c Board_TEC_GetStatus
1a001ba4  w    F .text	00000002 .hidden __aeabi_idiv0
1a000180  w    F .text	00000002 BusFault_Handler
1a00118c g     F .text	00000034 Chip_Clock_Enable
1a000178  w    F .text	00000002 UART3_IRQHandler
1a000178  w    F .text	00000002 MCPWM_IRQHandler
1a00092c g     F .text	00000024 Board_LED_Set
1a000178  w    F .text	00000002 M0APP_IRQHandler
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a000178  w    F .text	00000002 GINT1_IRQHandler
1a0010c4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a000178  w    F .text	00000002 GPIO4_IRQHandler
1a000a50 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e9 14 00 1a 7b 01 00 1a 7d 01 00 1a     ........{...}...
1a000010:	7f 01 00 1a 81 01 00 1a 83 01 00 1a 9c 63 ff 53     .............c.S
	...
1a00002c:	85 01 00 1a 87 01 00 1a 00 00 00 00 89 01 00 1a     ................
1a00003c:	a5 17 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	79 01 00 1a 79 01 00 1a 79 01 00 1a 00 00 00 00     y...y...y.......
1a000050:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000060:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000070:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000080:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000090:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000a0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000b0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000c0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000d0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000e0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000f0:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000100:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000110:	79 01 00 1a                                         y...

1a000114 <__data_section_table>:
1a000114:	1a001d80 	.word	0x1a001d80
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000038 	.word	0x00000038
1a000120:	1a001d80 	.word	0x1a001d80
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001d80 	.word	0x1a001d80
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001d80 	.word	0x1a001d80
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001d80 	.word	0x1a001d80
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000038 	.word	0x10000038
1a000154:	00000034 	.word	0x00000034
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <ADC0_IRQHandler>

1a00017a <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <NMI_Handler>

1a00017c <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>

1a00017e <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <MemManage_Handler>

1a000180 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <BusFault_Handler>

1a000182 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler>

1a000184 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <SVC_Handler>

1a000186 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler>

1a000188 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <PendSV_Handler+0x2>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clearInEvents>:
	return result;
}

static void clearInEvents(OrdenadorMoto* handle)
{
	handle->iface.evBoton_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7203      	strb	r3, [r0, #8]
	handle->iface.evNoBoton_raised = bool_false;
1a000304:	7243      	strb	r3, [r0, #9]
	handle->iface.evCambiarPantalla_raised = bool_false;
1a000306:	7283      	strb	r3, [r0, #10]
	handle->timeEvents.ordenadorMoto_Debouncer_DEBOUNCE_tev0_raised = bool_false;
1a000308:	7403      	strb	r3, [r0, #16]
}
1a00030a:	4770      	bx	lr

1a00030c <enseq_Debouncer_NO_OPRIMIDO_default>:

/* 'default' enter sequence for state NO_OPRIMIDO */
static void enseq_Debouncer_NO_OPRIMIDO_default(OrdenadorMoto* handle)
{
	/* 'default' enter sequence for state NO_OPRIMIDO */
	handle->stateConfVector[1] = OrdenadorMoto_Debouncer_NO_OPRIMIDO;
1a00030c:	230a      	movs	r3, #10
1a00030e:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000310:	2301      	movs	r3, #1
1a000312:	6043      	str	r3, [r0, #4]
}
1a000314:	4770      	bx	lr

1a000316 <enseq_Debouncer_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_Debouncer_VALIDACION_default(OrdenadorMoto* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[1] = OrdenadorMoto_Debouncer_VALIDACION;
1a000316:	230c      	movs	r3, #12
1a000318:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00031a:	2301      	movs	r3, #1
1a00031c:	6043      	str	r3, [r0, #4]
}
1a00031e:	4770      	bx	lr

1a000320 <exseq_main_region_Pantalla0>:

/* Default exit sequence for state Pantalla0 */
static void exseq_main_region_Pantalla0(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla0 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000320:	2300      	movs	r3, #0
1a000322:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000324:	6043      	str	r3, [r0, #4]
}
1a000326:	4770      	bx	lr

1a000328 <exseq_main_region_Pantalla1>:

/* Default exit sequence for state Pantalla1 */
static void exseq_main_region_Pantalla1(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla1 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000328:	2300      	movs	r3, #0
1a00032a:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00032c:	6043      	str	r3, [r0, #4]
}
1a00032e:	4770      	bx	lr

1a000330 <exseq_main_region_Pantalla2>:

/* Default exit sequence for state Pantalla2 */
static void exseq_main_region_Pantalla2(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla2 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000330:	2300      	movs	r3, #0
1a000332:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000334:	6043      	str	r3, [r0, #4]
}
1a000336:	4770      	bx	lr

1a000338 <exseq_main_region_Pantalla3>:

/* Default exit sequence for state Pantalla3 */
static void exseq_main_region_Pantalla3(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla3 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000338:	2300      	movs	r3, #0
1a00033a:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00033c:	6043      	str	r3, [r0, #4]
}
1a00033e:	4770      	bx	lr

1a000340 <exseq_main_region_Pantalla4>:

/* Default exit sequence for state Pantalla4 */
static void exseq_main_region_Pantalla4(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla4 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000340:	2300      	movs	r3, #0
1a000342:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000344:	6043      	str	r3, [r0, #4]
}
1a000346:	4770      	bx	lr

1a000348 <exseq_main_region_Pantalla5>:

/* Default exit sequence for state Pantalla5 */
static void exseq_main_region_Pantalla5(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla5 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000348:	2300      	movs	r3, #0
1a00034a:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00034c:	6043      	str	r3, [r0, #4]
}
1a00034e:	4770      	bx	lr

1a000350 <exseq_main_region_Pantalla6>:

/* Default exit sequence for state Pantalla6 */
static void exseq_main_region_Pantalla6(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla6 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000350:	2300      	movs	r3, #0
1a000352:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000354:	6043      	str	r3, [r0, #4]
}
1a000356:	4770      	bx	lr

1a000358 <exseq_main_region_Pantalla7>:

/* Default exit sequence for state Pantalla7 */
static void exseq_main_region_Pantalla7(OrdenadorMoto* handle)
{
	/* Default exit sequence for state Pantalla7 */
	handle->stateConfVector[0] = OrdenadorMoto_last_state;
1a000358:	2300      	movs	r3, #0
1a00035a:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00035c:	6043      	str	r3, [r0, #4]
}
1a00035e:	4770      	bx	lr

1a000360 <exseq_Debouncer_NO_OPRIMIDO>:

/* Default exit sequence for state NO_OPRIMIDO */
static void exseq_Debouncer_NO_OPRIMIDO(OrdenadorMoto* handle)
{
	/* Default exit sequence for state NO_OPRIMIDO */
	handle->stateConfVector[1] = OrdenadorMoto_last_state;
1a000360:	2300      	movs	r3, #0
1a000362:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000364:	2301      	movs	r3, #1
1a000366:	6043      	str	r3, [r0, #4]
}
1a000368:	4770      	bx	lr

1a00036a <exseq_Debouncer_OPRIMIDO>:

/* Default exit sequence for state OPRIMIDO */
static void exseq_Debouncer_OPRIMIDO(OrdenadorMoto* handle)
{
	/* Default exit sequence for state OPRIMIDO */
	handle->stateConfVector[1] = OrdenadorMoto_last_state;
1a00036a:	2300      	movs	r3, #0
1a00036c:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00036e:	2301      	movs	r3, #1
1a000370:	6043      	str	r3, [r0, #4]
}
1a000372:	4770      	bx	lr

1a000374 <exseq_Debouncer_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_Debouncer_VALIDACION(OrdenadorMoto* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[1] = OrdenadorMoto_last_state;
1a000374:	2300      	movs	r3, #0
1a000376:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000378:	2301      	movs	r3, #1
1a00037a:	6043      	str	r3, [r0, #4]
}
1a00037c:	4770      	bx	lr

1a00037e <react_Debouncer__entry_Default>:
	enseq_main_region_Pantalla0_default(handle);
}

/* Default react sequence for initial entry  */
static void react_Debouncer__entry_Default(OrdenadorMoto* handle)
{
1a00037e:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_Debouncer_NO_OPRIMIDO_default(handle);
1a000380:	f7ff ffc4 	bl	1a00030c <enseq_Debouncer_NO_OPRIMIDO_default>
}
1a000384:	bd08      	pop	{r3, pc}

1a000386 <enseq_Debouncer_default>:
{
1a000386:	b508      	push	{r3, lr}
	react_Debouncer__entry_Default(handle);
1a000388:	f7ff fff9 	bl	1a00037e <react_Debouncer__entry_Default>
}
1a00038c:	bd08      	pop	{r3, pc}

1a00038e <react>:

static sc_boolean react(OrdenadorMoto* handle) {
	/* State machine reactions. */
	SC_UNUSED(handle);
	return bool_false;
}
1a00038e:	2000      	movs	r0, #0
1a000390:	4770      	bx	lr

1a000392 <Debouncer_OPRIMIDO_react>:
			did_transition = bool_false;
		}
	} return did_transition;
}

static sc_boolean Debouncer_OPRIMIDO_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a000392:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state OPRIMIDO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000394:	460c      	mov	r4, r1
1a000396:	b119      	cbz	r1, 1a0003a0 <Debouncer_OPRIMIDO_react+0xe>
1a000398:	4605      	mov	r5, r0
	{ 
		if (handle->iface.evNoBoton_raised == bool_true)
1a00039a:	7a43      	ldrb	r3, [r0, #9]
1a00039c:	b913      	cbnz	r3, 1a0003a4 <Debouncer_OPRIMIDO_react+0x12>
		{ 
			exseq_Debouncer_OPRIMIDO(handle);
			enseq_Debouncer_NO_OPRIMIDO_default(handle);
		}  else
		{
			did_transition = bool_false;
1a00039e:	2400      	movs	r4, #0
		}
	} return did_transition;
}
1a0003a0:	4620      	mov	r0, r4
1a0003a2:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Debouncer_OPRIMIDO(handle);
1a0003a4:	f7ff ffe1 	bl	1a00036a <exseq_Debouncer_OPRIMIDO>
			enseq_Debouncer_NO_OPRIMIDO_default(handle);
1a0003a8:	4628      	mov	r0, r5
1a0003aa:	f7ff ffaf 	bl	1a00030c <enseq_Debouncer_NO_OPRIMIDO_default>
1a0003ae:	e7f7      	b.n	1a0003a0 <Debouncer_OPRIMIDO_react+0xe>

1a0003b0 <enact_main_region_Pantalla0>:
{
1a0003b0:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA0);
1a0003b2:	2100      	movs	r1, #0
1a0003b4:	f001 f8de 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a0003b8:	bd08      	pop	{r3, pc}

1a0003ba <enseq_main_region_Pantalla0_default>:
{
1a0003ba:	b510      	push	{r4, lr}
1a0003bc:	4604      	mov	r4, r0
	enact_main_region_Pantalla0(handle);
1a0003be:	f7ff fff7 	bl	1a0003b0 <enact_main_region_Pantalla0>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla0;
1a0003c2:	2301      	movs	r3, #1
1a0003c4:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0003c6:	2300      	movs	r3, #0
1a0003c8:	6063      	str	r3, [r4, #4]
}
1a0003ca:	bd10      	pop	{r4, pc}

1a0003cc <react_main_region__entry_Default>:
{
1a0003cc:	b508      	push	{r3, lr}
	enseq_main_region_Pantalla0_default(handle);
1a0003ce:	f7ff fff4 	bl	1a0003ba <enseq_main_region_Pantalla0_default>
}
1a0003d2:	bd08      	pop	{r3, pc}

1a0003d4 <enseq_main_region_default>:
{
1a0003d4:	b508      	push	{r3, lr}
	react_main_region__entry_Default(handle);
1a0003d6:	f7ff fff9 	bl	1a0003cc <react_main_region__entry_Default>
}
1a0003da:	bd08      	pop	{r3, pc}

1a0003dc <main_region_Pantalla7_react>:
static sc_boolean main_region_Pantalla7_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a0003dc:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0003de:	460c      	mov	r4, r1
1a0003e0:	b131      	cbz	r1, 1a0003f0 <main_region_Pantalla7_react+0x14>
1a0003e2:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a0003e4:	f7ff ffd3 	bl	1a00038e <react>
1a0003e8:	b910      	cbnz	r0, 1a0003f0 <main_region_Pantalla7_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a0003ea:	7aab      	ldrb	r3, [r5, #10]
1a0003ec:	b913      	cbnz	r3, 1a0003f4 <main_region_Pantalla7_react+0x18>
				did_transition = bool_false;
1a0003ee:	2400      	movs	r4, #0
}
1a0003f0:	4620      	mov	r0, r4
1a0003f2:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla7(handle);
1a0003f4:	4628      	mov	r0, r5
1a0003f6:	f7ff ffaf 	bl	1a000358 <exseq_main_region_Pantalla7>
				enseq_main_region_Pantalla0_default(handle);
1a0003fa:	4628      	mov	r0, r5
1a0003fc:	f7ff ffdd 	bl	1a0003ba <enseq_main_region_Pantalla0_default>
1a000400:	e7f6      	b.n	1a0003f0 <main_region_Pantalla7_react+0x14>

1a000402 <enact_main_region_Pantalla1>:
{
1a000402:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA1);
1a000404:	2101      	movs	r1, #1
1a000406:	f001 f8b5 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a00040a:	bd08      	pop	{r3, pc}

1a00040c <enseq_main_region_Pantalla1_default>:
{
1a00040c:	b510      	push	{r4, lr}
1a00040e:	4604      	mov	r4, r0
	enact_main_region_Pantalla1(handle);
1a000410:	f7ff fff7 	bl	1a000402 <enact_main_region_Pantalla1>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla1;
1a000414:	2302      	movs	r3, #2
1a000416:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000418:	2300      	movs	r3, #0
1a00041a:	6063      	str	r3, [r4, #4]
}
1a00041c:	bd10      	pop	{r4, pc}

1a00041e <main_region_Pantalla0_react>:
static sc_boolean main_region_Pantalla0_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a00041e:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000420:	460c      	mov	r4, r1
1a000422:	b131      	cbz	r1, 1a000432 <main_region_Pantalla0_react+0x14>
1a000424:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a000426:	f7ff ffb2 	bl	1a00038e <react>
1a00042a:	b910      	cbnz	r0, 1a000432 <main_region_Pantalla0_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a00042c:	7aab      	ldrb	r3, [r5, #10]
1a00042e:	b913      	cbnz	r3, 1a000436 <main_region_Pantalla0_react+0x18>
				did_transition = bool_false;
1a000430:	2400      	movs	r4, #0
}
1a000432:	4620      	mov	r0, r4
1a000434:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla0(handle);
1a000436:	4628      	mov	r0, r5
1a000438:	f7ff ff72 	bl	1a000320 <exseq_main_region_Pantalla0>
				enseq_main_region_Pantalla1_default(handle);
1a00043c:	4628      	mov	r0, r5
1a00043e:	f7ff ffe5 	bl	1a00040c <enseq_main_region_Pantalla1_default>
1a000442:	e7f6      	b.n	1a000432 <main_region_Pantalla0_react+0x14>

1a000444 <enact_main_region_Pantalla2>:
{
1a000444:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA0);
1a000446:	2100      	movs	r1, #0
1a000448:	f001 f894 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a00044c:	bd08      	pop	{r3, pc}

1a00044e <enseq_main_region_Pantalla2_default>:
{
1a00044e:	b510      	push	{r4, lr}
1a000450:	4604      	mov	r4, r0
	enact_main_region_Pantalla2(handle);
1a000452:	f7ff fff7 	bl	1a000444 <enact_main_region_Pantalla2>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla2;
1a000456:	2303      	movs	r3, #3
1a000458:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00045a:	2300      	movs	r3, #0
1a00045c:	6063      	str	r3, [r4, #4]
}
1a00045e:	bd10      	pop	{r4, pc}

1a000460 <main_region_Pantalla1_react>:
static sc_boolean main_region_Pantalla1_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a000460:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000462:	460c      	mov	r4, r1
1a000464:	b131      	cbz	r1, 1a000474 <main_region_Pantalla1_react+0x14>
1a000466:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a000468:	f7ff ff91 	bl	1a00038e <react>
1a00046c:	b910      	cbnz	r0, 1a000474 <main_region_Pantalla1_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a00046e:	7aab      	ldrb	r3, [r5, #10]
1a000470:	b913      	cbnz	r3, 1a000478 <main_region_Pantalla1_react+0x18>
				did_transition = bool_false;
1a000472:	2400      	movs	r4, #0
}
1a000474:	4620      	mov	r0, r4
1a000476:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla1(handle);
1a000478:	4628      	mov	r0, r5
1a00047a:	f7ff ff55 	bl	1a000328 <exseq_main_region_Pantalla1>
				enseq_main_region_Pantalla2_default(handle);
1a00047e:	4628      	mov	r0, r5
1a000480:	f7ff ffe5 	bl	1a00044e <enseq_main_region_Pantalla2_default>
1a000484:	e7f6      	b.n	1a000474 <main_region_Pantalla1_react+0x14>

1a000486 <enact_main_region_Pantalla3>:
{
1a000486:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA3);
1a000488:	2103      	movs	r1, #3
1a00048a:	f001 f873 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a00048e:	bd08      	pop	{r3, pc}

1a000490 <enseq_main_region_Pantalla3_default>:
{
1a000490:	b510      	push	{r4, lr}
1a000492:	4604      	mov	r4, r0
	enact_main_region_Pantalla3(handle);
1a000494:	f7ff fff7 	bl	1a000486 <enact_main_region_Pantalla3>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla3;
1a000498:	2304      	movs	r3, #4
1a00049a:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00049c:	2300      	movs	r3, #0
1a00049e:	6063      	str	r3, [r4, #4]
}
1a0004a0:	bd10      	pop	{r4, pc}

1a0004a2 <main_region_Pantalla2_react>:
static sc_boolean main_region_Pantalla2_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a0004a2:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0004a4:	460c      	mov	r4, r1
1a0004a6:	b131      	cbz	r1, 1a0004b6 <main_region_Pantalla2_react+0x14>
1a0004a8:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a0004aa:	f7ff ff70 	bl	1a00038e <react>
1a0004ae:	b910      	cbnz	r0, 1a0004b6 <main_region_Pantalla2_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a0004b0:	7aab      	ldrb	r3, [r5, #10]
1a0004b2:	b913      	cbnz	r3, 1a0004ba <main_region_Pantalla2_react+0x18>
				did_transition = bool_false;
1a0004b4:	2400      	movs	r4, #0
}
1a0004b6:	4620      	mov	r0, r4
1a0004b8:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla2(handle);
1a0004ba:	4628      	mov	r0, r5
1a0004bc:	f7ff ff38 	bl	1a000330 <exseq_main_region_Pantalla2>
				enseq_main_region_Pantalla3_default(handle);
1a0004c0:	4628      	mov	r0, r5
1a0004c2:	f7ff ffe5 	bl	1a000490 <enseq_main_region_Pantalla3_default>
1a0004c6:	e7f6      	b.n	1a0004b6 <main_region_Pantalla2_react+0x14>

1a0004c8 <enact_main_region_Pantalla4>:
{
1a0004c8:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA4);
1a0004ca:	2104      	movs	r1, #4
1a0004cc:	f001 f852 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a0004d0:	bd08      	pop	{r3, pc}

1a0004d2 <enseq_main_region_Pantalla4_default>:
{
1a0004d2:	b510      	push	{r4, lr}
1a0004d4:	4604      	mov	r4, r0
	enact_main_region_Pantalla4(handle);
1a0004d6:	f7ff fff7 	bl	1a0004c8 <enact_main_region_Pantalla4>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla4;
1a0004da:	2305      	movs	r3, #5
1a0004dc:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0004de:	2300      	movs	r3, #0
1a0004e0:	6063      	str	r3, [r4, #4]
}
1a0004e2:	bd10      	pop	{r4, pc}

1a0004e4 <main_region_Pantalla3_react>:
static sc_boolean main_region_Pantalla3_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a0004e4:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0004e6:	460c      	mov	r4, r1
1a0004e8:	b131      	cbz	r1, 1a0004f8 <main_region_Pantalla3_react+0x14>
1a0004ea:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a0004ec:	f7ff ff4f 	bl	1a00038e <react>
1a0004f0:	b910      	cbnz	r0, 1a0004f8 <main_region_Pantalla3_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a0004f2:	7aab      	ldrb	r3, [r5, #10]
1a0004f4:	b913      	cbnz	r3, 1a0004fc <main_region_Pantalla3_react+0x18>
				did_transition = bool_false;
1a0004f6:	2400      	movs	r4, #0
}
1a0004f8:	4620      	mov	r0, r4
1a0004fa:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla3(handle);
1a0004fc:	4628      	mov	r0, r5
1a0004fe:	f7ff ff1b 	bl	1a000338 <exseq_main_region_Pantalla3>
				enseq_main_region_Pantalla4_default(handle);
1a000502:	4628      	mov	r0, r5
1a000504:	f7ff ffe5 	bl	1a0004d2 <enseq_main_region_Pantalla4_default>
1a000508:	e7f6      	b.n	1a0004f8 <main_region_Pantalla3_react+0x14>

1a00050a <enact_main_region_Pantalla5>:
{
1a00050a:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA5);
1a00050c:	2105      	movs	r1, #5
1a00050e:	f001 f831 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a000512:	bd08      	pop	{r3, pc}

1a000514 <enseq_main_region_Pantalla5_default>:
{
1a000514:	b510      	push	{r4, lr}
1a000516:	4604      	mov	r4, r0
	enact_main_region_Pantalla5(handle);
1a000518:	f7ff fff7 	bl	1a00050a <enact_main_region_Pantalla5>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla5;
1a00051c:	2306      	movs	r3, #6
1a00051e:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000520:	2300      	movs	r3, #0
1a000522:	6063      	str	r3, [r4, #4]
}
1a000524:	bd10      	pop	{r4, pc}

1a000526 <main_region_Pantalla4_react>:
static sc_boolean main_region_Pantalla4_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a000526:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000528:	460c      	mov	r4, r1
1a00052a:	b131      	cbz	r1, 1a00053a <main_region_Pantalla4_react+0x14>
1a00052c:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a00052e:	f7ff ff2e 	bl	1a00038e <react>
1a000532:	b910      	cbnz	r0, 1a00053a <main_region_Pantalla4_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a000534:	7aab      	ldrb	r3, [r5, #10]
1a000536:	b913      	cbnz	r3, 1a00053e <main_region_Pantalla4_react+0x18>
				did_transition = bool_false;
1a000538:	2400      	movs	r4, #0
}
1a00053a:	4620      	mov	r0, r4
1a00053c:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla4(handle);
1a00053e:	4628      	mov	r0, r5
1a000540:	f7ff fefe 	bl	1a000340 <exseq_main_region_Pantalla4>
				enseq_main_region_Pantalla5_default(handle);
1a000544:	4628      	mov	r0, r5
1a000546:	f7ff ffe5 	bl	1a000514 <enseq_main_region_Pantalla5_default>
1a00054a:	e7f6      	b.n	1a00053a <main_region_Pantalla4_react+0x14>

1a00054c <enact_main_region_Pantalla6>:
{
1a00054c:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA6);
1a00054e:	2106      	movs	r1, #6
1a000550:	f001 f810 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a000554:	bd08      	pop	{r3, pc}

1a000556 <enseq_main_region_Pantalla6_default>:
{
1a000556:	b510      	push	{r4, lr}
1a000558:	4604      	mov	r4, r0
	enact_main_region_Pantalla6(handle);
1a00055a:	f7ff fff7 	bl	1a00054c <enact_main_region_Pantalla6>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla6;
1a00055e:	2307      	movs	r3, #7
1a000560:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000562:	2300      	movs	r3, #0
1a000564:	6063      	str	r3, [r4, #4]
}
1a000566:	bd10      	pop	{r4, pc}

1a000568 <main_region_Pantalla5_react>:
static sc_boolean main_region_Pantalla5_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a000568:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a00056a:	460c      	mov	r4, r1
1a00056c:	b131      	cbz	r1, 1a00057c <main_region_Pantalla5_react+0x14>
1a00056e:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a000570:	f7ff ff0d 	bl	1a00038e <react>
1a000574:	b910      	cbnz	r0, 1a00057c <main_region_Pantalla5_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a000576:	7aab      	ldrb	r3, [r5, #10]
1a000578:	b913      	cbnz	r3, 1a000580 <main_region_Pantalla5_react+0x18>
				did_transition = bool_false;
1a00057a:	2400      	movs	r4, #0
}
1a00057c:	4620      	mov	r0, r4
1a00057e:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla5(handle);
1a000580:	4628      	mov	r0, r5
1a000582:	f7ff fee1 	bl	1a000348 <exseq_main_region_Pantalla5>
				enseq_main_region_Pantalla6_default(handle);
1a000586:	4628      	mov	r0, r5
1a000588:	f7ff ffe5 	bl	1a000556 <enseq_main_region_Pantalla6_default>
1a00058c:	e7f6      	b.n	1a00057c <main_region_Pantalla5_react+0x14>

1a00058e <enact_main_region_Pantalla7>:
{
1a00058e:	b508      	push	{r3, lr}
	ordenadorMotoIface_opCambiarPantalla(handle, ORDENADORMOTO_ORDENADORMOTOIFACE_PANTALLA7);
1a000590:	2107      	movs	r1, #7
1a000592:	f000 ffef 	bl	1a001574 <ordenadorMotoIface_opCambiarPantalla>
}
1a000596:	bd08      	pop	{r3, pc}

1a000598 <enseq_main_region_Pantalla7_default>:
{
1a000598:	b510      	push	{r4, lr}
1a00059a:	4604      	mov	r4, r0
	enact_main_region_Pantalla7(handle);
1a00059c:	f7ff fff7 	bl	1a00058e <enact_main_region_Pantalla7>
	handle->stateConfVector[0] = OrdenadorMoto_main_region_Pantalla7;
1a0005a0:	2308      	movs	r3, #8
1a0005a2:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0005a4:	2300      	movs	r3, #0
1a0005a6:	6063      	str	r3, [r4, #4]
}
1a0005a8:	bd10      	pop	{r4, pc}

1a0005aa <main_region_Pantalla6_react>:
static sc_boolean main_region_Pantalla6_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a0005aa:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0005ac:	460c      	mov	r4, r1
1a0005ae:	b131      	cbz	r1, 1a0005be <main_region_Pantalla6_react+0x14>
1a0005b0:	4605      	mov	r5, r0
		if ((react(handle)) == (bool_false))
1a0005b2:	f7ff feec 	bl	1a00038e <react>
1a0005b6:	b910      	cbnz	r0, 1a0005be <main_region_Pantalla6_react+0x14>
			if (handle->iface.evCambiarPantalla_raised == bool_true)
1a0005b8:	7aab      	ldrb	r3, [r5, #10]
1a0005ba:	b913      	cbnz	r3, 1a0005c2 <main_region_Pantalla6_react+0x18>
				did_transition = bool_false;
1a0005bc:	2400      	movs	r4, #0
}
1a0005be:	4620      	mov	r0, r4
1a0005c0:	bd38      	pop	{r3, r4, r5, pc}
				exseq_main_region_Pantalla6(handle);
1a0005c2:	4628      	mov	r0, r5
1a0005c4:	f7ff fec4 	bl	1a000350 <exseq_main_region_Pantalla6>
				enseq_main_region_Pantalla7_default(handle);
1a0005c8:	4628      	mov	r0, r5
1a0005ca:	f7ff ffe5 	bl	1a000598 <enseq_main_region_Pantalla7_default>
1a0005ce:	e7f6      	b.n	1a0005be <main_region_Pantalla6_react+0x14>

1a0005d0 <exact_Debouncer_DEBOUNCE>:
{
1a0005d0:	b508      	push	{r3, lr}
	ordenadorMoto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.ordenadorMoto_Debouncer_DEBOUNCE_tev0_raised) );		
1a0005d2:	f100 0110 	add.w	r1, r0, #16
1a0005d6:	f001 f8db 	bl	1a001790 <ordenadorMoto_unsetTimer>
}
1a0005da:	bd08      	pop	{r3, pc}

1a0005dc <exseq_Debouncer_DEBOUNCE>:
{
1a0005dc:	b508      	push	{r3, lr}
	handle->stateConfVector[1] = OrdenadorMoto_last_state;
1a0005de:	2200      	movs	r2, #0
1a0005e0:	7042      	strb	r2, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0005e2:	2201      	movs	r2, #1
1a0005e4:	6042      	str	r2, [r0, #4]
	exact_Debouncer_DEBOUNCE(handle);
1a0005e6:	f7ff fff3 	bl	1a0005d0 <exact_Debouncer_DEBOUNCE>
}
1a0005ea:	bd08      	pop	{r3, pc}

1a0005ec <Debouncer_DEBOUNCE_react>:
static sc_boolean Debouncer_DEBOUNCE_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a0005ec:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0005ee:	460c      	mov	r4, r1
1a0005f0:	b119      	cbz	r1, 1a0005fa <Debouncer_DEBOUNCE_react+0xe>
1a0005f2:	4605      	mov	r5, r0
		if (handle->timeEvents.ordenadorMoto_Debouncer_DEBOUNCE_tev0_raised == bool_true)
1a0005f4:	7c03      	ldrb	r3, [r0, #16]
1a0005f6:	b913      	cbnz	r3, 1a0005fe <Debouncer_DEBOUNCE_react+0x12>
			did_transition = bool_false;
1a0005f8:	2400      	movs	r4, #0
}
1a0005fa:	4620      	mov	r0, r4
1a0005fc:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Debouncer_DEBOUNCE(handle);
1a0005fe:	f7ff ffed 	bl	1a0005dc <exseq_Debouncer_DEBOUNCE>
			enseq_Debouncer_VALIDACION_default(handle);
1a000602:	4628      	mov	r0, r5
1a000604:	f7ff fe87 	bl	1a000316 <enseq_Debouncer_VALIDACION_default>
1a000608:	e7f7      	b.n	1a0005fa <Debouncer_DEBOUNCE_react+0xe>

1a00060a <enact_Debouncer_DEBOUNCE>:
{
1a00060a:	b508      	push	{r3, lr}
	ordenadorMoto_setTimer(handle, (sc_eventid) &(handle->timeEvents.ordenadorMoto_Debouncer_DEBOUNCE_tev0_raised) , 100, bool_false);
1a00060c:	2300      	movs	r3, #0
1a00060e:	2264      	movs	r2, #100	; 0x64
1a000610:	f100 0110 	add.w	r1, r0, #16
1a000614:	f001 f8ae 	bl	1a001774 <ordenadorMoto_setTimer>
}
1a000618:	bd08      	pop	{r3, pc}

1a00061a <enseq_Debouncer_DEBOUNCE_default>:
{
1a00061a:	b510      	push	{r4, lr}
1a00061c:	4604      	mov	r4, r0
	enact_Debouncer_DEBOUNCE(handle);
1a00061e:	f7ff fff4 	bl	1a00060a <enact_Debouncer_DEBOUNCE>
	handle->stateConfVector[1] = OrdenadorMoto_Debouncer_DEBOUNCE;
1a000622:	2309      	movs	r3, #9
1a000624:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a000626:	2301      	movs	r3, #1
1a000628:	6063      	str	r3, [r4, #4]
}
1a00062a:	bd10      	pop	{r4, pc}

1a00062c <Debouncer_NO_OPRIMIDO_react>:
static sc_boolean Debouncer_NO_OPRIMIDO_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a00062c:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a00062e:	460c      	mov	r4, r1
1a000630:	b119      	cbz	r1, 1a00063a <Debouncer_NO_OPRIMIDO_react+0xe>
1a000632:	4605      	mov	r5, r0
		if (handle->iface.evBoton_raised == bool_true)
1a000634:	7a03      	ldrb	r3, [r0, #8]
1a000636:	b913      	cbnz	r3, 1a00063e <Debouncer_NO_OPRIMIDO_react+0x12>
			did_transition = bool_false;
1a000638:	2400      	movs	r4, #0
}
1a00063a:	4620      	mov	r0, r4
1a00063c:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Debouncer_NO_OPRIMIDO(handle);
1a00063e:	f7ff fe8f 	bl	1a000360 <exseq_Debouncer_NO_OPRIMIDO>
			enseq_Debouncer_DEBOUNCE_default(handle);
1a000642:	4628      	mov	r0, r5
1a000644:	f7ff ffe9 	bl	1a00061a <enseq_Debouncer_DEBOUNCE_default>
1a000648:	e7f7      	b.n	1a00063a <Debouncer_NO_OPRIMIDO_react+0xe>

1a00064a <enact_Debouncer_OPRIMIDO>:
{
1a00064a:	b508      	push	{r3, lr}
	ordenadorMotoIface_opBoton(handle);
1a00064c:	f001 f8c3 	bl	1a0017d6 <ordenadorMotoIface_opBoton>
}
1a000650:	bd08      	pop	{r3, pc}

1a000652 <enseq_Debouncer_OPRIMIDO_default>:
{
1a000652:	b510      	push	{r4, lr}
1a000654:	4604      	mov	r4, r0
	enact_Debouncer_OPRIMIDO(handle);
1a000656:	f7ff fff8 	bl	1a00064a <enact_Debouncer_OPRIMIDO>
	handle->stateConfVector[1] = OrdenadorMoto_Debouncer_OPRIMIDO;
1a00065a:	230b      	movs	r3, #11
1a00065c:	7063      	strb	r3, [r4, #1]
	handle->stateConfVectorPosition = 1;
1a00065e:	2301      	movs	r3, #1
1a000660:	6063      	str	r3, [r4, #4]
}
1a000662:	bd10      	pop	{r4, pc}

1a000664 <Debouncer_VALIDACION_react>:

static sc_boolean Debouncer_VALIDACION_react(OrdenadorMoto* handle, const sc_boolean try_transition) {
1a000664:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state VALIDACION. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000666:	460d      	mov	r5, r1
1a000668:	b129      	cbz	r1, 1a000676 <Debouncer_VALIDACION_react+0x12>
1a00066a:	4604      	mov	r4, r0
	{ 
		if (handle->iface.evBoton_raised == bool_true)
1a00066c:	7a03      	ldrb	r3, [r0, #8]
1a00066e:	b923      	cbnz	r3, 1a00067a <Debouncer_VALIDACION_react+0x16>
		{ 
			exseq_Debouncer_VALIDACION(handle);
			enseq_Debouncer_OPRIMIDO_default(handle);
		}  else
		{
			if (handle->iface.evNoBoton_raised == bool_true)
1a000670:	7a43      	ldrb	r3, [r0, #9]
1a000672:	b943      	cbnz	r3, 1a000686 <Debouncer_VALIDACION_react+0x22>
			{ 
				exseq_Debouncer_VALIDACION(handle);
				enseq_Debouncer_NO_OPRIMIDO_default(handle);
			}  else
			{
				did_transition = bool_false;
1a000674:	2500      	movs	r5, #0
			}
		}
	} return did_transition;
}
1a000676:	4628      	mov	r0, r5
1a000678:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Debouncer_VALIDACION(handle);
1a00067a:	f7ff fe7b 	bl	1a000374 <exseq_Debouncer_VALIDACION>
			enseq_Debouncer_OPRIMIDO_default(handle);
1a00067e:	4620      	mov	r0, r4
1a000680:	f7ff ffe7 	bl	1a000652 <enseq_Debouncer_OPRIMIDO_default>
1a000684:	e7f7      	b.n	1a000676 <Debouncer_VALIDACION_react+0x12>
				exseq_Debouncer_VALIDACION(handle);
1a000686:	f7ff fe75 	bl	1a000374 <exseq_Debouncer_VALIDACION>
				enseq_Debouncer_NO_OPRIMIDO_default(handle);
1a00068a:	4620      	mov	r0, r4
1a00068c:	f7ff fe3e 	bl	1a00030c <enseq_Debouncer_NO_OPRIMIDO_default>
1a000690:	e7f1      	b.n	1a000676 <Debouncer_VALIDACION_react+0x12>

1a000692 <ordenadorMoto_init>:
{
1a000692:	b538      	push	{r3, r4, r5, lr}
1a000694:	4604      	mov	r4, r0
	for (i = 0; i < ORDENADORMOTO_MAX_ORTHOGONAL_STATES; ++i)
1a000696:	2300      	movs	r3, #0
1a000698:	e002      	b.n	1a0006a0 <ordenadorMoto_init+0xe>
		handle->stateConfVector[i] = OrdenadorMoto_last_state;
1a00069a:	2200      	movs	r2, #0
1a00069c:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < ORDENADORMOTO_MAX_ORTHOGONAL_STATES; ++i)
1a00069e:	3301      	adds	r3, #1
1a0006a0:	2b01      	cmp	r3, #1
1a0006a2:	ddfa      	ble.n	1a00069a <ordenadorMoto_init+0x8>
	handle->stateConfVectorPosition = 0;
1a0006a4:	2500      	movs	r5, #0
1a0006a6:	6065      	str	r5, [r4, #4]
	clearInEvents(handle);
1a0006a8:	4620      	mov	r0, r4
1a0006aa:	f7ff fe29 	bl	1a000300 <clearInEvents>
	handle->iface.pantalla = 0;
1a0006ae:	60e5      	str	r5, [r4, #12]
}
1a0006b0:	bd38      	pop	{r3, r4, r5, pc}

1a0006b2 <ordenadorMoto_enter>:
{
1a0006b2:	b510      	push	{r4, lr}
1a0006b4:	4604      	mov	r4, r0
	enseq_main_region_default(handle);
1a0006b6:	f7ff fe8d 	bl	1a0003d4 <enseq_main_region_default>
	enseq_Debouncer_default(handle);
1a0006ba:	4620      	mov	r0, r4
1a0006bc:	f7ff fe63 	bl	1a000386 <enseq_Debouncer_default>
}
1a0006c0:	bd10      	pop	{r4, pc}
1a0006c2:	Address 0x000000001a0006c2 is out of bounds.


1a0006c4 <ordenadorMoto_runCycle>:
{
1a0006c4:	b510      	push	{r4, lr}
1a0006c6:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a0006c8:	2300      	movs	r3, #0
1a0006ca:	6043      	str	r3, [r0, #4]
1a0006cc:	e006      	b.n	1a0006dc <ordenadorMoto_runCycle+0x18>
			main_region_Pantalla0_react(handle, bool_true);
1a0006ce:	2101      	movs	r1, #1
1a0006d0:	4620      	mov	r0, r4
1a0006d2:	f7ff fea4 	bl	1a00041e <main_region_Pantalla0_react>
		handle->stateConfVectorPosition++)
1a0006d6:	6863      	ldr	r3, [r4, #4]
1a0006d8:	3301      	adds	r3, #1
1a0006da:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < ORDENADORMOTO_MAX_ORTHOGONAL_STATES;
1a0006dc:	6863      	ldr	r3, [r4, #4]
	for (handle->stateConfVectorPosition = 0;
1a0006de:	2b01      	cmp	r3, #1
1a0006e0:	d855      	bhi.n	1a00078e <ordenadorMoto_runCycle+0xca>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a0006e2:	5ce3      	ldrb	r3, [r4, r3]
1a0006e4:	3b01      	subs	r3, #1
1a0006e6:	2b0b      	cmp	r3, #11
1a0006e8:	d8f5      	bhi.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
1a0006ea:	a201      	add	r2, pc, #4	; (adr r2, 1a0006f0 <ordenadorMoto_runCycle+0x2c>)
1a0006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0006f0:	1a0006cf 	.word	0x1a0006cf
1a0006f4:	1a000721 	.word	0x1a000721
1a0006f8:	1a00072b 	.word	0x1a00072b
1a0006fc:	1a000735 	.word	0x1a000735
1a000700:	1a00073f 	.word	0x1a00073f
1a000704:	1a000749 	.word	0x1a000749
1a000708:	1a000753 	.word	0x1a000753
1a00070c:	1a00075d 	.word	0x1a00075d
1a000710:	1a000767 	.word	0x1a000767
1a000714:	1a000771 	.word	0x1a000771
1a000718:	1a00077b 	.word	0x1a00077b
1a00071c:	1a000785 	.word	0x1a000785
			main_region_Pantalla1_react(handle, bool_true);
1a000720:	2101      	movs	r1, #1
1a000722:	4620      	mov	r0, r4
1a000724:	f7ff fe9c 	bl	1a000460 <main_region_Pantalla1_react>
			break;
1a000728:	e7d5      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			main_region_Pantalla2_react(handle, bool_true);
1a00072a:	2101      	movs	r1, #1
1a00072c:	4620      	mov	r0, r4
1a00072e:	f7ff feb8 	bl	1a0004a2 <main_region_Pantalla2_react>
			break;
1a000732:	e7d0      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			main_region_Pantalla3_react(handle, bool_true);
1a000734:	2101      	movs	r1, #1
1a000736:	4620      	mov	r0, r4
1a000738:	f7ff fed4 	bl	1a0004e4 <main_region_Pantalla3_react>
			break;
1a00073c:	e7cb      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			main_region_Pantalla4_react(handle, bool_true);
1a00073e:	2101      	movs	r1, #1
1a000740:	4620      	mov	r0, r4
1a000742:	f7ff fef0 	bl	1a000526 <main_region_Pantalla4_react>
			break;
1a000746:	e7c6      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			main_region_Pantalla5_react(handle, bool_true);
1a000748:	2101      	movs	r1, #1
1a00074a:	4620      	mov	r0, r4
1a00074c:	f7ff ff0c 	bl	1a000568 <main_region_Pantalla5_react>
			break;
1a000750:	e7c1      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			main_region_Pantalla6_react(handle, bool_true);
1a000752:	2101      	movs	r1, #1
1a000754:	4620      	mov	r0, r4
1a000756:	f7ff ff28 	bl	1a0005aa <main_region_Pantalla6_react>
			break;
1a00075a:	e7bc      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			main_region_Pantalla7_react(handle, bool_true);
1a00075c:	2101      	movs	r1, #1
1a00075e:	4620      	mov	r0, r4
1a000760:	f7ff fe3c 	bl	1a0003dc <main_region_Pantalla7_react>
			break;
1a000764:	e7b7      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			Debouncer_DEBOUNCE_react(handle, bool_true);
1a000766:	2101      	movs	r1, #1
1a000768:	4620      	mov	r0, r4
1a00076a:	f7ff ff3f 	bl	1a0005ec <Debouncer_DEBOUNCE_react>
			break;
1a00076e:	e7b2      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			Debouncer_NO_OPRIMIDO_react(handle, bool_true);
1a000770:	2101      	movs	r1, #1
1a000772:	4620      	mov	r0, r4
1a000774:	f7ff ff5a 	bl	1a00062c <Debouncer_NO_OPRIMIDO_react>
			break;
1a000778:	e7ad      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			Debouncer_OPRIMIDO_react(handle, bool_true);
1a00077a:	2101      	movs	r1, #1
1a00077c:	4620      	mov	r0, r4
1a00077e:	f7ff fe08 	bl	1a000392 <Debouncer_OPRIMIDO_react>
			break;
1a000782:	e7a8      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
			Debouncer_VALIDACION_react(handle, bool_true);
1a000784:	2101      	movs	r1, #1
1a000786:	4620      	mov	r0, r4
1a000788:	f7ff ff6c 	bl	1a000664 <Debouncer_VALIDACION_react>
			break;
1a00078c:	e7a3      	b.n	1a0006d6 <ordenadorMoto_runCycle+0x12>
	clearInEvents(handle);
1a00078e:	4620      	mov	r0, r4
1a000790:	f7ff fdb6 	bl	1a000300 <clearInEvents>
}
1a000794:	bd10      	pop	{r4, pc}
1a000796:	bf00      	nop

1a000798 <ordenadorMoto_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a000798:	3010      	adds	r0, #16
1a00079a:	4288      	cmp	r0, r1
1a00079c:	dc04      	bgt.n	1a0007a8 <ordenadorMoto_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(OrdenadorMotoTimeEvents))
1a00079e:	3001      	adds	r0, #1
1a0007a0:	4288      	cmp	r0, r1
1a0007a2:	d901      	bls.n	1a0007a8 <ordenadorMoto_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a0007a4:	2301      	movs	r3, #1
1a0007a6:	700b      	strb	r3, [r1, #0]
}
1a0007a8:	4770      	bx	lr

1a0007aa <ordenadorMotoIface_raise_evNoBoton>:
	handle->iface.evNoBoton_raised = bool_true;
1a0007aa:	2301      	movs	r3, #1
1a0007ac:	7243      	strb	r3, [r0, #9]
}
1a0007ae:	4770      	bx	lr

1a0007b0 <ordenadorMotoIface_raise_evCambiarPantalla>:
	handle->iface.evCambiarPantalla_raised = bool_true;
1a0007b0:	2301      	movs	r3, #1
1a0007b2:	7283      	strb	r3, [r0, #10]
}
1a0007b4:	4770      	bx	lr
1a0007b6:	Address 0x000000001a0007b6 is out of bounds.


1a0007b8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0007b8:	2200      	movs	r2, #0
1a0007ba:	2a05      	cmp	r2, #5
1a0007bc:	d819      	bhi.n	1a0007f2 <Board_LED_Init+0x3a>
{
1a0007be:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0007c0:	490c      	ldr	r1, [pc, #48]	; (1a0007f4 <Board_LED_Init+0x3c>)
1a0007c2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0007c6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0007ca:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0007cc:	4b0a      	ldr	r3, [pc, #40]	; (1a0007f8 <Board_LED_Init+0x40>)
1a0007ce:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0007d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0007d6:	2001      	movs	r0, #1
1a0007d8:	40a0      	lsls	r0, r4
1a0007da:	4301      	orrs	r1, r0
1a0007dc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0007e0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0007e4:	2100      	movs	r1, #0
1a0007e6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0007e8:	3201      	adds	r2, #1
1a0007ea:	2a05      	cmp	r2, #5
1a0007ec:	d9e8      	bls.n	1a0007c0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0007ee:	bc70      	pop	{r4, r5, r6}
1a0007f0:	4770      	bx	lr
1a0007f2:	4770      	bx	lr
1a0007f4:	1a001c0c 	.word	0x1a001c0c
1a0007f8:	400f4000 	.word	0x400f4000

1a0007fc <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0007fc:	2300      	movs	r3, #0
1a0007fe:	2b03      	cmp	r3, #3
1a000800:	d816      	bhi.n	1a000830 <Board_TEC_Init+0x34>
{
1a000802:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000804:	490b      	ldr	r1, [pc, #44]	; (1a000834 <Board_TEC_Init+0x38>)
1a000806:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00080a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00080e:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000810:	4c09      	ldr	r4, [pc, #36]	; (1a000838 <Board_TEC_Init+0x3c>)
1a000812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000816:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00081a:	2001      	movs	r0, #1
1a00081c:	40a8      	lsls	r0, r5
1a00081e:	ea21 0100 	bic.w	r1, r1, r0
1a000822:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000826:	3301      	adds	r3, #1
1a000828:	2b03      	cmp	r3, #3
1a00082a:	d9eb      	bls.n	1a000804 <Board_TEC_Init+0x8>
   }
}
1a00082c:	bc30      	pop	{r4, r5}
1a00082e:	4770      	bx	lr
1a000830:	4770      	bx	lr
1a000832:	bf00      	nop
1a000834:	1a001c04 	.word	0x1a001c04
1a000838:	400f4000 	.word	0x400f4000

1a00083c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00083c:	2300      	movs	r3, #0
1a00083e:	2b08      	cmp	r3, #8
1a000840:	d816      	bhi.n	1a000870 <Board_GPIO_Init+0x34>
{
1a000842:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000844:	490b      	ldr	r1, [pc, #44]	; (1a000874 <Board_GPIO_Init+0x38>)
1a000846:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00084a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00084e:	784d      	ldrb	r5, [r1, #1]
1a000850:	4c09      	ldr	r4, [pc, #36]	; (1a000878 <Board_GPIO_Init+0x3c>)
1a000852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000856:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00085a:	2001      	movs	r0, #1
1a00085c:	40a8      	lsls	r0, r5
1a00085e:	ea21 0100 	bic.w	r1, r1, r0
1a000862:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000866:	3301      	adds	r3, #1
1a000868:	2b08      	cmp	r3, #8
1a00086a:	d9eb      	bls.n	1a000844 <Board_GPIO_Init+0x8>
   }
}
1a00086c:	bc30      	pop	{r4, r5}
1a00086e:	4770      	bx	lr
1a000870:	4770      	bx	lr
1a000872:	bf00      	nop
1a000874:	1a001c18 	.word	0x1a001c18
1a000878:	400f4000 	.word	0x400f4000

1a00087c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00087c:	b510      	push	{r4, lr}
1a00087e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000880:	4c08      	ldr	r4, [pc, #32]	; (1a0008a4 <Board_ADC_Init+0x28>)
1a000882:	4669      	mov	r1, sp
1a000884:	4620      	mov	r0, r4
1a000886:	f000 f9bb 	bl	1a000c00 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00088a:	4a07      	ldr	r2, [pc, #28]	; (1a0008a8 <Board_ADC_Init+0x2c>)
1a00088c:	4669      	mov	r1, sp
1a00088e:	4620      	mov	r0, r4
1a000890:	f000 f9d6 	bl	1a000c40 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000894:	2200      	movs	r2, #0
1a000896:	4669      	mov	r1, sp
1a000898:	4620      	mov	r0, r4
1a00089a:	f000 f9ea 	bl	1a000c72 <Chip_ADC_SetResolution>
}
1a00089e:	b002      	add	sp, #8
1a0008a0:	bd10      	pop	{r4, pc}
1a0008a2:	bf00      	nop
1a0008a4:	400e3000 	.word	0x400e3000
1a0008a8:	00061a80 	.word	0x00061a80

1a0008ac <Board_SPI_Init>:
{
1a0008ac:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0008ae:	4c0b      	ldr	r4, [pc, #44]	; (1a0008dc <Board_SPI_Init+0x30>)
1a0008b0:	4620      	mov	r0, r4
1a0008b2:	f000 fddf 	bl	1a001474 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0008b6:	6863      	ldr	r3, [r4, #4]
1a0008b8:	f023 0304 	bic.w	r3, r3, #4
1a0008bc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0008be:	6823      	ldr	r3, [r4, #0]
1a0008c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0008c4:	f043 0307 	orr.w	r3, r3, #7
1a0008c8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0008ca:	4905      	ldr	r1, [pc, #20]	; (1a0008e0 <Board_SPI_Init+0x34>)
1a0008cc:	4620      	mov	r0, r4
1a0008ce:	f000 fdb2 	bl	1a001436 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0008d2:	6863      	ldr	r3, [r4, #4]
1a0008d4:	f043 0302 	orr.w	r3, r3, #2
1a0008d8:	6063      	str	r3, [r4, #4]
}
1a0008da:	bd10      	pop	{r4, pc}
1a0008dc:	400c5000 	.word	0x400c5000
1a0008e0:	000186a0 	.word	0x000186a0

1a0008e4 <Board_I2C_Init>:
{
1a0008e4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0008e6:	2000      	movs	r0, #0
1a0008e8:	f000 fd58 	bl	1a00139c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0008ec:	4b04      	ldr	r3, [pc, #16]	; (1a000900 <Board_I2C_Init+0x1c>)
1a0008ee:	f640 0208 	movw	r2, #2056	; 0x808
1a0008f2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0008f6:	4903      	ldr	r1, [pc, #12]	; (1a000904 <Board_I2C_Init+0x20>)
1a0008f8:	2000      	movs	r0, #0
1a0008fa:	f000 fd61 	bl	1a0013c0 <Chip_I2C_SetClockRate>
}
1a0008fe:	bd08      	pop	{r3, pc}
1a000900:	40086000 	.word	0x40086000
1a000904:	000f4240 	.word	0x000f4240

1a000908 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000908:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00090a:	4c07      	ldr	r4, [pc, #28]	; (1a000928 <Board_Debug_Init+0x20>)
1a00090c:	4620      	mov	r0, r4
1a00090e:	f000 f8bb 	bl	1a000a88 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000912:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000916:	4620      	mov	r0, r4
1a000918:	f000 f8e0 	bl	1a000adc <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00091c:	2303      	movs	r3, #3
1a00091e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000920:	2301      	movs	r3, #1
1a000922:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000924:	bd10      	pop	{r4, pc}
1a000926:	bf00      	nop
1a000928:	400c1000 	.word	0x400c1000

1a00092c <Board_LED_Set>:
}


void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a00092c:	2805      	cmp	r0, #5
1a00092e:	d80b      	bhi.n	1a000948 <Board_LED_Set+0x1c>
      return;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, On);
1a000930:	4a06      	ldr	r2, [pc, #24]	; (1a00094c <Board_LED_Set+0x20>)
1a000932:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a000936:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a00093a:	7842      	ldrb	r2, [r0, #1]
	pGPIO->B[port][pin] = setting;
1a00093c:	015b      	lsls	r3, r3, #5
1a00093e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000942:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000946:	5499      	strb	r1, [r3, r2]
}
1a000948:	4770      	bx	lr
1a00094a:	bf00      	nop
1a00094c:	1a001c0c 	.word	0x1a001c0c

1a000950 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000950:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000952:	f7ff ffd9 	bl	1a000908 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000956:	4809      	ldr	r0, [pc, #36]	; (1a00097c <Board_Init+0x2c>)
1a000958:	f000 fd0e 	bl	1a001378 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a00095c:	f7ff ff6e 	bl	1a00083c <Board_GPIO_Init>
   Board_ADC_Init();
1a000960:	f7ff ff8c 	bl	1a00087c <Board_ADC_Init>
   Board_SPI_Init();
1a000964:	f7ff ffa2 	bl	1a0008ac <Board_SPI_Init>
   Board_I2C_Init();
1a000968:	f7ff ffbc 	bl	1a0008e4 <Board_I2C_Init>

   Board_LED_Init();
1a00096c:	f7ff ff24 	bl	1a0007b8 <Board_LED_Init>
   Board_TEC_Init();
1a000970:	f7ff ff44 	bl	1a0007fc <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000974:	f000 fc4a 	bl	1a00120c <SystemCoreClockUpdate>
}
1a000978:	bd08      	pop	{r3, pc}
1a00097a:	bf00      	nop
1a00097c:	400f4000 	.word	0x400f4000

1a000980 <Board_TEC_GetStatus>:


bool Board_TEC_GetStatus(uint8_t button)
{
   if (button >= GPIO_BUTTONS_SIZE) {
1a000980:	2803      	cmp	r0, #3
1a000982:	d80f      	bhi.n	1a0009a4 <Board_TEC_GetStatus+0x24>
      return false;
   }

   return Chip_GPIO_GetPinState(LPC_GPIO_PORT, GpioButtons[button].port,
1a000984:	4a08      	ldr	r2, [pc, #32]	; (1a0009a8 <Board_TEC_GetStatus+0x28>)
1a000986:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a00098a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a00098e:	7842      	ldrb	r2, [r0, #1]
	return (bool) pGPIO->B[port][pin];
1a000990:	015b      	lsls	r3, r3, #5
1a000992:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000996:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00099a:	5c98      	ldrb	r0, [r3, r2]
1a00099c:	3000      	adds	r0, #0
1a00099e:	bf18      	it	ne
1a0009a0:	2001      	movne	r0, #1
1a0009a2:	4770      	bx	lr
      return false;
1a0009a4:	2000      	movs	r0, #0
                                GpioButtons[button].pin);
}
1a0009a6:	4770      	bx	lr
1a0009a8:	1a001c04 	.word	0x1a001c04

1a0009ac <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0009ac:	2300      	movs	r3, #0
1a0009ae:	2b1c      	cmp	r3, #28
1a0009b0:	d812      	bhi.n	1a0009d8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0009b2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0009b4:	4a09      	ldr	r2, [pc, #36]	; (1a0009dc <Board_SetupMuxing+0x30>)
1a0009b6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0009ba:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0009be:	784a      	ldrb	r2, [r1, #1]
1a0009c0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0009c2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0009c6:	4906      	ldr	r1, [pc, #24]	; (1a0009e0 <Board_SetupMuxing+0x34>)
1a0009c8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0009cc:	3301      	adds	r3, #1
1a0009ce:	2b1c      	cmp	r3, #28
1a0009d0:	d9f0      	bls.n	1a0009b4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0009d2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0009d6:	4770      	bx	lr
1a0009d8:	4770      	bx	lr
1a0009da:	bf00      	nop
1a0009dc:	1a001c34 	.word	0x1a001c34
1a0009e0:	40086000 	.word	0x40086000

1a0009e4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0009e4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0009e6:	4a17      	ldr	r2, [pc, #92]	; (1a000a44 <Board_SetupClocking+0x60>)
1a0009e8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0009ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0009f0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009f4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0009f8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0009fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000a00:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000a04:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000a08:	2201      	movs	r2, #1
1a000a0a:	490f      	ldr	r1, [pc, #60]	; (1a000a48 <Board_SetupClocking+0x64>)
1a000a0c:	2006      	movs	r0, #6
1a000a0e:	f000 fc07 	bl	1a001220 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000a12:	2400      	movs	r4, #0
1a000a14:	b14c      	cbz	r4, 1a000a2a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000a16:	4b0b      	ldr	r3, [pc, #44]	; (1a000a44 <Board_SetupClocking+0x60>)
1a000a18:	685a      	ldr	r2, [r3, #4]
1a000a1a:	f022 020c 	bic.w	r2, r2, #12
1a000a1e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000a20:	685a      	ldr	r2, [r3, #4]
1a000a22:	f042 0203 	orr.w	r2, r2, #3
1a000a26:	605a      	str	r2, [r3, #4]
}
1a000a28:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000a2a:	4808      	ldr	r0, [pc, #32]	; (1a000a4c <Board_SetupClocking+0x68>)
1a000a2c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000a30:	2301      	movs	r3, #1
1a000a32:	788a      	ldrb	r2, [r1, #2]
1a000a34:	7849      	ldrb	r1, [r1, #1]
1a000a36:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000a3a:	f000 fb43 	bl	1a0010c4 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000a3e:	3401      	adds	r4, #1
1a000a40:	e7e8      	b.n	1a000a14 <Board_SetupClocking+0x30>
1a000a42:	bf00      	nop
1a000a44:	40043000 	.word	0x40043000
1a000a48:	0c28cb00 	.word	0x0c28cb00
1a000a4c:	1a001c30 	.word	0x1a001c30

1a000a50 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000a50:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000a52:	f7ff ffab 	bl	1a0009ac <Board_SetupMuxing>
    Board_SetupClocking();
1a000a56:	f7ff ffc5 	bl	1a0009e4 <Board_SetupClocking>
}
1a000a5a:	bd08      	pop	{r3, pc}

1a000a5c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000a5c:	4b09      	ldr	r3, [pc, #36]	; (1a000a84 <Chip_UART_GetIndex+0x28>)
1a000a5e:	4298      	cmp	r0, r3
1a000a60:	d009      	beq.n	1a000a76 <Chip_UART_GetIndex+0x1a>
1a000a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000a66:	4298      	cmp	r0, r3
1a000a68:	d007      	beq.n	1a000a7a <Chip_UART_GetIndex+0x1e>
1a000a6a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000a6e:	4298      	cmp	r0, r3
1a000a70:	d005      	beq.n	1a000a7e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000a72:	2000      	movs	r0, #0
1a000a74:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000a76:	2002      	movs	r0, #2
1a000a78:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000a7a:	2003      	movs	r0, #3
1a000a7c:	4770      	bx	lr
			return 1;
1a000a7e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000a80:	4770      	bx	lr
1a000a82:	bf00      	nop
1a000a84:	400c1000 	.word	0x400c1000

1a000a88 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000a88:	b530      	push	{r4, r5, lr}
1a000a8a:	b083      	sub	sp, #12
1a000a8c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000a8e:	f7ff ffe5 	bl	1a000a5c <Chip_UART_GetIndex>
1a000a92:	2301      	movs	r3, #1
1a000a94:	461a      	mov	r2, r3
1a000a96:	4619      	mov	r1, r3
1a000a98:	4d0e      	ldr	r5, [pc, #56]	; (1a000ad4 <Chip_UART_Init+0x4c>)
1a000a9a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000a9e:	f000 fb57 	bl	1a001150 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000aa2:	2307      	movs	r3, #7
1a000aa4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000aa6:	2300      	movs	r3, #0
1a000aa8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000aaa:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000aac:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000aae:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000ab0:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000ab2:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000ab4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000ab6:	4b08      	ldr	r3, [pc, #32]	; (1a000ad8 <Chip_UART_Init+0x50>)
1a000ab8:	429c      	cmp	r4, r3
1a000aba:	d006      	beq.n	1a000aca <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000abc:	2303      	movs	r3, #3
1a000abe:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000ac0:	2310      	movs	r3, #16
1a000ac2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000ac4:	9b01      	ldr	r3, [sp, #4]
}
1a000ac6:	b003      	add	sp, #12
1a000ac8:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000aca:	2300      	movs	r3, #0
1a000acc:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000ace:	69a3      	ldr	r3, [r4, #24]
1a000ad0:	9301      	str	r3, [sp, #4]
1a000ad2:	e7f3      	b.n	1a000abc <Chip_UART_Init+0x34>
1a000ad4:	1a001cb0 	.word	0x1a001cb0
1a000ad8:	40082000 	.word	0x40082000

1a000adc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000ae0:	b083      	sub	sp, #12
1a000ae2:	9001      	str	r0, [sp, #4]
1a000ae4:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000ae6:	f7ff ffb9 	bl	1a000a5c <Chip_UART_GetIndex>
1a000aea:	4b32      	ldr	r3, [pc, #200]	; (1a000bb4 <Chip_UART_SetBaudFDR+0xd8>)
1a000aec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000af0:	f000 fb66 	bl	1a0011c0 <Chip_Clock_GetRate>
1a000af4:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000af6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000afa:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000afc:	f04f 0b00 	mov.w	fp, #0
1a000b00:	46a2      	mov	sl, r4
1a000b02:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000b04:	e02a      	b.n	1a000b5c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000b06:	4242      	negs	r2, r0
				div ++;
1a000b08:	1c4b      	adds	r3, r1, #1
1a000b0a:	e017      	b.n	1a000b3c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000b0c:	b30a      	cbz	r2, 1a000b52 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000b0e:	4617      	mov	r7, r2
			sd = d;
1a000b10:	46ab      	mov	fp, r5
			sm = m;
1a000b12:	46a2      	mov	sl, r4
			sdiv = div;
1a000b14:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000b16:	3501      	adds	r5, #1
1a000b18:	42ac      	cmp	r4, r5
1a000b1a:	d91e      	bls.n	1a000b5a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000b1c:	0933      	lsrs	r3, r6, #4
1a000b1e:	0730      	lsls	r0, r6, #28
1a000b20:	fba4 0100 	umull	r0, r1, r4, r0
1a000b24:	fb04 1103 	mla	r1, r4, r3, r1
1a000b28:	1962      	adds	r2, r4, r5
1a000b2a:	fb08 f202 	mul.w	r2, r8, r2
1a000b2e:	2300      	movs	r3, #0
1a000b30:	f000 feb8 	bl	1a0018a4 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000b34:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000b36:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000b38:	2800      	cmp	r0, #0
1a000b3a:	dbe4      	blt.n	1a000b06 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000b3c:	4297      	cmp	r7, r2
1a000b3e:	d3ea      	bcc.n	1a000b16 <Chip_UART_SetBaudFDR+0x3a>
1a000b40:	2b00      	cmp	r3, #0
1a000b42:	d0e8      	beq.n	1a000b16 <Chip_UART_SetBaudFDR+0x3a>
1a000b44:	0c19      	lsrs	r1, r3, #16
1a000b46:	d1e6      	bne.n	1a000b16 <Chip_UART_SetBaudFDR+0x3a>
1a000b48:	2b02      	cmp	r3, #2
1a000b4a:	d8df      	bhi.n	1a000b0c <Chip_UART_SetBaudFDR+0x30>
1a000b4c:	2d00      	cmp	r5, #0
1a000b4e:	d0dd      	beq.n	1a000b0c <Chip_UART_SetBaudFDR+0x30>
1a000b50:	e7e1      	b.n	1a000b16 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000b52:	4617      	mov	r7, r2
			sd = d;
1a000b54:	46ab      	mov	fp, r5
			sm = m;
1a000b56:	46a2      	mov	sl, r4
			sdiv = div;
1a000b58:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000b5a:	3401      	adds	r4, #1
1a000b5c:	b11f      	cbz	r7, 1a000b66 <Chip_UART_SetBaudFDR+0x8a>
1a000b5e:	2c0f      	cmp	r4, #15
1a000b60:	d801      	bhi.n	1a000b66 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000b62:	2500      	movs	r5, #0
1a000b64:	e7d8      	b.n	1a000b18 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000b66:	f1b9 0f00 	cmp.w	r9, #0
1a000b6a:	d01e      	beq.n	1a000baa <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000b6c:	9a01      	ldr	r2, [sp, #4]
1a000b6e:	4611      	mov	r1, r2
1a000b70:	68d3      	ldr	r3, [r2, #12]
1a000b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000b76:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000b78:	fa5f f389 	uxtb.w	r3, r9
1a000b7c:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000b7e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000b82:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000b84:	68d3      	ldr	r3, [r2, #12]
1a000b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000b8a:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000b8c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000b90:	b2db      	uxtb	r3, r3
1a000b92:	f00b 020f 	and.w	r2, fp, #15
1a000b96:	4313      	orrs	r3, r2
1a000b98:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000b9a:	0933      	lsrs	r3, r6, #4
1a000b9c:	fb0a f303 	mul.w	r3, sl, r3
1a000ba0:	44da      	add	sl, fp
1a000ba2:	fb09 f90a 	mul.w	r9, r9, sl
1a000ba6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000baa:	4648      	mov	r0, r9
1a000bac:	b003      	add	sp, #12
1a000bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000bb2:	bf00      	nop
1a000bb4:	1a001ca8 	.word	0x1a001ca8

1a000bb8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000bb8:	4b03      	ldr	r3, [pc, #12]	; (1a000bc8 <Chip_ADC_GetClockIndex+0x10>)
1a000bba:	4298      	cmp	r0, r3
1a000bbc:	d001      	beq.n	1a000bc2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000bbe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000bc0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000bc2:	2004      	movs	r0, #4
1a000bc4:	4770      	bx	lr
1a000bc6:	bf00      	nop
1a000bc8:	400e4000 	.word	0x400e4000

1a000bcc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000bcc:	b570      	push	{r4, r5, r6, lr}
1a000bce:	460d      	mov	r5, r1
1a000bd0:	4614      	mov	r4, r2
1a000bd2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000bd4:	f7ff fff0 	bl	1a000bb8 <Chip_ADC_GetClockIndex>
1a000bd8:	f000 faf2 	bl	1a0011c0 <Chip_Clock_GetRate>
	if (burstMode) {
1a000bdc:	b155      	cbz	r5, 1a000bf4 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000bde:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000be2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000be6:	0064      	lsls	r4, r4, #1
1a000be8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000bec:	b2c0      	uxtb	r0, r0
1a000bee:	3801      	subs	r0, #1
	return div;
}
1a000bf0:	b2c0      	uxtb	r0, r0
1a000bf2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000bf4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000bf8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000bfc:	e7f1      	b.n	1a000be2 <getClkDiv+0x16>
1a000bfe:	Address 0x000000001a000bfe is out of bounds.


1a000c00 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000c00:	b538      	push	{r3, r4, r5, lr}
1a000c02:	4605      	mov	r5, r0
1a000c04:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000c06:	f7ff ffd7 	bl	1a000bb8 <Chip_ADC_GetClockIndex>
1a000c0a:	2301      	movs	r3, #1
1a000c0c:	461a      	mov	r2, r3
1a000c0e:	4619      	mov	r1, r3
1a000c10:	f000 fa9e 	bl	1a001150 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000c14:	2100      	movs	r1, #0
1a000c16:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000c18:	4a08      	ldr	r2, [pc, #32]	; (1a000c3c <Chip_ADC_Init+0x3c>)
1a000c1a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000c1c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000c1e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000c20:	230b      	movs	r3, #11
1a000c22:	4628      	mov	r0, r5
1a000c24:	f7ff ffd2 	bl	1a000bcc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c28:	0200      	lsls	r0, r0, #8
1a000c2a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c2e:	7920      	ldrb	r0, [r4, #4]
1a000c30:	0440      	lsls	r0, r0, #17
1a000c32:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000c36:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000c38:	6028      	str	r0, [r5, #0]
}
1a000c3a:	bd38      	pop	{r3, r4, r5, pc}
1a000c3c:	00061a80 	.word	0x00061a80

1a000c40 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000c40:	b570      	push	{r4, r5, r6, lr}
1a000c42:	4605      	mov	r5, r0
1a000c44:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000c46:	6804      	ldr	r4, [r0, #0]
1a000c48:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000c4c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000c50:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000c52:	790b      	ldrb	r3, [r1, #4]
1a000c54:	f1c3 030b 	rsb	r3, r3, #11
1a000c58:	b2db      	uxtb	r3, r3
1a000c5a:	7949      	ldrb	r1, [r1, #5]
1a000c5c:	f7ff ffb6 	bl	1a000bcc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c60:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c64:	7933      	ldrb	r3, [r6, #4]
1a000c66:	045b      	lsls	r3, r3, #17
1a000c68:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000c6c:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000c6e:	602b      	str	r3, [r5, #0]
}
1a000c70:	bd70      	pop	{r4, r5, r6, pc}

1a000c72 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000c72:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000c74:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000c76:	680a      	ldr	r2, [r1, #0]
1a000c78:	f7ff ffe2 	bl	1a000c40 <Chip_ADC_SetSampleRate>
}
1a000c7c:	bd08      	pop	{r3, pc}
1a000c7e:	Address 0x000000001a000c7e is out of bounds.


1a000c80 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000c80:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000c82:	680b      	ldr	r3, [r1, #0]
1a000c84:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000c88:	d002      	beq.n	1a000c90 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000c8e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000c90:	4607      	mov	r7, r0
1a000c92:	2501      	movs	r5, #1
1a000c94:	e03a      	b.n	1a000d0c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000c96:	694b      	ldr	r3, [r1, #20]
1a000c98:	fb03 f302 	mul.w	r3, r3, r2
1a000c9c:	fbb3 f3f5 	udiv	r3, r3, r5
1a000ca0:	e01c      	b.n	1a000cdc <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000ca2:	461c      	mov	r4, r3
	if (val < 0)
1a000ca4:	ebb0 0c04 	subs.w	ip, r0, r4
1a000ca8:	d427      	bmi.n	1a000cfa <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000caa:	4567      	cmp	r7, ip
1a000cac:	d906      	bls.n	1a000cbc <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000cae:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000cb0:	1c77      	adds	r7, r6, #1
1a000cb2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000cb4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000cb6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000cb8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000cba:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000cbc:	3201      	adds	r2, #1
1a000cbe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000cc2:	dc1d      	bgt.n	1a000d00 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000cc4:	680c      	ldr	r4, [r1, #0]
1a000cc6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000cca:	d0e4      	beq.n	1a000c96 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000ccc:	1c73      	adds	r3, r6, #1
1a000cce:	fa02 fc03 	lsl.w	ip, r2, r3
1a000cd2:	694b      	ldr	r3, [r1, #20]
1a000cd4:	fb03 f30c 	mul.w	r3, r3, ip
1a000cd8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000cdc:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000d18 <pll_calc_divs+0x98>
1a000ce0:	4563      	cmp	r3, ip
1a000ce2:	d9eb      	bls.n	1a000cbc <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000ce4:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000d1c <pll_calc_divs+0x9c>
1a000ce8:	4563      	cmp	r3, ip
1a000cea:	d809      	bhi.n	1a000d00 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000cec:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000cf0:	d1d7      	bne.n	1a000ca2 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000cf2:	1c74      	adds	r4, r6, #1
1a000cf4:	fa23 f404 	lsr.w	r4, r3, r4
1a000cf8:	e7d4      	b.n	1a000ca4 <pll_calc_divs+0x24>
		return -val;
1a000cfa:	f1cc 0c00 	rsb	ip, ip, #0
1a000cfe:	e7d4      	b.n	1a000caa <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000d00:	3601      	adds	r6, #1
1a000d02:	2e03      	cmp	r6, #3
1a000d04:	dc01      	bgt.n	1a000d0a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000d06:	2201      	movs	r2, #1
1a000d08:	e7d9      	b.n	1a000cbe <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000d0a:	3501      	adds	r5, #1
1a000d0c:	2d04      	cmp	r5, #4
1a000d0e:	dc01      	bgt.n	1a000d14 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000d10:	2600      	movs	r6, #0
1a000d12:	e7f6      	b.n	1a000d02 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000d14:	bcf0      	pop	{r4, r5, r6, r7}
1a000d16:	4770      	bx	lr
1a000d18:	094c5eff 	.word	0x094c5eff
1a000d1c:	1312d000 	.word	0x1312d000

1a000d20 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d22:	b099      	sub	sp, #100	; 0x64
1a000d24:	4605      	mov	r5, r0
1a000d26:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000d28:	225c      	movs	r2, #92	; 0x5c
1a000d2a:	2100      	movs	r1, #0
1a000d2c:	a801      	add	r0, sp, #4
1a000d2e:	f000 ff5f 	bl	1a001bf0 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000d32:	2380      	movs	r3, #128	; 0x80
1a000d34:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000d36:	6963      	ldr	r3, [r4, #20]
1a000d38:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000d3a:	7923      	ldrb	r3, [r4, #4]
1a000d3c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000d40:	4669      	mov	r1, sp
1a000d42:	4628      	mov	r0, r5
1a000d44:	f7ff ff9c 	bl	1a000c80 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000d48:	9b06      	ldr	r3, [sp, #24]
1a000d4a:	42ab      	cmp	r3, r5
1a000d4c:	d027      	beq.n	1a000d9e <pll_get_frac+0x7e>
	if (val < 0)
1a000d4e:	1aeb      	subs	r3, r5, r3
1a000d50:	d42e      	bmi.n	1a000db0 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000d52:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000d5a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000d5c:	6963      	ldr	r3, [r4, #20]
1a000d5e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000d60:	7923      	ldrb	r3, [r4, #4]
1a000d62:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000d66:	a910      	add	r1, sp, #64	; 0x40
1a000d68:	4628      	mov	r0, r5
1a000d6a:	f7ff ff89 	bl	1a000c80 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000d6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000d70:	42ab      	cmp	r3, r5
1a000d72:	d01f      	beq.n	1a000db4 <pll_get_frac+0x94>
	if (val < 0)
1a000d74:	1aeb      	subs	r3, r5, r3
1a000d76:	d425      	bmi.n	1a000dc4 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000d78:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000d7a:	4b2b      	ldr	r3, [pc, #172]	; (1a000e28 <pll_get_frac+0x108>)
1a000d7c:	429d      	cmp	r5, r3
1a000d7e:	d923      	bls.n	1a000dc8 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000d82:	1aed      	subs	r5, r5, r3
1a000d84:	d433      	bmi.n	1a000dee <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000d86:	42ae      	cmp	r6, r5
1a000d88:	dc3b      	bgt.n	1a000e02 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000d8a:	42be      	cmp	r6, r7
1a000d8c:	dc31      	bgt.n	1a000df2 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000d8e:	466d      	mov	r5, sp
1a000d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d9c:	e006      	b.n	1a000dac <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000d9e:	466d      	mov	r5, sp
1a000da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000da4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000dac:	b019      	add	sp, #100	; 0x64
1a000dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000db0:	425b      	negs	r3, r3
1a000db2:	e7ce      	b.n	1a000d52 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000db4:	ad10      	add	r5, sp, #64	; 0x40
1a000db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000dba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000dc2:	e7f3      	b.n	1a000dac <pll_get_frac+0x8c>
		return -val;
1a000dc4:	425b      	negs	r3, r3
1a000dc6:	e7d7      	b.n	1a000d78 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000dc8:	2340      	movs	r3, #64	; 0x40
1a000dca:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000dcc:	6963      	ldr	r3, [r4, #20]
1a000dce:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000dd0:	a908      	add	r1, sp, #32
1a000dd2:	4628      	mov	r0, r5
1a000dd4:	f7ff ff54 	bl	1a000c80 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000dda:	42ab      	cmp	r3, r5
1a000ddc:	d1d0      	bne.n	1a000d80 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000dde:	ad08      	add	r5, sp, #32
1a000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000de4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000dec:	e7de      	b.n	1a000dac <pll_get_frac+0x8c>
		return -val;
1a000dee:	426d      	negs	r5, r5
1a000df0:	e7c9      	b.n	1a000d86 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000df2:	ad10      	add	r5, sp, #64	; 0x40
1a000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000df8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e00:	e7d4      	b.n	1a000dac <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000e02:	42af      	cmp	r7, r5
1a000e04:	db07      	blt.n	1a000e16 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000e06:	ad08      	add	r5, sp, #32
1a000e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e14:	e7ca      	b.n	1a000dac <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000e16:	ad10      	add	r5, sp, #64	; 0x40
1a000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e24:	e7c2      	b.n	1a000dac <pll_get_frac+0x8c>
1a000e26:	bf00      	nop
1a000e28:	068e7780 	.word	0x068e7780

1a000e2c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000e2c:	b430      	push	{r4, r5}
1a000e2e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000e30:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000e32:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000e34:	e000      	b.n	1a000e38 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000e36:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000e38:	281c      	cmp	r0, #28
1a000e3a:	d118      	bne.n	1a000e6e <Chip_Clock_FindBaseClock+0x42>
1a000e3c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000e40:	0051      	lsls	r1, r2, #1
1a000e42:	4a0c      	ldr	r2, [pc, #48]	; (1a000e74 <Chip_Clock_FindBaseClock+0x48>)
1a000e44:	440a      	add	r2, r1
1a000e46:	7914      	ldrb	r4, [r2, #4]
1a000e48:	4284      	cmp	r4, r0
1a000e4a:	d010      	beq.n	1a000e6e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000e4c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000e50:	004a      	lsls	r2, r1, #1
1a000e52:	4908      	ldr	r1, [pc, #32]	; (1a000e74 <Chip_Clock_FindBaseClock+0x48>)
1a000e54:	5a8a      	ldrh	r2, [r1, r2]
1a000e56:	42aa      	cmp	r2, r5
1a000e58:	d8ed      	bhi.n	1a000e36 <Chip_Clock_FindBaseClock+0xa>
1a000e5a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000e5e:	0051      	lsls	r1, r2, #1
1a000e60:	4a04      	ldr	r2, [pc, #16]	; (1a000e74 <Chip_Clock_FindBaseClock+0x48>)
1a000e62:	440a      	add	r2, r1
1a000e64:	8852      	ldrh	r2, [r2, #2]
1a000e66:	42aa      	cmp	r2, r5
1a000e68:	d3e5      	bcc.n	1a000e36 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000e6a:	4620      	mov	r0, r4
1a000e6c:	e7e4      	b.n	1a000e38 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000e6e:	bc30      	pop	{r4, r5}
1a000e70:	4770      	bx	lr
1a000e72:	bf00      	nop
1a000e74:	1a001cc4 	.word	0x1a001cc4

1a000e78 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000e78:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000e7e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000e80:	4a0d      	ldr	r2, [pc, #52]	; (1a000eb8 <Chip_Clock_EnableCrystal+0x40>)
1a000e82:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000e84:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000e88:	6992      	ldr	r2, [r2, #24]
1a000e8a:	428a      	cmp	r2, r1
1a000e8c:	d001      	beq.n	1a000e92 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000e8e:	4a0a      	ldr	r2, [pc, #40]	; (1a000eb8 <Chip_Clock_EnableCrystal+0x40>)
1a000e90:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000e92:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000e96:	4a09      	ldr	r2, [pc, #36]	; (1a000ebc <Chip_Clock_EnableCrystal+0x44>)
1a000e98:	6811      	ldr	r1, [r2, #0]
1a000e9a:	4a09      	ldr	r2, [pc, #36]	; (1a000ec0 <Chip_Clock_EnableCrystal+0x48>)
1a000e9c:	4291      	cmp	r1, r2
1a000e9e:	d901      	bls.n	1a000ea4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000ea0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ea4:	4a04      	ldr	r2, [pc, #16]	; (1a000eb8 <Chip_Clock_EnableCrystal+0x40>)
1a000ea6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000ea8:	9b01      	ldr	r3, [sp, #4]
1a000eaa:	1e5a      	subs	r2, r3, #1
1a000eac:	9201      	str	r2, [sp, #4]
1a000eae:	2b00      	cmp	r3, #0
1a000eb0:	d1fa      	bne.n	1a000ea8 <Chip_Clock_EnableCrystal+0x30>
}
1a000eb2:	b002      	add	sp, #8
1a000eb4:	4770      	bx	lr
1a000eb6:	bf00      	nop
1a000eb8:	40050000 	.word	0x40050000
1a000ebc:	1a001c2c 	.word	0x1a001c2c
1a000ec0:	01312cff 	.word	0x01312cff

1a000ec4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000ec4:	3012      	adds	r0, #18
1a000ec6:	4b05      	ldr	r3, [pc, #20]	; (1a000edc <Chip_Clock_GetDividerSource+0x18>)
1a000ec8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000ecc:	f010 0f01 	tst.w	r0, #1
1a000ed0:	d102      	bne.n	1a000ed8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000ed2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000ed6:	4770      	bx	lr
		return CLKINPUT_PD;
1a000ed8:	2011      	movs	r0, #17
}
1a000eda:	4770      	bx	lr
1a000edc:	40050000 	.word	0x40050000

1a000ee0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000ee0:	f100 0212 	add.w	r2, r0, #18
1a000ee4:	4b03      	ldr	r3, [pc, #12]	; (1a000ef4 <Chip_Clock_GetDividerDivisor+0x14>)
1a000ee6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000eea:	4b03      	ldr	r3, [pc, #12]	; (1a000ef8 <Chip_Clock_GetDividerDivisor+0x18>)
1a000eec:	5c18      	ldrb	r0, [r3, r0]
}
1a000eee:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000ef2:	4770      	bx	lr
1a000ef4:	40050000 	.word	0x40050000
1a000ef8:	1a001cbc 	.word	0x1a001cbc

1a000efc <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000efc:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000efe:	2810      	cmp	r0, #16
1a000f00:	d80a      	bhi.n	1a000f18 <Chip_Clock_GetClockInputHz+0x1c>
1a000f02:	e8df f000 	tbb	[pc, r0]
1a000f06:	0b44      	.short	0x0b44
1a000f08:	0921180d 	.word	0x0921180d
1a000f0c:	2d2a2724 	.word	0x2d2a2724
1a000f10:	34300909 	.word	0x34300909
1a000f14:	3c38      	.short	0x3c38
1a000f16:	40          	.byte	0x40
1a000f17:	00          	.byte	0x00
	uint32_t rate = 0;
1a000f18:	2000      	movs	r0, #0
1a000f1a:	e03a      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000f1c:	481e      	ldr	r0, [pc, #120]	; (1a000f98 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000f1e:	e038      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f20:	4b1e      	ldr	r3, [pc, #120]	; (1a000f9c <Chip_Clock_GetClockInputHz+0xa0>)
1a000f22:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f26:	f003 0307 	and.w	r3, r3, #7
1a000f2a:	2b04      	cmp	r3, #4
1a000f2c:	d001      	beq.n	1a000f32 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000f2e:	481c      	ldr	r0, [pc, #112]	; (1a000fa0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000f30:	e02f      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000f32:	2000      	movs	r0, #0
1a000f34:	e02d      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f36:	4b19      	ldr	r3, [pc, #100]	; (1a000f9c <Chip_Clock_GetClockInputHz+0xa0>)
1a000f38:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f3c:	f003 0307 	and.w	r3, r3, #7
1a000f40:	2b04      	cmp	r3, #4
1a000f42:	d027      	beq.n	1a000f94 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000f44:	4816      	ldr	r0, [pc, #88]	; (1a000fa0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000f46:	e024      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000f48:	4b16      	ldr	r3, [pc, #88]	; (1a000fa4 <Chip_Clock_GetClockInputHz+0xa8>)
1a000f4a:	6818      	ldr	r0, [r3, #0]
		break;
1a000f4c:	e021      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000f4e:	4b16      	ldr	r3, [pc, #88]	; (1a000fa8 <Chip_Clock_GetClockInputHz+0xac>)
1a000f50:	6818      	ldr	r0, [r3, #0]
		break;
1a000f52:	e01e      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000f54:	4b15      	ldr	r3, [pc, #84]	; (1a000fac <Chip_Clock_GetClockInputHz+0xb0>)
1a000f56:	6818      	ldr	r0, [r3, #0]
		break;
1a000f58:	e01b      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000f5a:	4b14      	ldr	r3, [pc, #80]	; (1a000fac <Chip_Clock_GetClockInputHz+0xb0>)
1a000f5c:	6858      	ldr	r0, [r3, #4]
		break;
1a000f5e:	e018      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000f60:	f000 f868 	bl	1a001034 <Chip_Clock_GetMainPLLHz>
		break;
1a000f64:	e015      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000f66:	2100      	movs	r1, #0
1a000f68:	f000 f89a 	bl	1a0010a0 <Chip_Clock_GetDivRate>
		break;
1a000f6c:	e011      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000f6e:	2101      	movs	r1, #1
1a000f70:	f000 f896 	bl	1a0010a0 <Chip_Clock_GetDivRate>
		break;
1a000f74:	e00d      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000f76:	2102      	movs	r1, #2
1a000f78:	f000 f892 	bl	1a0010a0 <Chip_Clock_GetDivRate>
		break;
1a000f7c:	e009      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000f7e:	2103      	movs	r1, #3
1a000f80:	f000 f88e 	bl	1a0010a0 <Chip_Clock_GetDivRate>
		break;
1a000f84:	e005      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000f86:	2104      	movs	r1, #4
1a000f88:	f000 f88a 	bl	1a0010a0 <Chip_Clock_GetDivRate>
		break;
1a000f8c:	e001      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000f8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000f92:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000f94:	4806      	ldr	r0, [pc, #24]	; (1a000fb0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000f96:	e7fc      	b.n	1a000f92 <Chip_Clock_GetClockInputHz+0x96>
1a000f98:	00b71b00 	.word	0x00b71b00
1a000f9c:	40043000 	.word	0x40043000
1a000fa0:	017d7840 	.word	0x017d7840
1a000fa4:	1a001c00 	.word	0x1a001c00
1a000fa8:	1a001c2c 	.word	0x1a001c2c
1a000fac:	10000038 	.word	0x10000038
1a000fb0:	02faf080 	.word	0x02faf080

1a000fb4 <Chip_Clock_CalcMainPLLValue>:
{
1a000fb4:	b538      	push	{r3, r4, r5, lr}
1a000fb6:	4605      	mov	r5, r0
1a000fb8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000fba:	7908      	ldrb	r0, [r1, #4]
1a000fbc:	f7ff ff9e 	bl	1a000efc <Chip_Clock_GetClockInputHz>
1a000fc0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000fc2:	4b19      	ldr	r3, [pc, #100]	; (1a001028 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000fc4:	442b      	add	r3, r5
1a000fc6:	4a19      	ldr	r2, [pc, #100]	; (1a00102c <Chip_Clock_CalcMainPLLValue+0x78>)
1a000fc8:	4293      	cmp	r3, r2
1a000fca:	d821      	bhi.n	1a001010 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000fcc:	b318      	cbz	r0, 1a001016 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000fce:	2380      	movs	r3, #128	; 0x80
1a000fd0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000fd2:	2300      	movs	r3, #0
1a000fd4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000fd6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000fd8:	fbb5 f3f0 	udiv	r3, r5, r0
1a000fdc:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000fde:	4a14      	ldr	r2, [pc, #80]	; (1a001030 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000fe0:	4295      	cmp	r5, r2
1a000fe2:	d903      	bls.n	1a000fec <Chip_Clock_CalcMainPLLValue+0x38>
1a000fe4:	fb03 f000 	mul.w	r0, r3, r0
1a000fe8:	42a8      	cmp	r0, r5
1a000fea:	d007      	beq.n	1a000ffc <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000fec:	4621      	mov	r1, r4
1a000fee:	4628      	mov	r0, r5
1a000ff0:	f7ff fe96 	bl	1a000d20 <pll_get_frac>
		if (!ppll->nsel) {
1a000ff4:	68a3      	ldr	r3, [r4, #8]
1a000ff6:	b18b      	cbz	r3, 1a00101c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000ff8:	3b01      	subs	r3, #1
1a000ffa:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000ffc:	6923      	ldr	r3, [r4, #16]
1a000ffe:	b183      	cbz	r3, 1a001022 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001000:	68e2      	ldr	r2, [r4, #12]
1a001002:	b10a      	cbz	r2, 1a001008 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001004:	3a01      	subs	r2, #1
1a001006:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001008:	3b01      	subs	r3, #1
1a00100a:	6123      	str	r3, [r4, #16]
	return 0;
1a00100c:	2000      	movs	r0, #0
}
1a00100e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001014:	e7fb      	b.n	1a00100e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00101a:	e7f8      	b.n	1a00100e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a00101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001020:	e7f5      	b.n	1a00100e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001026:	e7f2      	b.n	1a00100e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001028:	ff6b3a10 	.word	0xff6b3a10
1a00102c:	0b940510 	.word	0x0b940510
1a001030:	094c5eff 	.word	0x094c5eff

1a001034 <Chip_Clock_GetMainPLLHz>:
{
1a001034:	b530      	push	{r4, r5, lr}
1a001036:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001038:	4d17      	ldr	r5, [pc, #92]	; (1a001098 <Chip_Clock_GetMainPLLHz+0x64>)
1a00103a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00103c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001040:	f7ff ff5c 	bl	1a000efc <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001044:	4b15      	ldr	r3, [pc, #84]	; (1a00109c <Chip_Clock_GetMainPLLHz+0x68>)
1a001046:	681b      	ldr	r3, [r3, #0]
1a001048:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00104a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00104c:	f013 0f01 	tst.w	r3, #1
1a001050:	d020      	beq.n	1a001094 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001052:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001056:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00105a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00105e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001062:	3301      	adds	r3, #1
	n = nsel + 1;
1a001064:	3201      	adds	r2, #1
	p = ptab[psel];
1a001066:	f10d 0c08 	add.w	ip, sp, #8
1a00106a:	4461      	add	r1, ip
1a00106c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001070:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001074:	d108      	bne.n	1a001088 <Chip_Clock_GetMainPLLHz+0x54>
1a001076:	b93d      	cbnz	r5, 1a001088 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001078:	0049      	lsls	r1, r1, #1
1a00107a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00107e:	fbb0 f0f2 	udiv	r0, r0, r2
1a001082:	fb00 f003 	mul.w	r0, r0, r3
1a001086:	e003      	b.n	1a001090 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001088:	fbb0 f0f2 	udiv	r0, r0, r2
1a00108c:	fb03 f000 	mul.w	r0, r3, r0
}
1a001090:	b003      	add	sp, #12
1a001092:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001094:	2000      	movs	r0, #0
1a001096:	e7fb      	b.n	1a001090 <Chip_Clock_GetMainPLLHz+0x5c>
1a001098:	40050000 	.word	0x40050000
1a00109c:	1a001cb8 	.word	0x1a001cb8

1a0010a0 <Chip_Clock_GetDivRate>:
{
1a0010a0:	b538      	push	{r3, r4, r5, lr}
1a0010a2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0010a4:	4608      	mov	r0, r1
1a0010a6:	f7ff ff0d 	bl	1a000ec4 <Chip_Clock_GetDividerSource>
1a0010aa:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0010ac:	4620      	mov	r0, r4
1a0010ae:	f7ff ff17 	bl	1a000ee0 <Chip_Clock_GetDividerDivisor>
1a0010b2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0010b4:	4628      	mov	r0, r5
1a0010b6:	f7ff ff21 	bl	1a000efc <Chip_Clock_GetClockInputHz>
1a0010ba:	3401      	adds	r4, #1
}
1a0010bc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0010c0:	bd38      	pop	{r3, r4, r5, pc}
1a0010c2:	Address 0x000000001a0010c2 is out of bounds.


1a0010c4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0010c4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0010c6:	f100 0416 	add.w	r4, r0, #22
1a0010ca:	00a4      	lsls	r4, r4, #2
1a0010cc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0010d0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0010d4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0010d6:	281b      	cmp	r0, #27
1a0010d8:	d813      	bhi.n	1a001102 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0010da:	2911      	cmp	r1, #17
1a0010dc:	d01a      	beq.n	1a001114 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0010de:	4d0e      	ldr	r5, [pc, #56]	; (1a001118 <Chip_Clock_SetBaseClock+0x54>)
1a0010e0:	4025      	ands	r5, r4

			if (autoblocken) {
1a0010e2:	b10a      	cbz	r2, 1a0010e8 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0010e4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0010e8:	b10b      	cbz	r3, 1a0010ee <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0010ea:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0010ee:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0010f2:	3016      	adds	r0, #22
1a0010f4:	0080      	lsls	r0, r0, #2
1a0010f6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0010fa:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0010fe:	6045      	str	r5, [r0, #4]
1a001100:	e008      	b.n	1a001114 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001102:	f044 0401 	orr.w	r4, r4, #1
1a001106:	3016      	adds	r0, #22
1a001108:	0080      	lsls	r0, r0, #2
1a00110a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00110e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001112:	6044      	str	r4, [r0, #4]
	}
}
1a001114:	bc30      	pop	{r4, r5}
1a001116:	4770      	bx	lr
1a001118:	e0fff7fe 	.word	0xe0fff7fe

1a00111c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00111c:	281b      	cmp	r0, #27
1a00111e:	d80c      	bhi.n	1a00113a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001120:	3016      	adds	r0, #22
1a001122:	0080      	lsls	r0, r0, #2
1a001124:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001128:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00112c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00112e:	f010 0f01 	tst.w	r0, #1
1a001132:	d104      	bne.n	1a00113e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001134:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001138:	4770      	bx	lr
		return CLKINPUT_PD;
1a00113a:	2011      	movs	r0, #17
1a00113c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00113e:	2011      	movs	r0, #17
}
1a001140:	4770      	bx	lr

1a001142 <Chip_Clock_GetBaseClocktHz>:
{
1a001142:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001144:	f7ff ffea 	bl	1a00111c <Chip_Clock_GetBaseClock>
1a001148:	f7ff fed8 	bl	1a000efc <Chip_Clock_GetClockInputHz>
}
1a00114c:	bd08      	pop	{r3, pc}
1a00114e:	Address 0x000000001a00114e is out of bounds.


1a001150 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001150:	b971      	cbnz	r1, 1a001170 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001152:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001154:	b10a      	cbz	r2, 1a00115a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001156:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00115a:	2b02      	cmp	r3, #2
1a00115c:	d00a      	beq.n	1a001174 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00115e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001162:	d30a      	bcc.n	1a00117a <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001164:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001168:	4b06      	ldr	r3, [pc, #24]	; (1a001184 <Chip_Clock_EnableOpts+0x34>)
1a00116a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00116e:	4770      	bx	lr
		reg |= (1 << 1);
1a001170:	2103      	movs	r1, #3
1a001172:	e7ef      	b.n	1a001154 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001174:	f041 0120 	orr.w	r1, r1, #32
1a001178:	e7f1      	b.n	1a00115e <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00117a:	3020      	adds	r0, #32
1a00117c:	4b02      	ldr	r3, [pc, #8]	; (1a001188 <Chip_Clock_EnableOpts+0x38>)
1a00117e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001182:	4770      	bx	lr
1a001184:	40052000 	.word	0x40052000
1a001188:	40051000 	.word	0x40051000

1a00118c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00118c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001190:	d309      	bcc.n	1a0011a6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001192:	4a09      	ldr	r2, [pc, #36]	; (1a0011b8 <Chip_Clock_Enable+0x2c>)
1a001194:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001198:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00119c:	f043 0301 	orr.w	r3, r3, #1
1a0011a0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0011a4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0011a6:	4a05      	ldr	r2, [pc, #20]	; (1a0011bc <Chip_Clock_Enable+0x30>)
1a0011a8:	3020      	adds	r0, #32
1a0011aa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0011ae:	f043 0301 	orr.w	r3, r3, #1
1a0011b2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0011b6:	4770      	bx	lr
1a0011b8:	40052000 	.word	0x40052000
1a0011bc:	40051000 	.word	0x40051000

1a0011c0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0011c0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0011c2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0011c6:	d309      	bcc.n	1a0011dc <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0011c8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0011cc:	4a0d      	ldr	r2, [pc, #52]	; (1a001204 <Chip_Clock_GetRate+0x44>)
1a0011ce:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0011d2:	f014 0f01 	tst.w	r4, #1
1a0011d6:	d107      	bne.n	1a0011e8 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0011d8:	2000      	movs	r0, #0
	}

	return rate;
}
1a0011da:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0011dc:	f100 0320 	add.w	r3, r0, #32
1a0011e0:	4a09      	ldr	r2, [pc, #36]	; (1a001208 <Chip_Clock_GetRate+0x48>)
1a0011e2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0011e6:	e7f4      	b.n	1a0011d2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0011e8:	f7ff fe20 	bl	1a000e2c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0011ec:	f7ff ffa9 	bl	1a001142 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0011f0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0011f4:	d103      	bne.n	1a0011fe <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0011f6:	2301      	movs	r3, #1
		rate = rate / div;
1a0011f8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0011fc:	e7ed      	b.n	1a0011da <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0011fe:	2302      	movs	r3, #2
1a001200:	e7fa      	b.n	1a0011f8 <Chip_Clock_GetRate+0x38>
1a001202:	bf00      	nop
1a001204:	40052000 	.word	0x40052000
1a001208:	40051000 	.word	0x40051000

1a00120c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00120c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00120e:	2069      	movs	r0, #105	; 0x69
1a001210:	f7ff ffd6 	bl	1a0011c0 <Chip_Clock_GetRate>
1a001214:	4b01      	ldr	r3, [pc, #4]	; (1a00121c <SystemCoreClockUpdate+0x10>)
1a001216:	6018      	str	r0, [r3, #0]
}
1a001218:	bd08      	pop	{r3, pc}
1a00121a:	bf00      	nop
1a00121c:	10000058 	.word	0x10000058

1a001220 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001220:	b570      	push	{r4, r5, r6, lr}
1a001222:	b08a      	sub	sp, #40	; 0x28
1a001224:	4605      	mov	r5, r0
1a001226:	460e      	mov	r6, r1
1a001228:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00122a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00122e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001230:	2806      	cmp	r0, #6
1a001232:	d018      	beq.n	1a001266 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001234:	2300      	movs	r3, #0
1a001236:	2201      	movs	r2, #1
1a001238:	4629      	mov	r1, r5
1a00123a:	2004      	movs	r0, #4
1a00123c:	f7ff ff42 	bl	1a0010c4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001240:	4a4a      	ldr	r2, [pc, #296]	; (1a00136c <Chip_SetupCoreClock+0x14c>)
1a001242:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001244:	f043 0301 	orr.w	r3, r3, #1
1a001248:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00124a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00124e:	a901      	add	r1, sp, #4
1a001250:	4630      	mov	r0, r6
1a001252:	f7ff feaf 	bl	1a000fb4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001256:	4b46      	ldr	r3, [pc, #280]	; (1a001370 <Chip_SetupCoreClock+0x150>)
1a001258:	429e      	cmp	r6, r3
1a00125a:	d916      	bls.n	1a00128a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00125c:	9b01      	ldr	r3, [sp, #4]
1a00125e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001262:	d003      	beq.n	1a00126c <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001264:	e7fe      	b.n	1a001264 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001266:	f7ff fe07 	bl	1a000e78 <Chip_Clock_EnableCrystal>
1a00126a:	e7e3      	b.n	1a001234 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a00126c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001270:	d005      	beq.n	1a00127e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001276:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001278:	2500      	movs	r5, #0
			direct = 1;
1a00127a:	2601      	movs	r6, #1
1a00127c:	e007      	b.n	1a00128e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00127e:	9b04      	ldr	r3, [sp, #16]
1a001280:	3301      	adds	r3, #1
1a001282:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001284:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001286:	2600      	movs	r6, #0
1a001288:	e001      	b.n	1a00128e <Chip_SetupCoreClock+0x6e>
1a00128a:	2500      	movs	r5, #0
1a00128c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00128e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001292:	9b01      	ldr	r3, [sp, #4]
1a001294:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001298:	9a05      	ldr	r2, [sp, #20]
1a00129a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00129e:	9a03      	ldr	r2, [sp, #12]
1a0012a0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0012a4:	9a04      	ldr	r2, [sp, #16]
1a0012a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0012aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0012ae:	4a2f      	ldr	r2, [pc, #188]	; (1a00136c <Chip_SetupCoreClock+0x14c>)
1a0012b0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0012b2:	4b2e      	ldr	r3, [pc, #184]	; (1a00136c <Chip_SetupCoreClock+0x14c>)
1a0012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0012b6:	f013 0f01 	tst.w	r3, #1
1a0012ba:	d0fa      	beq.n	1a0012b2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0012bc:	2300      	movs	r3, #0
1a0012be:	2201      	movs	r2, #1
1a0012c0:	2109      	movs	r1, #9
1a0012c2:	2004      	movs	r0, #4
1a0012c4:	f7ff fefe 	bl	1a0010c4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0012c8:	b306      	cbz	r6, 1a00130c <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0012ca:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0012ce:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0012d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0012d2:	1e5a      	subs	r2, r3, #1
1a0012d4:	9209      	str	r2, [sp, #36]	; 0x24
1a0012d6:	2b00      	cmp	r3, #0
1a0012d8:	d1fa      	bne.n	1a0012d0 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0012da:	9b01      	ldr	r3, [sp, #4]
1a0012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0012e0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0012e2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0012e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0012ea:	9a05      	ldr	r2, [sp, #20]
1a0012ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0012f0:	9a03      	ldr	r2, [sp, #12]
1a0012f2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0012f6:	9a04      	ldr	r2, [sp, #16]
1a0012f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0012fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001300:	4a1a      	ldr	r2, [pc, #104]	; (1a00136c <Chip_SetupCoreClock+0x14c>)
1a001302:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001304:	2c00      	cmp	r4, #0
1a001306:	d12e      	bne.n	1a001366 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001308:	b00a      	add	sp, #40	; 0x28
1a00130a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a00130c:	2d00      	cmp	r5, #0
1a00130e:	d0f9      	beq.n	1a001304 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001310:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001314:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001316:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001318:	1e5a      	subs	r2, r3, #1
1a00131a:	9209      	str	r2, [sp, #36]	; 0x24
1a00131c:	2b00      	cmp	r3, #0
1a00131e:	d1fa      	bne.n	1a001316 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001320:	9b04      	ldr	r3, [sp, #16]
1a001322:	1e5a      	subs	r2, r3, #1
1a001324:	9204      	str	r2, [sp, #16]
1a001326:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00132a:	9b01      	ldr	r3, [sp, #4]
1a00132c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001330:	9905      	ldr	r1, [sp, #20]
1a001332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001336:	9903      	ldr	r1, [sp, #12]
1a001338:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00133c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001344:	4a09      	ldr	r2, [pc, #36]	; (1a00136c <Chip_SetupCoreClock+0x14c>)
1a001346:	6453      	str	r3, [r2, #68]	; 0x44
1a001348:	e7dc      	b.n	1a001304 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00134a:	480a      	ldr	r0, [pc, #40]	; (1a001374 <Chip_SetupCoreClock+0x154>)
1a00134c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001350:	78cb      	ldrb	r3, [r1, #3]
1a001352:	788a      	ldrb	r2, [r1, #2]
1a001354:	7849      	ldrb	r1, [r1, #1]
1a001356:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00135a:	f7ff feb3 	bl	1a0010c4 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00135e:	3401      	adds	r4, #1
1a001360:	2c11      	cmp	r4, #17
1a001362:	d9f2      	bls.n	1a00134a <Chip_SetupCoreClock+0x12a>
1a001364:	e7d0      	b.n	1a001308 <Chip_SetupCoreClock+0xe8>
1a001366:	2400      	movs	r4, #0
1a001368:	e7fa      	b.n	1a001360 <Chip_SetupCoreClock+0x140>
1a00136a:	bf00      	nop
1a00136c:	40050000 	.word	0x40050000
1a001370:	068e7780 	.word	0x068e7780
1a001374:	1a001d30 	.word	0x1a001d30

1a001378 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001378:	4770      	bx	lr
1a00137a:	Address 0x000000001a00137a is out of bounds.


1a00137c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00137c:	2901      	cmp	r1, #1
1a00137e:	d109      	bne.n	1a001394 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001380:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001384:	0082      	lsls	r2, r0, #2
1a001386:	4b04      	ldr	r3, [pc, #16]	; (1a001398 <Chip_I2C_EventHandler+0x1c>)
1a001388:	4413      	add	r3, r2
1a00138a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00138c:	7d13      	ldrb	r3, [r2, #20]
1a00138e:	b2db      	uxtb	r3, r3
1a001390:	2b04      	cmp	r3, #4
1a001392:	d0fb      	beq.n	1a00138c <Chip_I2C_EventHandler+0x10>
}
1a001394:	4770      	bx	lr
1a001396:	bf00      	nop
1a001398:	10000000 	.word	0x10000000

1a00139c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00139c:	b570      	push	{r4, r5, r6, lr}
1a00139e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0013a0:	4e06      	ldr	r6, [pc, #24]	; (1a0013bc <Chip_I2C_Init+0x20>)
1a0013a2:	00c4      	lsls	r4, r0, #3
1a0013a4:	1a22      	subs	r2, r4, r0
1a0013a6:	0093      	lsls	r3, r2, #2
1a0013a8:	4433      	add	r3, r6
1a0013aa:	8898      	ldrh	r0, [r3, #4]
1a0013ac:	f7ff feee 	bl	1a00118c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0013b0:	1b64      	subs	r4, r4, r5
1a0013b2:	00a3      	lsls	r3, r4, #2
1a0013b4:	58f3      	ldr	r3, [r6, r3]
1a0013b6:	226c      	movs	r2, #108	; 0x6c
1a0013b8:	619a      	str	r2, [r3, #24]
}
1a0013ba:	bd70      	pop	{r4, r5, r6, pc}
1a0013bc:	10000000 	.word	0x10000000

1a0013c0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0013c4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0013c6:	4e0b      	ldr	r6, [pc, #44]	; (1a0013f4 <Chip_I2C_SetClockRate+0x34>)
1a0013c8:	00c5      	lsls	r5, r0, #3
1a0013ca:	1a2b      	subs	r3, r5, r0
1a0013cc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0013d0:	eb06 0308 	add.w	r3, r6, r8
1a0013d4:	8898      	ldrh	r0, [r3, #4]
1a0013d6:	f7ff fef3 	bl	1a0011c0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0013da:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0013de:	f856 3008 	ldr.w	r3, [r6, r8]
1a0013e2:	0842      	lsrs	r2, r0, #1
1a0013e4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0013e6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0013ea:	691a      	ldr	r2, [r3, #16]
1a0013ec:	1a80      	subs	r0, r0, r2
1a0013ee:	6158      	str	r0, [r3, #20]
}
1a0013f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0013f4:	10000000 	.word	0x10000000

1a0013f8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0013f8:	4b03      	ldr	r3, [pc, #12]	; (1a001408 <Chip_SSP_GetClockIndex+0x10>)
1a0013fa:	4298      	cmp	r0, r3
1a0013fc:	d001      	beq.n	1a001402 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0013fe:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001400:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001402:	20a5      	movs	r0, #165	; 0xa5
1a001404:	4770      	bx	lr
1a001406:	bf00      	nop
1a001408:	400c5000 	.word	0x400c5000

1a00140c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00140c:	4b04      	ldr	r3, [pc, #16]	; (1a001420 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00140e:	4298      	cmp	r0, r3
1a001410:	d002      	beq.n	1a001418 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001412:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001416:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001418:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00141c:	4770      	bx	lr
1a00141e:	bf00      	nop
1a001420:	400c5000 	.word	0x400c5000

1a001424 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001424:	6803      	ldr	r3, [r0, #0]
1a001426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00142a:	0209      	lsls	r1, r1, #8
1a00142c:	b289      	uxth	r1, r1
1a00142e:	4319      	orrs	r1, r3
1a001430:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001432:	6102      	str	r2, [r0, #16]
}
1a001434:	4770      	bx	lr

1a001436 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001436:	b570      	push	{r4, r5, r6, lr}
1a001438:	4606      	mov	r6, r0
1a00143a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00143c:	f7ff ffe6 	bl	1a00140c <Chip_SSP_GetPeriphClockIndex>
1a001440:	f7ff febe 	bl	1a0011c0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001444:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00144a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00144c:	e000      	b.n	1a001450 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00144e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001450:	42ab      	cmp	r3, r5
1a001452:	d90b      	bls.n	1a00146c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001454:	1c4c      	adds	r4, r1, #1
1a001456:	fb02 f304 	mul.w	r3, r2, r4
1a00145a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00145e:	429d      	cmp	r5, r3
1a001460:	d2f6      	bcs.n	1a001450 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001462:	2cff      	cmp	r4, #255	; 0xff
1a001464:	d9f3      	bls.n	1a00144e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001466:	3202      	adds	r2, #2
				cr0_div = 0;
1a001468:	2100      	movs	r1, #0
1a00146a:	e7f1      	b.n	1a001450 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00146c:	4630      	mov	r0, r6
1a00146e:	f7ff ffd9 	bl	1a001424 <Chip_SSP_SetClockRate>
}
1a001472:	bd70      	pop	{r4, r5, r6, pc}

1a001474 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001474:	b510      	push	{r4, lr}
1a001476:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001478:	f7ff ffbe 	bl	1a0013f8 <Chip_SSP_GetClockIndex>
1a00147c:	f7ff fe86 	bl	1a00118c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001480:	4620      	mov	r0, r4
1a001482:	f7ff ffc3 	bl	1a00140c <Chip_SSP_GetPeriphClockIndex>
1a001486:	f7ff fe81 	bl	1a00118c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00148a:	6863      	ldr	r3, [r4, #4]
1a00148c:	f023 0304 	bic.w	r3, r3, #4
1a001490:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001492:	6823      	ldr	r3, [r4, #0]
1a001494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001498:	f043 0307 	orr.w	r3, r3, #7
1a00149c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00149e:	4902      	ldr	r1, [pc, #8]	; (1a0014a8 <Chip_SSP_Init+0x34>)
1a0014a0:	4620      	mov	r0, r4
1a0014a2:	f7ff ffc8 	bl	1a001436 <Chip_SSP_SetBitRate>
}
1a0014a6:	bd10      	pop	{r4, pc}
1a0014a8:	000186a0 	.word	0x000186a0

1a0014ac <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0014ac:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0014ae:	4a0b      	ldr	r2, [pc, #44]	; (1a0014dc <SystemInit+0x30>)
1a0014b0:	4b0b      	ldr	r3, [pc, #44]	; (1a0014e0 <SystemInit+0x34>)
1a0014b2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0014b4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0014b8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0014ba:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0014be:	2b20      	cmp	r3, #32
1a0014c0:	d004      	beq.n	1a0014cc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0014c2:	f7ff fac5 	bl	1a000a50 <Board_SystemInit>
   Board_Init();
1a0014c6:	f7ff fa43 	bl	1a000950 <Board_Init>
}
1a0014ca:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0014cc:	4a04      	ldr	r2, [pc, #16]	; (1a0014e0 <SystemInit+0x34>)
1a0014ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0014d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0014d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0014da:	e7f2      	b.n	1a0014c2 <SystemInit+0x16>
1a0014dc:	1a000000 	.word	0x1a000000
1a0014e0:	e000ed00 	.word	0xe000ed00

1a0014e4 <initialise_monitor_handles>:
}
1a0014e4:	4770      	bx	lr
1a0014e6:	Address 0x000000001a0014e6 is out of bounds.


1a0014e8 <Reset_Handler>:
void Reset_Handler(void) {
1a0014e8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0014ea:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0014ec:	4b19      	ldr	r3, [pc, #100]	; (1a001554 <Reset_Handler+0x6c>)
1a0014ee:	4a1a      	ldr	r2, [pc, #104]	; (1a001558 <Reset_Handler+0x70>)
1a0014f0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0014f2:	3304      	adds	r3, #4
1a0014f4:	4a19      	ldr	r2, [pc, #100]	; (1a00155c <Reset_Handler+0x74>)
1a0014f6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0014f8:	2300      	movs	r3, #0
1a0014fa:	e005      	b.n	1a001508 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0014fc:	4a18      	ldr	r2, [pc, #96]	; (1a001560 <Reset_Handler+0x78>)
1a0014fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001502:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001506:	3301      	adds	r3, #1
1a001508:	2b07      	cmp	r3, #7
1a00150a:	d9f7      	bls.n	1a0014fc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00150c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00150e:	4b15      	ldr	r3, [pc, #84]	; (1a001564 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001510:	e007      	b.n	1a001522 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a001512:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001516:	689a      	ldr	r2, [r3, #8]
1a001518:	6859      	ldr	r1, [r3, #4]
1a00151a:	6818      	ldr	r0, [r3, #0]
1a00151c:	f7fe fe36 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a001520:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001522:	4a11      	ldr	r2, [pc, #68]	; (1a001568 <Reset_Handler+0x80>)
1a001524:	4293      	cmp	r3, r2
1a001526:	d3f4      	bcc.n	1a001512 <Reset_Handler+0x2a>
1a001528:	e006      	b.n	1a001538 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00152a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00152c:	6859      	ldr	r1, [r3, #4]
1a00152e:	f854 0b08 	ldr.w	r0, [r4], #8
1a001532:	f7fe fe3a 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a001536:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001538:	4a0c      	ldr	r2, [pc, #48]	; (1a00156c <Reset_Handler+0x84>)
1a00153a:	4293      	cmp	r3, r2
1a00153c:	d3f5      	bcc.n	1a00152a <Reset_Handler+0x42>
    SystemInit();
1a00153e:	f7ff ffb5 	bl	1a0014ac <SystemInit>
    __libc_init_array();
1a001542:	f000 fb31 	bl	1a001ba8 <__libc_init_array>
    initialise_monitor_handles();
1a001546:	f7ff ffcd 	bl	1a0014e4 <initialise_monitor_handles>
    main();
1a00154a:	f000 f945 	bl	1a0017d8 <main>
        __asm__ volatile("wfi");
1a00154e:	bf30      	wfi
1a001550:	e7fd      	b.n	1a00154e <Reset_Handler+0x66>
1a001552:	bf00      	nop
1a001554:	40053100 	.word	0x40053100
1a001558:	10df1000 	.word	0x10df1000
1a00155c:	01dff7ff 	.word	0x01dff7ff
1a001560:	e000e280 	.word	0xe000e280
1a001564:	1a000114 	.word	0x1a000114
1a001568:	1a000150 	.word	0x1a000150
1a00156c:	1a000178 	.word	0x1a000178

1a001570 <_fini>:
void _fini(void) {}
1a001570:	4770      	bx	lr

1a001572 <_init>:
void _init(void) {}
1a001572:	4770      	bx	lr

1a001574 <ordenadorMotoIface_opCambiarPantalla>:

#define LED1      3
#define LED2      4
#define LED3      5

void ordenadorMotoIface_opCambiarPantalla(const OrdenadorMoto* handle, const sc_integer Pantalla){
1a001574:	b508      	push	{r3, lr}
	switch (Pantalla){
1a001576:	2907      	cmp	r1, #7
1a001578:	d811      	bhi.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>
1a00157a:	e8df f001 	tbb	[pc, r1]
1a00157e:	1104      	.short	0x1104
1a001580:	45382b1e 	.word	0x45382b1e
1a001584:	5f52      	.short	0x5f52
	case 0:
		Board_LED_Set(LED1, false);
1a001586:	2100      	movs	r1, #0
1a001588:	2003      	movs	r0, #3
1a00158a:	f7ff f9cf 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, false);
1a00158e:	2100      	movs	r1, #0
1a001590:	2004      	movs	r0, #4
1a001592:	f7ff f9cb 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, false);
1a001596:	2100      	movs	r1, #0
1a001598:	2005      	movs	r0, #5
1a00159a:	f7ff f9c7 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, true);
		Board_LED_Set(LED3, true);
		break;
	}

}
1a00159e:	bd08      	pop	{r3, pc}
		Board_LED_Set(LED1, true);
1a0015a0:	2101      	movs	r1, #1
1a0015a2:	2003      	movs	r0, #3
1a0015a4:	f7ff f9c2 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, false);
1a0015a8:	2100      	movs	r1, #0
1a0015aa:	2004      	movs	r0, #4
1a0015ac:	f7ff f9be 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, false);
1a0015b0:	2100      	movs	r1, #0
1a0015b2:	2005      	movs	r0, #5
1a0015b4:	f7ff f9ba 	bl	1a00092c <Board_LED_Set>
		break;
1a0015b8:	e7f1      	b.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>
		Board_LED_Set(LED1, false);
1a0015ba:	2100      	movs	r1, #0
1a0015bc:	2003      	movs	r0, #3
1a0015be:	f7ff f9b5 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, true);
1a0015c2:	2101      	movs	r1, #1
1a0015c4:	2004      	movs	r0, #4
1a0015c6:	f7ff f9b1 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, false);
1a0015ca:	2100      	movs	r1, #0
1a0015cc:	2005      	movs	r0, #5
1a0015ce:	f7ff f9ad 	bl	1a00092c <Board_LED_Set>
		break;
1a0015d2:	e7e4      	b.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>
		Board_LED_Set(LED1, true);
1a0015d4:	2101      	movs	r1, #1
1a0015d6:	2003      	movs	r0, #3
1a0015d8:	f7ff f9a8 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, true);
1a0015dc:	2101      	movs	r1, #1
1a0015de:	2004      	movs	r0, #4
1a0015e0:	f7ff f9a4 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, false);
1a0015e4:	2100      	movs	r1, #0
1a0015e6:	2005      	movs	r0, #5
1a0015e8:	f7ff f9a0 	bl	1a00092c <Board_LED_Set>
		break;
1a0015ec:	e7d7      	b.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>
		Board_LED_Set(LED1, false);
1a0015ee:	2100      	movs	r1, #0
1a0015f0:	2003      	movs	r0, #3
1a0015f2:	f7ff f99b 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, false);
1a0015f6:	2100      	movs	r1, #0
1a0015f8:	2004      	movs	r0, #4
1a0015fa:	f7ff f997 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, true);
1a0015fe:	2101      	movs	r1, #1
1a001600:	2005      	movs	r0, #5
1a001602:	f7ff f993 	bl	1a00092c <Board_LED_Set>
		break;
1a001606:	e7ca      	b.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>
		Board_LED_Set(LED1, true);
1a001608:	2101      	movs	r1, #1
1a00160a:	2003      	movs	r0, #3
1a00160c:	f7ff f98e 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, false);
1a001610:	2100      	movs	r1, #0
1a001612:	2004      	movs	r0, #4
1a001614:	f7ff f98a 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, true);
1a001618:	2101      	movs	r1, #1
1a00161a:	2005      	movs	r0, #5
1a00161c:	f7ff f986 	bl	1a00092c <Board_LED_Set>
		break;
1a001620:	e7bd      	b.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>
		Board_LED_Set(LED1, false);
1a001622:	2100      	movs	r1, #0
1a001624:	2003      	movs	r0, #3
1a001626:	f7ff f981 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, true);
1a00162a:	2101      	movs	r1, #1
1a00162c:	2004      	movs	r0, #4
1a00162e:	f7ff f97d 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, true);
1a001632:	2101      	movs	r1, #1
1a001634:	2005      	movs	r0, #5
1a001636:	f7ff f979 	bl	1a00092c <Board_LED_Set>
		break;
1a00163a:	e7b0      	b.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>
		Board_LED_Set(LED1, true);
1a00163c:	2101      	movs	r1, #1
1a00163e:	2003      	movs	r0, #3
1a001640:	f7ff f974 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED2, true);
1a001644:	2101      	movs	r1, #1
1a001646:	2004      	movs	r0, #4
1a001648:	f7ff f970 	bl	1a00092c <Board_LED_Set>
		Board_LED_Set(LED3, true);
1a00164c:	2101      	movs	r1, #1
1a00164e:	2005      	movs	r0, #5
1a001650:	f7ff f96c 	bl	1a00092c <Board_LED_Set>
}
1a001654:	e7a3      	b.n	1a00159e <ordenadorMotoIface_opCambiarPantalla+0x2a>

1a001656 <InitTimerTicks>:
#include "OrdenadorMoto.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a001656:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001658:	2400      	movs	r4, #0
1a00165a:	428c      	cmp	r4, r1
1a00165c:	d20a      	bcs.n	1a001674 <InitTimerTicks+0x1e>
		list[i].evid = (sc_eventid)0;
1a00165e:	0125      	lsls	r5, r4, #4
1a001660:	1942      	adds	r2, r0, r5
1a001662:	2300      	movs	r3, #0
1a001664:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a001666:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a001668:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a00166a:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a00166c:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a00166e:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a001670:	3401      	adds	r4, #1
1a001672:	e7f2      	b.n	1a00165a <InitTimerTicks+0x4>
	}
}
1a001674:	bc30      	pop	{r4, r5}
1a001676:	4770      	bx	lr

1a001678 <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a001678:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a00167a:	2400      	movs	r4, #0
1a00167c:	428c      	cmp	r4, r1
1a00167e:	d211      	bcs.n	1a0016a4 <SetNewTimerTick+0x2c>
		if(!list[i].evid) {
1a001680:	0125      	lsls	r5, r4, #4
1a001682:	1946      	adds	r6, r0, r5
1a001684:	5945      	ldr	r5, [r0, r5]
1a001686:	b10d      	cbz	r5, 1a00168c <SetNewTimerTick+0x14>
	for(i = 0; i < len; i++) {
1a001688:	3401      	adds	r4, #1
1a00168a:	e7f7      	b.n	1a00167c <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a00168c:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a00168e:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a001690:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a001692:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001696:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a001698:	2301      	movs	r3, #1
1a00169a:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a00169c:	2300      	movs	r3, #0
1a00169e:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a0016a0:	4610      	mov	r0, r2
			break;
1a0016a2:	e000      	b.n	1a0016a6 <SetNewTimerTick+0x2e>
	sc_eventid ret = (sc_eventid)0;
1a0016a4:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a0016a6:	bc70      	pop	{r4, r5, r6}
1a0016a8:	4770      	bx	lr

1a0016aa <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a0016aa:	2300      	movs	r3, #0
1a0016ac:	428b      	cmp	r3, r1
1a0016ae:	d214      	bcs.n	1a0016da <UnsetTimerTick+0x30>
{
1a0016b0:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a0016b2:	011c      	lsls	r4, r3, #4
1a0016b4:	1905      	adds	r5, r0, r4
1a0016b6:	5904      	ldr	r4, [r0, r4]
1a0016b8:	4294      	cmp	r4, r2
1a0016ba:	d004      	beq.n	1a0016c6 <UnsetTimerTick+0x1c>
	for(i = 0; i < len; i++) {
1a0016bc:	3301      	adds	r3, #1
1a0016be:	428b      	cmp	r3, r1
1a0016c0:	d3f7      	bcc.n	1a0016b2 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a0016c2:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a0016c4:	e007      	b.n	1a0016d6 <UnsetTimerTick+0x2c>
			list[i].evid = (sc_eventid)0;
1a0016c6:	2300      	movs	r3, #0
1a0016c8:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a0016ca:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a0016cc:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a0016ce:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a0016d0:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a0016d2:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a0016d4:	4610      	mov	r0, r2
}
1a0016d6:	bc30      	pop	{r4, r5}
1a0016d8:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a0016da:	2000      	movs	r0, #0
}
1a0016dc:	4770      	bx	lr

1a0016de <IsPendEvent>:

sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a0016de:	2300      	movs	r3, #0
1a0016e0:	428b      	cmp	r3, r1
1a0016e2:	d211      	bcs.n	1a001708 <IsPendEvent+0x2a>
{
1a0016e4:	b430      	push	{r4, r5}
1a0016e6:	e002      	b.n	1a0016ee <IsPendEvent+0x10>
	for(i=0; i < len; i++) {
1a0016e8:	3301      	adds	r3, #1
1a0016ea:	428b      	cmp	r3, r1
1a0016ec:	d209      	bcs.n	1a001702 <IsPendEvent+0x24>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a0016ee:	011c      	lsls	r4, r3, #4
1a0016f0:	1905      	adds	r5, r0, r4
1a0016f2:	5904      	ldr	r4, [r0, r4]
1a0016f4:	4294      	cmp	r4, r2
1a0016f6:	d1f7      	bne.n	1a0016e8 <IsPendEvent+0xa>
1a0016f8:	7bac      	ldrb	r4, [r5, #14]
1a0016fa:	2c00      	cmp	r4, #0
1a0016fc:	d0f4      	beq.n	1a0016e8 <IsPendEvent+0xa>
			ret = true;
1a0016fe:	2001      	movs	r0, #1
1a001700:	e000      	b.n	1a001704 <IsPendEvent+0x26>
	sc_boolean ret = false;
1a001702:	2000      	movs	r0, #0
			break;
		}
	}
	return ret;
}
1a001704:	bc30      	pop	{r4, r5}
1a001706:	4770      	bx	lr
	sc_boolean ret = false;
1a001708:	2000      	movs	r0, #0
}
1a00170a:	4770      	bx	lr

1a00170c <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a00170c:	2300      	movs	r3, #0
1a00170e:	428b      	cmp	r3, r1
1a001710:	d20d      	bcs.n	1a00172e <MarkAsAttEvent+0x22>
{
1a001712:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001714:	011c      	lsls	r4, r3, #4
1a001716:	1905      	adds	r5, r0, r4
1a001718:	5904      	ldr	r4, [r0, r4]
1a00171a:	4294      	cmp	r4, r2
1a00171c:	d003      	beq.n	1a001726 <MarkAsAttEvent+0x1a>
	for(i = 0; i < len; i++) {
1a00171e:	3301      	adds	r3, #1
1a001720:	428b      	cmp	r3, r1
1a001722:	d3f7      	bcc.n	1a001714 <MarkAsAttEvent+0x8>
1a001724:	e001      	b.n	1a00172a <MarkAsAttEvent+0x1e>
			list[i].evPending = false;
1a001726:	2300      	movs	r3, #0
1a001728:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a00172a:	bc30      	pop	{r4, r5}
1a00172c:	4770      	bx	lr
1a00172e:	4770      	bx	lr

1a001730 <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001730:	2300      	movs	r3, #0
1a001732:	428b      	cmp	r3, r1
1a001734:	d21d      	bcs.n	1a001772 <UpdateTimers+0x42>
{
1a001736:	b410      	push	{r4}
1a001738:	e006      	b.n	1a001748 <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a00173a:	2400      	movs	r4, #0
1a00173c:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a00173e:	2401      	movs	r4, #1
1a001740:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a001742:	3301      	adds	r3, #1
1a001744:	428b      	cmp	r3, r1
1a001746:	d211      	bcs.n	1a00176c <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a001748:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a00174c:	7b54      	ldrb	r4, [r2, #13]
1a00174e:	2c00      	cmp	r4, #0
1a001750:	d0f7      	beq.n	1a001742 <UpdateTimers+0x12>
			if(list[i].count)
1a001752:	6894      	ldr	r4, [r2, #8]
1a001754:	b10c      	cbz	r4, 1a00175a <UpdateTimers+0x2a>
				list[i].count--;
1a001756:	3c01      	subs	r4, #1
1a001758:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a00175a:	6894      	ldr	r4, [r2, #8]
1a00175c:	2c00      	cmp	r4, #0
1a00175e:	d1f0      	bne.n	1a001742 <UpdateTimers+0x12>
				if(list[i].periodic)
1a001760:	7b14      	ldrb	r4, [r2, #12]
1a001762:	2c00      	cmp	r4, #0
1a001764:	d0e9      	beq.n	1a00173a <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a001766:	6854      	ldr	r4, [r2, #4]
1a001768:	6094      	str	r4, [r2, #8]
1a00176a:	e7e8      	b.n	1a00173e <UpdateTimers+0xe>
			}
		}
	}
}
1a00176c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001770:	4770      	bx	lr
1a001772:	4770      	bx	lr

1a001774 <ordenadorMoto_setTimer>:
 *  \time_ms The time in milli seconds
 *  \periodic Indicates the the time event must be raised periodically until
 *   the timer is unset
 */
void ordenadorMoto_setTimer( OrdenadorMoto* handle, const sc_eventid evid, const sc_integer time_ms, const sc_boolean periodic )
{
1a001774:	b500      	push	{lr}
1a001776:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a001778:	9300      	str	r3, [sp, #0]
1a00177a:	4613      	mov	r3, r2
1a00177c:	460a      	mov	r2, r1
1a00177e:	2101      	movs	r1, #1
1a001780:	4802      	ldr	r0, [pc, #8]	; (1a00178c <ordenadorMoto_setTimer+0x18>)
1a001782:	f7ff ff79 	bl	1a001678 <SetNewTimerTick>
}
1a001786:	b003      	add	sp, #12
1a001788:	f85d fb04 	ldr.w	pc, [sp], #4
1a00178c:	1000005c 	.word	0x1000005c

1a001790 <ordenadorMoto_unsetTimer>:
/*! This function will be called for each time event that is relevant for a
 *  state when a state will be left.
 *  \param evid An unique identifier of the event.
 */
void ordenadorMoto_unsetTimer( OrdenadorMoto* handle, const sc_eventid evid )
{
1a001790:	b508      	push	{r3, lr}
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a001792:	460a      	mov	r2, r1
1a001794:	2101      	movs	r1, #1
1a001796:	4802      	ldr	r0, [pc, #8]	; (1a0017a0 <ordenadorMoto_unsetTimer+0x10>)
1a001798:	f7ff ff87 	bl	1a0016aa <UnsetTimerTick>
}
1a00179c:	bd08      	pop	{r3, pc}
1a00179e:	bf00      	nop
1a0017a0:	1000005c 	.word	0x1000005c

1a0017a4 <SysTick_Handler>:
/**
 * @brief	Hook on Handle interrupt from SysTick timer
 * @return	Nothing
 */
void SysTick_Handler(void){
	SysTick_Time_Flag = true;
1a0017a4:	4b01      	ldr	r3, [pc, #4]	; (1a0017ac <SysTick_Handler+0x8>)
1a0017a6:	2201      	movs	r2, #1
1a0017a8:	701a      	strb	r2, [r3, #0]
}
1a0017aa:	4770      	bx	lr
1a0017ac:	10000040 	.word	0x10000040

1a0017b0 <Buttons_GetStatus_>:

/*! This function scan all EDU-CIAA-NXP buttons (TEC1, TEC2, TEC3 and TEC4),
 *  and return ID of pressed button (TEC1 or TEC2 or TEC3 or TEC4)
 *  or false if no button was pressed.
 */
uint32_t Buttons_GetStatus_(void) {
1a0017b0:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = false;
	uint32_t idx;

	for (idx = 0; idx < 4; ++idx) {
1a0017b2:	2400      	movs	r4, #0
	uint8_t ret = false;
1a0017b4:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a0017b6:	e000      	b.n	1a0017ba <Buttons_GetStatus_+0xa>
1a0017b8:	3401      	adds	r4, #1
1a0017ba:	2c03      	cmp	r4, #3
1a0017bc:	d809      	bhi.n	1a0017d2 <Buttons_GetStatus_+0x22>
		if (Board_TEC_GetStatus( idx ) == 0)
1a0017be:	b2e0      	uxtb	r0, r4
1a0017c0:	f7ff f8de 	bl	1a000980 <Board_TEC_GetStatus>
1a0017c4:	2800      	cmp	r0, #0
1a0017c6:	d1f7      	bne.n	1a0017b8 <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a0017c8:	2301      	movs	r3, #1
1a0017ca:	40a3      	lsls	r3, r4
1a0017cc:	431d      	orrs	r5, r3
1a0017ce:	b2ed      	uxtb	r5, r5
1a0017d0:	e7f2      	b.n	1a0017b8 <Buttons_GetStatus_+0x8>
	}
	return ret;
}
1a0017d2:	4628      	mov	r0, r5
1a0017d4:	bd38      	pop	{r3, r4, r5, pc}

1a0017d6 <ordenadorMotoIface_opBoton>:


void ordenadorMotoIface_opBoton(const OrdenadorMoto* handle){

}
1a0017d6:	4770      	bx	lr

1a0017d8 <main>:
/**
 * @brief	main routine for statechart example: EDU-CIAA-NXP - OrdenadorMoto LED3
 * @return	Function should not exit.
 */
int main(void)
{
1a0017d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	uint32_t BUTTON_Status;

	/* Generic Initialization */
	Board_Init();
1a0017da:	f7ff f8b9 	bl	1a000950 <Board_Init>

	/* Init Ticks counter => TICKRATE_MS */
	SysTick_Config(SystemCoreClock / TICKRATE_MS);
1a0017de:	4b2a      	ldr	r3, [pc, #168]	; (1a001888 <main+0xb0>)
1a0017e0:	681b      	ldr	r3, [r3, #0]
1a0017e2:	4a2a      	ldr	r2, [pc, #168]	; (1a00188c <main+0xb4>)
1a0017e4:	fba2 2303 	umull	r2, r3, r2, r3
1a0017e8:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0017ea:	3b01      	subs	r3, #1
1a0017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a0017f0:	d209      	bcs.n	1a001806 <main+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0017f2:	4a27      	ldr	r2, [pc, #156]	; (1a001890 <main+0xb8>)
1a0017f4:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0017f6:	4b27      	ldr	r3, [pc, #156]	; (1a001894 <main+0xbc>)
1a0017f8:	21e0      	movs	r1, #224	; 0xe0
1a0017fa:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0017fe:	2300      	movs	r3, #0
1a001800:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001802:	2307      	movs	r3, #7
1a001804:	6013      	str	r3, [r2, #0]

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a001806:	2101      	movs	r1, #1
1a001808:	4823      	ldr	r0, [pc, #140]	; (1a001898 <main+0xc0>)
1a00180a:	f7ff ff24 	bl	1a001656 <InitTimerTicks>

	/* Statechart Initialization */
	ordenadorMoto_init( &statechart );
1a00180e:	4c23      	ldr	r4, [pc, #140]	; (1a00189c <main+0xc4>)
1a001810:	4620      	mov	r0, r4
1a001812:	f7fe ff3e 	bl	1a000692 <ordenadorMoto_init>
	ordenadorMoto_enter( &statechart );
1a001816:	4620      	mov	r0, r4
1a001818:	f7fe ff4b 	bl	1a0006b2 <ordenadorMoto_enter>
1a00181c:	e01a      	b.n	1a001854 <main+0x7c>

			/* Then Scan all Timer Ticks */
			for (i = 0; i < NOF_TIMERS; i++) {

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a00181e:	481e      	ldr	r0, [pc, #120]	; (1a001898 <main+0xc0>)
1a001820:	0123      	lsls	r3, r4, #4
1a001822:	58c2      	ldr	r2, [r0, r3]
1a001824:	2101      	movs	r1, #1
1a001826:	f7ff ff5a 	bl	1a0016de <IsPendEvent>
1a00182a:	b908      	cbnz	r0, 1a001830 <main+0x58>
			for (i = 0; i < NOF_TIMERS; i++) {
1a00182c:	3401      	adds	r4, #1
1a00182e:	e01d      	b.n	1a00186c <main+0x94>

					/* Then Raise an Event -> Ticks.evid => OK */
					ordenadorMoto_raiseTimeEvent( &statechart, ticks[i].evid );
1a001830:	4d19      	ldr	r5, [pc, #100]	; (1a001898 <main+0xc0>)
1a001832:	0126      	lsls	r6, r4, #4
1a001834:	59a9      	ldr	r1, [r5, r6]
1a001836:	4819      	ldr	r0, [pc, #100]	; (1a00189c <main+0xc4>)
1a001838:	f7fe ffae 	bl	1a000798 <ordenadorMoto_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a00183c:	59aa      	ldr	r2, [r5, r6]
1a00183e:	2101      	movs	r1, #1
1a001840:	4628      	mov	r0, r5
1a001842:	f7ff ff63 	bl	1a00170c <MarkAsAttEvent>
1a001846:	e7f1      	b.n	1a00182c <main+0x54>
				}else{
				}

			}
			else{
				ordenadorMotoIface_raise_evNoBoton(&statechart);
1a001848:	4814      	ldr	r0, [pc, #80]	; (1a00189c <main+0xc4>)
1a00184a:	f7fe ffae 	bl	1a0007aa <ordenadorMotoIface_raise_evNoBoton>
			}


			/* Then Run an Cycle of Statechart */
			ordenadorMoto_runCycle(&statechart);		// Run Cycle of Statechart
1a00184e:	4813      	ldr	r0, [pc, #76]	; (1a00189c <main+0xc4>)
1a001850:	f7fe ff38 	bl	1a0006c4 <ordenadorMoto_runCycle>
		__WFI();
1a001854:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a001856:	4b12      	ldr	r3, [pc, #72]	; (1a0018a0 <main+0xc8>)
1a001858:	781b      	ldrb	r3, [r3, #0]
1a00185a:	2b00      	cmp	r3, #0
1a00185c:	d0fa      	beq.n	1a001854 <main+0x7c>
			SysTick_Time_Flag = false;
1a00185e:	2400      	movs	r4, #0
1a001860:	4b0f      	ldr	r3, [pc, #60]	; (1a0018a0 <main+0xc8>)
1a001862:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a001864:	2101      	movs	r1, #1
1a001866:	480c      	ldr	r0, [pc, #48]	; (1a001898 <main+0xc0>)
1a001868:	f7ff ff62 	bl	1a001730 <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a00186c:	2c00      	cmp	r4, #0
1a00186e:	d0d6      	beq.n	1a00181e <main+0x46>
			BUTTON_Status = Buttons_GetStatus_();
1a001870:	f7ff ff9e 	bl	1a0017b0 <Buttons_GetStatus_>
			if (BUTTON_Status != 0){
1a001874:	2800      	cmp	r0, #0
1a001876:	d0e7      	beq.n	1a001848 <main+0x70>
				if(BUTTON_Status & 1){
1a001878:	f010 0f01 	tst.w	r0, #1
1a00187c:	d0e7      	beq.n	1a00184e <main+0x76>
					ordenadorMotoIface_raise_evCambiarPantalla(&statechart);
1a00187e:	4807      	ldr	r0, [pc, #28]	; (1a00189c <main+0xc4>)
1a001880:	f7fe ff96 	bl	1a0007b0 <ordenadorMotoIface_raise_evCambiarPantalla>
1a001884:	e7e3      	b.n	1a00184e <main+0x76>
1a001886:	bf00      	nop
1a001888:	10000058 	.word	0x10000058
1a00188c:	10624dd3 	.word	0x10624dd3
1a001890:	e000e010 	.word	0xe000e010
1a001894:	e000ed00 	.word	0xe000ed00
1a001898:	1000005c 	.word	0x1000005c
1a00189c:	10000044 	.word	0x10000044
1a0018a0:	10000040 	.word	0x10000040

1a0018a4 <__aeabi_uldivmod>:
1a0018a4:	b953      	cbnz	r3, 1a0018bc <__aeabi_uldivmod+0x18>
1a0018a6:	b94a      	cbnz	r2, 1a0018bc <__aeabi_uldivmod+0x18>
1a0018a8:	2900      	cmp	r1, #0
1a0018aa:	bf08      	it	eq
1a0018ac:	2800      	cmpeq	r0, #0
1a0018ae:	bf1c      	itt	ne
1a0018b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0018b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0018b8:	f000 b974 	b.w	1a001ba4 <__aeabi_idiv0>
1a0018bc:	f1ad 0c08 	sub.w	ip, sp, #8
1a0018c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0018c4:	f000 f806 	bl	1a0018d4 <__udivmoddi4>
1a0018c8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0018cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0018d0:	b004      	add	sp, #16
1a0018d2:	4770      	bx	lr

1a0018d4 <__udivmoddi4>:
1a0018d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0018d8:	9e08      	ldr	r6, [sp, #32]
1a0018da:	4604      	mov	r4, r0
1a0018dc:	4688      	mov	r8, r1
1a0018de:	2b00      	cmp	r3, #0
1a0018e0:	f040 8085 	bne.w	1a0019ee <__udivmoddi4+0x11a>
1a0018e4:	428a      	cmp	r2, r1
1a0018e6:	4615      	mov	r5, r2
1a0018e8:	d948      	bls.n	1a00197c <__udivmoddi4+0xa8>
1a0018ea:	fab2 f282 	clz	r2, r2
1a0018ee:	b14a      	cbz	r2, 1a001904 <__udivmoddi4+0x30>
1a0018f0:	f1c2 0720 	rsb	r7, r2, #32
1a0018f4:	fa01 f302 	lsl.w	r3, r1, r2
1a0018f8:	fa20 f707 	lsr.w	r7, r0, r7
1a0018fc:	4095      	lsls	r5, r2
1a0018fe:	ea47 0803 	orr.w	r8, r7, r3
1a001902:	4094      	lsls	r4, r2
1a001904:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001908:	0c23      	lsrs	r3, r4, #16
1a00190a:	fbb8 f7fe 	udiv	r7, r8, lr
1a00190e:	fa1f fc85 	uxth.w	ip, r5
1a001912:	fb0e 8817 	mls	r8, lr, r7, r8
1a001916:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00191a:	fb07 f10c 	mul.w	r1, r7, ip
1a00191e:	4299      	cmp	r1, r3
1a001920:	d909      	bls.n	1a001936 <__udivmoddi4+0x62>
1a001922:	18eb      	adds	r3, r5, r3
1a001924:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001928:	f080 80e3 	bcs.w	1a001af2 <__udivmoddi4+0x21e>
1a00192c:	4299      	cmp	r1, r3
1a00192e:	f240 80e0 	bls.w	1a001af2 <__udivmoddi4+0x21e>
1a001932:	3f02      	subs	r7, #2
1a001934:	442b      	add	r3, r5
1a001936:	1a5b      	subs	r3, r3, r1
1a001938:	b2a4      	uxth	r4, r4
1a00193a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00193e:	fb0e 3310 	mls	r3, lr, r0, r3
1a001942:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001946:	fb00 fc0c 	mul.w	ip, r0, ip
1a00194a:	45a4      	cmp	ip, r4
1a00194c:	d909      	bls.n	1a001962 <__udivmoddi4+0x8e>
1a00194e:	192c      	adds	r4, r5, r4
1a001950:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001954:	f080 80cb 	bcs.w	1a001aee <__udivmoddi4+0x21a>
1a001958:	45a4      	cmp	ip, r4
1a00195a:	f240 80c8 	bls.w	1a001aee <__udivmoddi4+0x21a>
1a00195e:	3802      	subs	r0, #2
1a001960:	442c      	add	r4, r5
1a001962:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001966:	eba4 040c 	sub.w	r4, r4, ip
1a00196a:	2700      	movs	r7, #0
1a00196c:	b11e      	cbz	r6, 1a001976 <__udivmoddi4+0xa2>
1a00196e:	40d4      	lsrs	r4, r2
1a001970:	2300      	movs	r3, #0
1a001972:	e9c6 4300 	strd	r4, r3, [r6]
1a001976:	4639      	mov	r1, r7
1a001978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00197c:	2a00      	cmp	r2, #0
1a00197e:	d053      	beq.n	1a001a28 <__udivmoddi4+0x154>
1a001980:	fab2 f282 	clz	r2, r2
1a001984:	2a00      	cmp	r2, #0
1a001986:	f040 80b6 	bne.w	1a001af6 <__udivmoddi4+0x222>
1a00198a:	1b49      	subs	r1, r1, r5
1a00198c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001990:	fa1f f885 	uxth.w	r8, r5
1a001994:	2701      	movs	r7, #1
1a001996:	fbb1 fcfe 	udiv	ip, r1, lr
1a00199a:	0c23      	lsrs	r3, r4, #16
1a00199c:	fb0e 111c 	mls	r1, lr, ip, r1
1a0019a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0019a4:	fb08 f10c 	mul.w	r1, r8, ip
1a0019a8:	4299      	cmp	r1, r3
1a0019aa:	d907      	bls.n	1a0019bc <__udivmoddi4+0xe8>
1a0019ac:	18eb      	adds	r3, r5, r3
1a0019ae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0019b2:	d202      	bcs.n	1a0019ba <__udivmoddi4+0xe6>
1a0019b4:	4299      	cmp	r1, r3
1a0019b6:	f200 80ec 	bhi.w	1a001b92 <__udivmoddi4+0x2be>
1a0019ba:	4684      	mov	ip, r0
1a0019bc:	1a59      	subs	r1, r3, r1
1a0019be:	b2a3      	uxth	r3, r4
1a0019c0:	fbb1 f0fe 	udiv	r0, r1, lr
1a0019c4:	fb0e 1410 	mls	r4, lr, r0, r1
1a0019c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0019cc:	fb08 f800 	mul.w	r8, r8, r0
1a0019d0:	45a0      	cmp	r8, r4
1a0019d2:	d907      	bls.n	1a0019e4 <__udivmoddi4+0x110>
1a0019d4:	192c      	adds	r4, r5, r4
1a0019d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0019da:	d202      	bcs.n	1a0019e2 <__udivmoddi4+0x10e>
1a0019dc:	45a0      	cmp	r8, r4
1a0019de:	f200 80dc 	bhi.w	1a001b9a <__udivmoddi4+0x2c6>
1a0019e2:	4618      	mov	r0, r3
1a0019e4:	eba4 0408 	sub.w	r4, r4, r8
1a0019e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0019ec:	e7be      	b.n	1a00196c <__udivmoddi4+0x98>
1a0019ee:	428b      	cmp	r3, r1
1a0019f0:	d908      	bls.n	1a001a04 <__udivmoddi4+0x130>
1a0019f2:	2e00      	cmp	r6, #0
1a0019f4:	d078      	beq.n	1a001ae8 <__udivmoddi4+0x214>
1a0019f6:	2700      	movs	r7, #0
1a0019f8:	e9c6 0100 	strd	r0, r1, [r6]
1a0019fc:	4638      	mov	r0, r7
1a0019fe:	4639      	mov	r1, r7
1a001a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001a04:	fab3 f783 	clz	r7, r3
1a001a08:	b97f      	cbnz	r7, 1a001a2a <__udivmoddi4+0x156>
1a001a0a:	428b      	cmp	r3, r1
1a001a0c:	d302      	bcc.n	1a001a14 <__udivmoddi4+0x140>
1a001a0e:	4282      	cmp	r2, r0
1a001a10:	f200 80bd 	bhi.w	1a001b8e <__udivmoddi4+0x2ba>
1a001a14:	1a84      	subs	r4, r0, r2
1a001a16:	eb61 0303 	sbc.w	r3, r1, r3
1a001a1a:	2001      	movs	r0, #1
1a001a1c:	4698      	mov	r8, r3
1a001a1e:	2e00      	cmp	r6, #0
1a001a20:	d0a9      	beq.n	1a001976 <__udivmoddi4+0xa2>
1a001a22:	e9c6 4800 	strd	r4, r8, [r6]
1a001a26:	e7a6      	b.n	1a001976 <__udivmoddi4+0xa2>
1a001a28:	deff      	udf	#255	; 0xff
1a001a2a:	f1c7 0520 	rsb	r5, r7, #32
1a001a2e:	40bb      	lsls	r3, r7
1a001a30:	fa22 fc05 	lsr.w	ip, r2, r5
1a001a34:	ea4c 0c03 	orr.w	ip, ip, r3
1a001a38:	fa01 f407 	lsl.w	r4, r1, r7
1a001a3c:	fa20 f805 	lsr.w	r8, r0, r5
1a001a40:	fa21 f305 	lsr.w	r3, r1, r5
1a001a44:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001a48:	ea48 0404 	orr.w	r4, r8, r4
1a001a4c:	fbb3 f9fe 	udiv	r9, r3, lr
1a001a50:	0c21      	lsrs	r1, r4, #16
1a001a52:	fb0e 3319 	mls	r3, lr, r9, r3
1a001a56:	fa1f f88c 	uxth.w	r8, ip
1a001a5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001a5e:	fb09 fa08 	mul.w	sl, r9, r8
1a001a62:	459a      	cmp	sl, r3
1a001a64:	fa02 f207 	lsl.w	r2, r2, r7
1a001a68:	fa00 f107 	lsl.w	r1, r0, r7
1a001a6c:	d90b      	bls.n	1a001a86 <__udivmoddi4+0x1b2>
1a001a6e:	eb1c 0303 	adds.w	r3, ip, r3
1a001a72:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001a76:	f080 8088 	bcs.w	1a001b8a <__udivmoddi4+0x2b6>
1a001a7a:	459a      	cmp	sl, r3
1a001a7c:	f240 8085 	bls.w	1a001b8a <__udivmoddi4+0x2b6>
1a001a80:	f1a9 0902 	sub.w	r9, r9, #2
1a001a84:	4463      	add	r3, ip
1a001a86:	eba3 030a 	sub.w	r3, r3, sl
1a001a8a:	b2a4      	uxth	r4, r4
1a001a8c:	fbb3 f0fe 	udiv	r0, r3, lr
1a001a90:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001a98:	fb00 f808 	mul.w	r8, r0, r8
1a001a9c:	45a0      	cmp	r8, r4
1a001a9e:	d908      	bls.n	1a001ab2 <__udivmoddi4+0x1de>
1a001aa0:	eb1c 0404 	adds.w	r4, ip, r4
1a001aa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001aa8:	d26b      	bcs.n	1a001b82 <__udivmoddi4+0x2ae>
1a001aaa:	45a0      	cmp	r8, r4
1a001aac:	d969      	bls.n	1a001b82 <__udivmoddi4+0x2ae>
1a001aae:	3802      	subs	r0, #2
1a001ab0:	4464      	add	r4, ip
1a001ab2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001ab6:	eba4 0408 	sub.w	r4, r4, r8
1a001aba:	fba0 8902 	umull	r8, r9, r0, r2
1a001abe:	454c      	cmp	r4, r9
1a001ac0:	46c6      	mov	lr, r8
1a001ac2:	464b      	mov	r3, r9
1a001ac4:	d354      	bcc.n	1a001b70 <__udivmoddi4+0x29c>
1a001ac6:	d051      	beq.n	1a001b6c <__udivmoddi4+0x298>
1a001ac8:	2e00      	cmp	r6, #0
1a001aca:	d069      	beq.n	1a001ba0 <__udivmoddi4+0x2cc>
1a001acc:	ebb1 020e 	subs.w	r2, r1, lr
1a001ad0:	eb64 0403 	sbc.w	r4, r4, r3
1a001ad4:	fa04 f505 	lsl.w	r5, r4, r5
1a001ad8:	fa22 f307 	lsr.w	r3, r2, r7
1a001adc:	40fc      	lsrs	r4, r7
1a001ade:	431d      	orrs	r5, r3
1a001ae0:	e9c6 5400 	strd	r5, r4, [r6]
1a001ae4:	2700      	movs	r7, #0
1a001ae6:	e746      	b.n	1a001976 <__udivmoddi4+0xa2>
1a001ae8:	4637      	mov	r7, r6
1a001aea:	4630      	mov	r0, r6
1a001aec:	e743      	b.n	1a001976 <__udivmoddi4+0xa2>
1a001aee:	4618      	mov	r0, r3
1a001af0:	e737      	b.n	1a001962 <__udivmoddi4+0x8e>
1a001af2:	4607      	mov	r7, r0
1a001af4:	e71f      	b.n	1a001936 <__udivmoddi4+0x62>
1a001af6:	f1c2 0320 	rsb	r3, r2, #32
1a001afa:	fa20 f703 	lsr.w	r7, r0, r3
1a001afe:	4095      	lsls	r5, r2
1a001b00:	fa01 f002 	lsl.w	r0, r1, r2
1a001b04:	fa21 f303 	lsr.w	r3, r1, r3
1a001b08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001b0c:	4338      	orrs	r0, r7
1a001b0e:	0c01      	lsrs	r1, r0, #16
1a001b10:	fbb3 f7fe 	udiv	r7, r3, lr
1a001b14:	fa1f f885 	uxth.w	r8, r5
1a001b18:	fb0e 3317 	mls	r3, lr, r7, r3
1a001b1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001b20:	fb07 f308 	mul.w	r3, r7, r8
1a001b24:	428b      	cmp	r3, r1
1a001b26:	fa04 f402 	lsl.w	r4, r4, r2
1a001b2a:	d907      	bls.n	1a001b3c <__udivmoddi4+0x268>
1a001b2c:	1869      	adds	r1, r5, r1
1a001b2e:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001b32:	d228      	bcs.n	1a001b86 <__udivmoddi4+0x2b2>
1a001b34:	428b      	cmp	r3, r1
1a001b36:	d926      	bls.n	1a001b86 <__udivmoddi4+0x2b2>
1a001b38:	3f02      	subs	r7, #2
1a001b3a:	4429      	add	r1, r5
1a001b3c:	1acb      	subs	r3, r1, r3
1a001b3e:	b281      	uxth	r1, r0
1a001b40:	fbb3 f0fe 	udiv	r0, r3, lr
1a001b44:	fb0e 3310 	mls	r3, lr, r0, r3
1a001b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001b4c:	fb00 f308 	mul.w	r3, r0, r8
1a001b50:	428b      	cmp	r3, r1
1a001b52:	d907      	bls.n	1a001b64 <__udivmoddi4+0x290>
1a001b54:	1869      	adds	r1, r5, r1
1a001b56:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001b5a:	d210      	bcs.n	1a001b7e <__udivmoddi4+0x2aa>
1a001b5c:	428b      	cmp	r3, r1
1a001b5e:	d90e      	bls.n	1a001b7e <__udivmoddi4+0x2aa>
1a001b60:	3802      	subs	r0, #2
1a001b62:	4429      	add	r1, r5
1a001b64:	1ac9      	subs	r1, r1, r3
1a001b66:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001b6a:	e714      	b.n	1a001996 <__udivmoddi4+0xc2>
1a001b6c:	4541      	cmp	r1, r8
1a001b6e:	d2ab      	bcs.n	1a001ac8 <__udivmoddi4+0x1f4>
1a001b70:	ebb8 0e02 	subs.w	lr, r8, r2
1a001b74:	eb69 020c 	sbc.w	r2, r9, ip
1a001b78:	3801      	subs	r0, #1
1a001b7a:	4613      	mov	r3, r2
1a001b7c:	e7a4      	b.n	1a001ac8 <__udivmoddi4+0x1f4>
1a001b7e:	4660      	mov	r0, ip
1a001b80:	e7f0      	b.n	1a001b64 <__udivmoddi4+0x290>
1a001b82:	4618      	mov	r0, r3
1a001b84:	e795      	b.n	1a001ab2 <__udivmoddi4+0x1de>
1a001b86:	4667      	mov	r7, ip
1a001b88:	e7d8      	b.n	1a001b3c <__udivmoddi4+0x268>
1a001b8a:	4681      	mov	r9, r0
1a001b8c:	e77b      	b.n	1a001a86 <__udivmoddi4+0x1b2>
1a001b8e:	4638      	mov	r0, r7
1a001b90:	e745      	b.n	1a001a1e <__udivmoddi4+0x14a>
1a001b92:	f1ac 0c02 	sub.w	ip, ip, #2
1a001b96:	442b      	add	r3, r5
1a001b98:	e710      	b.n	1a0019bc <__udivmoddi4+0xe8>
1a001b9a:	3802      	subs	r0, #2
1a001b9c:	442c      	add	r4, r5
1a001b9e:	e721      	b.n	1a0019e4 <__udivmoddi4+0x110>
1a001ba0:	4637      	mov	r7, r6
1a001ba2:	e6e8      	b.n	1a001976 <__udivmoddi4+0xa2>

1a001ba4 <__aeabi_idiv0>:
1a001ba4:	4770      	bx	lr
1a001ba6:	bf00      	nop

1a001ba8 <__libc_init_array>:
1a001ba8:	b570      	push	{r4, r5, r6, lr}
1a001baa:	4d0d      	ldr	r5, [pc, #52]	; (1a001be0 <__libc_init_array+0x38>)
1a001bac:	4c0d      	ldr	r4, [pc, #52]	; (1a001be4 <__libc_init_array+0x3c>)
1a001bae:	1b64      	subs	r4, r4, r5
1a001bb0:	10a4      	asrs	r4, r4, #2
1a001bb2:	2600      	movs	r6, #0
1a001bb4:	42a6      	cmp	r6, r4
1a001bb6:	d109      	bne.n	1a001bcc <__libc_init_array+0x24>
1a001bb8:	4d0b      	ldr	r5, [pc, #44]	; (1a001be8 <__libc_init_array+0x40>)
1a001bba:	4c0c      	ldr	r4, [pc, #48]	; (1a001bec <__libc_init_array+0x44>)
1a001bbc:	f7ff fcd9 	bl	1a001572 <_init>
1a001bc0:	1b64      	subs	r4, r4, r5
1a001bc2:	10a4      	asrs	r4, r4, #2
1a001bc4:	2600      	movs	r6, #0
1a001bc6:	42a6      	cmp	r6, r4
1a001bc8:	d105      	bne.n	1a001bd6 <__libc_init_array+0x2e>
1a001bca:	bd70      	pop	{r4, r5, r6, pc}
1a001bcc:	f855 3b04 	ldr.w	r3, [r5], #4
1a001bd0:	4798      	blx	r3
1a001bd2:	3601      	adds	r6, #1
1a001bd4:	e7ee      	b.n	1a001bb4 <__libc_init_array+0xc>
1a001bd6:	f855 3b04 	ldr.w	r3, [r5], #4
1a001bda:	4798      	blx	r3
1a001bdc:	3601      	adds	r6, #1
1a001bde:	e7f2      	b.n	1a001bc6 <__libc_init_array+0x1e>
1a001be0:	1a001d78 	.word	0x1a001d78
1a001be4:	1a001d78 	.word	0x1a001d78
1a001be8:	1a001d78 	.word	0x1a001d78
1a001bec:	1a001d78 	.word	0x1a001d78

1a001bf0 <memset>:
1a001bf0:	4402      	add	r2, r0
1a001bf2:	4603      	mov	r3, r0
1a001bf4:	4293      	cmp	r3, r2
1a001bf6:	d100      	bne.n	1a001bfa <memset+0xa>
1a001bf8:	4770      	bx	lr
1a001bfa:	f803 1b01 	strb.w	r1, [r3], #1
1a001bfe:	e7f9      	b.n	1a001bf4 <memset+0x4>

1a001c00 <ExtRateIn>:
1a001c00:	0000 0000                                   ....

1a001c04 <GpioButtons>:
1a001c04:	0400 0800 0900 0901                         ........

1a001c0c <GpioLeds>:
1a001c0c:	0005 0105 0205 0e00 0b01 0c01               ............

1a001c18 <GpioPorts>:
1a001c18:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a001c28:	0802 ffff                                   ....

1a001c2c <OscRateIn>:
1a001c2c:	1b00 00b7                                   ....

1a001c30 <InitClkStates>:
1a001c30:	0f01 0101                                   ....

1a001c34 <pinmuxing>:
1a001c34:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001c44:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001c54:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001c64:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001c74:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001c84:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001c94:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001ca4:	0206 0057                                   ..W.

1a001ca8 <UART_BClock>:
1a001ca8:	01c2 01a2 0182 0162                         ......b.

1a001cb0 <UART_PClock>:
1a001cb0:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a001cc0:	00ff 0000                                   ....

1a001cc4 <periph_to_base>:
1a001cc4:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001cd4:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001ce4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001cf4:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001d04:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001d14:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001d24:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001d30 <InitClkStates>:
1a001d30:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001d40:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001d50:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001d60:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001d70:	111a 0001 111b 0001                         ........
