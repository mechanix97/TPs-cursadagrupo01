
projects/PanelDeControl/out/PanelDeControl.elf:     file format elf32-littlearm
projects/PanelDeControl/out/PanelDeControl.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001555

Program Header:
0x70000001 off    0x000121cc vaddr 0x1a0021cc paddr 0x1a0021cc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000064 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000021d4 memsz 0x000021d4 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0021d4 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021cc  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a0021d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000064  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0021cc  1a0021cc  000121cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 17 .noinit       00000000  100000ac  100000ac  00020048  2**2
                  CONTENTS
 18 .debug_info   0001a75d  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003b1e  00000000  00000000  0003a7a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00007f5d  00000000  00000000  0003e2c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000ac0  00000000  00000000  00046220  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000b88  00000000  00000000  00046ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00008c3b  00000000  00000000  00047868  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000f385  00000000  00000000  000504a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00027a90  00000000  00000000  0005f828  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000079  00000000  00000000  000872b8  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  00087331  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001ab8  00000000  00000000  00087364  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0021cc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000ac l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 PanelDeControl.c
1a000300 l     F .text	00000016 clearInEvents
1a000316 l     F .text	0000000a enact_TECX_OPRIMIDO
1a000320 l     F .text	0000000a enseq_TECX_NO_OPRIMIDO_default
1a00032a l     F .text	00000012 enseq_TECX_OPRIMIDO_default
1a00033c l     F .text	0000000a enseq_TECX_VALIDACION_default
1a000346 l     F .text	0000000a enseq_main_region_ESPERA_default
1a000350 l     F .text	00000008 exseq_TECX_NO_OPRIMIDO
1a000358 l     F .text	00000008 exseq_TECX_OPRIMIDO
1a000360 l     F .text	00000008 exseq_TECX_VALIDACION
1a000368 l     F .text	0000000a exseq_main_region_ESPERA
1a000372 l     F .text	0000000a exseq_Funcion_TRIANGULAR
1a00037c l     F .text	0000000a exseq_Funcion_CUADRADA
1a000386 l     F .text	0000000a exseq_Funcion_SENOIDAL
1a000390 l     F .text	0000000a exseq_Magnitud_TENSION
1a00039a l     F .text	0000000a exseq_Magnitud_FRECUENCIA
1a0003a4 l     F .text	00000008 react_TECX__entry_Default
1a0003ac l     F .text	00000008 enseq_TECX_default
1a0003b4 l     F .text	00000008 react_main_region__entry_Default
1a0003bc l     F .text	00000008 enseq_main_region_default
1a0003c4 l     F .text	00000004 react
1a0003c8 l     F .text	00000026 TECX_OPRIMIDO_react
1a0003ee l     F .text	00000038 TECX_VALIDACION_react
1a000426 l     F .text	00000020 enact_Funcion_TRIANGULAR
1a000446 l     F .text	00000012 enseq_Funcion_TRIANGULAR_default
1a000458 l     F .text	00000008 react_Funcion__entry_Default
1a000460 l     F .text	00000008 enseq_Funcion_default
1a000468 l     F .text	0000001e Funcion_SENOIDAL_react
1a000486 l     F .text	000000a0 main_region_ESPERA_react
1a000526 l     F .text	00000020 enact_Funcion_CUADRADA
1a000546 l     F .text	00000012 enseq_Funcion_CUADRADA_default
1a000558 l     F .text	0000001e Funcion_TRIANGULAR_react
1a000576 l     F .text	00000020 enact_Funcion_SENOIDAL
1a000596 l     F .text	00000012 enseq_Funcion_SENOIDAL_default
1a0005a8 l     F .text	0000001e Funcion_CUADRADA_react
1a0005c6 l     F .text	00000020 enact_Magnitud_TENSION
1a0005e6 l     F .text	00000012 enseq_Magnitud_TENSION_default
1a0005f8 l     F .text	00000008 react_Magnitud__entry_Default
1a000600 l     F .text	00000008 enseq_Magnitud_default
1a000608 l     F .text	0000000c exact_TECX_DEBOUNCE
1a000614 l     F .text	0000000e exseq_TECX_DEBOUNCE
1a000622 l     F .text	00000028 TECX_DEBOUNCE_react
1a00064a l     F .text	00000010 enact_TECX_DEBOUNCE
1a00065a l     F .text	00000012 enseq_TECX_DEBOUNCE_default
1a00066c l     F .text	00000026 TECX_NO_OPRIMIDO_react
1a000692 l     F .text	00000020 enact_Magnitud_FRECUENCIA
1a0006b2 l     F .text	00000012 enseq_Magnitud_FRECUENCIA_default
1a0006c4 l     F .text	0000004a Magnitud_TENSION_react
1a00070e l     F .text	0000004a Magnitud_FRECUENCIA_react
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001f70 l     O .text	00000004 InitClkStates
1a001f74 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000924 l     F .text	00000044 Board_LED_Init
1a000968 l     F .text	00000040 Board_TEC_Init
1a0009a8 l     F .text	00000040 Board_GPIO_Init
1a0009e8 l     F .text	00000030 Board_ADC_Init
1a000a18 l     F .text	00000038 Board_SPI_Init
1a000a50 l     F .text	00000024 Board_I2C_Init
1a001fec l     O .text	00000008 GpioButtons
1a001ff4 l     O .text	0000000c GpioLeds
1a002000 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000ae0 l     F .text	000000a0 pll_calc_divs
1a000b80 l     F .text	0000010c pll_get_frac
1a000c8c l     F .text	00000048 Chip_Clock_FindBaseClock
1a000ef8 l     F .text	00000022 Chip_Clock_GetDivRate
10000048 l     O .bss	00000008 audio_usb_pll_freq
1a002020 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001064 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001078 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001118 l     F .text	0000002c Chip_UART_GetIndex
1a00208c l     O .text	00000008 UART_BClock
1a002094 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0012f8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00130c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00209c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0015fc l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10000050 l     O .bss	00000004 callBackFuncParams
10000058 l     O .bss	00000008 tickCounter
10000060 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000064 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 main.c
1000006c l     O .bss	00000028 statechart
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a0021cc l       .bss_RAM5	00000000 __init_array_end
1a0021cc l       .bss_RAM5	00000000 __preinit_array_end
1a0021cc l       .bss_RAM5	00000000 __init_array_start
1a0021cc l       .bss_RAM5	00000000 __preinit_array_start
1a000d20 g     F .text	0000001c Chip_Clock_GetDividerSource
10000068 g     O .bss	00000001 SysTick_Time_Flag
1a000178  w    F .text	00000002 TIMER2_IRQHandler
1a000186  w    F .text	00000002 DebugMon_Handler
1a000178  w    F .text	00000002 RIT_IRQHandler
1a000854 g     F .text	00000012 panelDeControl_raiseTimeEvent
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000178  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000178  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000178  w    F .text	00000002 I2C0_IRQHandler
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0013b2 g     F .text	0000000c Chip_ADC_SetResolution
1a001924 g     F .text	0000002c SysTick_Handler
1a001550  w    F .text	00000002 initialise_monitor_handles
1a000178  w    F .text	00000002 SDIO_IRQHandler
1a000178  w    F .text	00000002 ATIMER_IRQHandler
1a000188  w    F .text	00000002 PendSV_Handler
1a00017a  w    F .text	00000002 NMI_Handler
1a0021d4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000178  w    F .text	00000002 I2C1_IRQHandler
1a000178  w    F .text	00000002 UART1_IRQHandler
1a000178  w    F .text	00000002 GPIO5_IRQHandler
1a000178  w    F .text	00000002 CAN1_IRQHandler
1a000866 g     F .text	00000006 panelDeControlIface_raise_evTECXNoOprimido
53ff6330 g       *ABS*	00000000 __valid_user_code_checksum
1a0021d4 g       .ARM.exidx	00000000 _etext
1a000178  w    F .text	00000002 USB1_IRQHandler
1a000178  w    F .text	00000002 I2S0_IRQHandler
1a00077e g     F .text	0000001c panelDeControl_enter
1a001bdc g     F .text	00000044 UpdateTimers
1a000178  w    F .text	00000002 TIMER3_IRQHandler
1a000f9c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a001b8e g     F .text	00000028 IsPendEvent
1a000178  w    F .text	00000002 SGPIO_IRQHandler
1a001bb6 g     F .text	00000026 MarkAsAttEvent
1a001c20 g     F .text	00000000 .hidden __aeabi_uldivmod
100000ac g       .noinit	00000000 _noinit
10000094 g     O .bss	00000004 SystemCoreClock
1a001144 g     F .text	00000054 Chip_UART_Init
1a000178  w    F .text	00000002 ADC0_IRQHandler
1a00079c g     F .text	000000b6 panelDeControl_runCycle
1a000182  w    F .text	00000002 UsageFault_Handler
1a0019e0 g     F .text	0000000c myTickHook
1a001018 g     F .text	0000004c Chip_Clock_GetRate
1a000178  w    F .text	00000002 GPIO6_IRQHandler
1a0008ac g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001c50 g     F .text	000002c2 .hidden __udivmoddi4
1a001fe8 g     O .text	00000004 ExtRateIn
1a000178  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000178  w    F .text	00000002 GPIO1_IRQHandler
1a000178  w    F .text	00000002 SSP0_IRQHandler
1a0021cc g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001f18 g     F .text	00000048 __libc_init_array
1a001a5a g     F .text	00000002 panelDeControlIface_opSetTension
1a000178  w    F .text	00000002 ADC1_IRQHandler
1a00086c g     F .text	00000008 panelDeControlIface_raise_evTECXOprimido
1a000a98 g     F .text	00000030 Board_Init
1a0015de  w    F .text	00000002 _init
1a0019ec g     F .text	00000010 panelDeControlIface_opLED
1a000114 g       .text	00000000 __data_section_table
1a000178  w    F .text	00000002 RTC_IRQHandler
100000ac g       .bss	00000000 _ebss
1a000178  w    F .text	00000002 TIMER0_IRQHandler
1a001554 g     F .text	00000088 Reset_Handler
1a0018a8 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000178  w    F .text	00000002 SPI_IRQHandler
1a0012bc g     F .text	0000003c Chip_I2C_SetClockRate
1a000178  w    F .text	00000002 LCD_IRQHandler
1a000cd4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a000178  w    F .text	00000002 TIMER1_IRQHandler
1a001294 g     F .text	00000028 Chip_I2C_Init
1a001b24 g     F .text	00000034 SetNewTimerTick
1a000178  w    F .text	00000002 UART2_IRQHandler
1a000e90 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0020e4 g     O .text	000000e6 gpioPinsInit
1a001090 g     F .text	00000012 Chip_SSP_SetClockRate
1a000178  w    F .text	00000002 GPIO2_IRQHandler
1a000f74 g     F .text	00000028 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a001380 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000178  w    F .text	00000002 I2S1_IRQHandler
1a0010a2 g     F .text	0000003e Chip_SSP_SetBitRate
1a000ac8 g     F .text	00000002 Chip_GPIO_Init
1a002014 g     O .text	00000004 OscRateIn
100000ac g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000178  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001630 g     F .text	00000194 gpioInit
1a001a56 g     F .text	00000002 panelDeControlIface_opSetForma
1a001f14  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001950 g     F .text	0000001c USB0_IRQHandler
1a000178  w    F .text	00000002 GPIO3_IRQHandler
1a000178  w    F .text	00000002 SCT_IRQHandler
1a000d3c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001f60 g     F .text	00000010 memset
1a00017e  w    F .text	00000002 MemManage_Handler
1a001a5c g     F .text	000000a4 main
1a000178  w    F .text	00000002 WDT_IRQHandler
1a001b58 g     F .text	00000036 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000184  w    F .text	00000002 SVC_Handler
1a000178  w    F .text	00000002 GPIO7_IRQHandler
1a000fa8 g     F .text	0000003c Chip_Clock_EnableOpts
1a000d58 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000e10 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001518 g     F .text	00000038 SystemInit
1a000178  w    F .text	00000002 SPIFI_IRQHandler
1a000178  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0017c4 g     F .text	00000056 gpioWrite
1a0015dc  w    F .text	00000002 _fini
1a001340 g     F .text	00000040 Chip_ADC_Init
10000098 g     O .bss	00000004 g_pUsbApi
1a000874 g     F .text	00000038 Board_SetupMuxing
1a001a2c g     F .text	0000002a Buttons_GetStatus_
1a001198 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001a18 g     F .text	00000014 panelDeControl_unsetTimer
10000040 g     O .data	00000008 tickRateMS
1a000178  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1000009c g     O .bss	00000010 ticks
1a0019fc g     F .text	0000001c panelDeControl_setTimer
1a000178  w    F .text	00000002 CAN0_IRQHandler
1a001b00 g     F .text	00000024 InitTimerTicks
10000000 g       .data	00000000 _data
1a001870 g     F .text	00000020 tickCallbackSet
1a001a58 g     F .text	00000002 panelDeControlIface_opSetFrecuencia
1a000178 g       .text	00000000 __section_table_end
1a0010e0 g     F .text	00000038 Chip_SSP_Init
1a000178  w    F .text	00000002 GINT0_IRQHandler
1a000178  w    F .text	00000002 DAC_IRQHandler
1a000a74 g     F .text	00000024 Board_Debug_Init
1a000758 g     F .text	00000026 panelDeControl_init
10000048 g       .data	00000000 _edata
1a001274 g     F .text	00000020 Chip_I2C_EventHandler
1a000178  w    F .text	00000002 M0SUB_IRQHandler
1a0013c0 g     F .text	00000158 Chip_SetupCoreClock
1a000178  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000acc g     F .text	00000014 SystemCoreClockUpdate
1a000178  w    F .text	00000002 DMA_IRQHandler
1a000178  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001f14  w    F .text	00000002 .hidden __aeabi_idiv0
1a000180  w    F .text	00000002 BusFault_Handler
1a000fe4 g     F .text	00000034 Chip_Clock_Enable
1a000178  w    F .text	00000002 UART3_IRQHandler
1a000178  w    F .text	00000002 MCPWM_IRQHandler
1a000178  w    F .text	00000002 M0APP_IRQHandler
1a00181a g     F .text	00000054 gpioRead
1a00196c g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a000178  w    F .text	00000002 GINT1_IRQHandler
1a001890 g     F .text	00000018 tickPowerSet
1a000f1c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0015e0 g     F .text	0000001c cyclesCounterInit
1a000178  w    F .text	00000002 GPIO4_IRQHandler
1a000918 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 55 15 00 1a 7b 01 00 1a 7d 01 00 1a     ....U...{...}...
1a000010:	7f 01 00 1a 81 01 00 1a 83 01 00 1a 30 63 ff 53     ............0c.S
	...
1a00002c:	85 01 00 1a 87 01 00 1a 00 00 00 00 89 01 00 1a     ................
1a00003c:	25 19 00 1a                                         %...

1a000040 <g_pfnVendorVectors>:
1a000040:	79 01 00 1a 79 01 00 1a 79 01 00 1a 00 00 00 00     y...y...y.......
1a000050:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000060:	51 19 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     Q...y...y...y...
1a000070:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000080:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000090:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000a0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000b0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000c0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000d0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000e0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000f0:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000100:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000110:	79 01 00 1a                                         y...

1a000114 <__data_section_table>:
1a000114:	1a0021d4 	.word	0x1a0021d4
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a0021d4 	.word	0x1a0021d4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0021d4 	.word	0x1a0021d4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0021d4 	.word	0x1a0021d4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0021d4 	.word	0x1a0021d4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000064 	.word	0x00000064
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <ADC0_IRQHandler>

1a00017a <NMI_Handler>:

}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <NMI_Handler>

1a00017c <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>

1a00017e <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <MemManage_Handler>

1a000180 <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <BusFault_Handler>

1a000182 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler>

1a000184 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <SVC_Handler>

1a000186 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler>

1a000188 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a00018a:	e7fe      	b.n	1a00018a <PendSV_Handler+0x2>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clearInEvents>:
	return result;
}

static void clearInEvents(PanelDeControl* handle)
{
	handle->iface.evForma_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7203      	strb	r3, [r0, #8]
	handle->iface.evMagnitud_raised = bool_false;
1a000304:	7243      	strb	r3, [r0, #9]
	handle->iface.evUp_raised = bool_false;
1a000306:	7283      	strb	r3, [r0, #10]
	handle->iface.evDown_raised = bool_false;
1a000308:	72c3      	strb	r3, [r0, #11]
	handle->iface.evTECXNoOprimido_raised = bool_false;
1a00030a:	7303      	strb	r3, [r0, #12]
	handle->iface.evTECXOprimido_raised = bool_false;
1a00030c:	7343      	strb	r3, [r0, #13]
	handle->internal.siTECXOK_raised = bool_false;
1a00030e:	7503      	strb	r3, [r0, #20]
	handle->timeEvents.panelDeControl_TECX_DEBOUNCE_tev0_raised = bool_false;
1a000310:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
1a000314:	4770      	bx	lr

1a000316 <enact_TECX_OPRIMIDO>:

/* Entry action for state 'OPRIMIDO'. */
static void enact_TECX_OPRIMIDO(PanelDeControl* handle)
{
	/* Entry action for state 'OPRIMIDO'. */
	handle->internal.siTECXOK_raised = bool_true;
1a000316:	2301      	movs	r3, #1
1a000318:	7503      	strb	r3, [r0, #20]
	handle->internal.viTecla = handle->iface.evTECXOprimido_value;
1a00031a:	6903      	ldr	r3, [r0, #16]
1a00031c:	6203      	str	r3, [r0, #32]
}
1a00031e:	4770      	bx	lr

1a000320 <enseq_TECX_NO_OPRIMIDO_default>:

/* 'default' enter sequence for state NO_OPRIMIDO */
static void enseq_TECX_NO_OPRIMIDO_default(PanelDeControl* handle)
{
	/* 'default' enter sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = PanelDeControl_TECX_NO_OPRIMIDO;
1a000320:	2302      	movs	r3, #2
1a000322:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000324:	2300      	movs	r3, #0
1a000326:	6043      	str	r3, [r0, #4]
}
1a000328:	4770      	bx	lr

1a00032a <enseq_TECX_OPRIMIDO_default>:

/* 'default' enter sequence for state OPRIMIDO */
static void enseq_TECX_OPRIMIDO_default(PanelDeControl* handle)
{
1a00032a:	b510      	push	{r4, lr}
1a00032c:	4604      	mov	r4, r0
	/* 'default' enter sequence for state OPRIMIDO */
	enact_TECX_OPRIMIDO(handle);
1a00032e:	f7ff fff2 	bl	1a000316 <enact_TECX_OPRIMIDO>
	handle->stateConfVector[0] = PanelDeControl_TECX_OPRIMIDO;
1a000332:	2303      	movs	r3, #3
1a000334:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000336:	2300      	movs	r3, #0
1a000338:	6063      	str	r3, [r4, #4]
}
1a00033a:	bd10      	pop	{r4, pc}

1a00033c <enseq_TECX_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_TECX_VALIDACION_default(PanelDeControl* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[0] = PanelDeControl_TECX_VALIDACION;
1a00033c:	2304      	movs	r3, #4
1a00033e:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000340:	2300      	movs	r3, #0
1a000342:	6043      	str	r3, [r0, #4]
}
1a000344:	4770      	bx	lr

1a000346 <enseq_main_region_ESPERA_default>:

/* 'default' enter sequence for state ESPERA */
static void enseq_main_region_ESPERA_default(PanelDeControl* handle)
{
	/* 'default' enter sequence for state ESPERA */
	handle->stateConfVector[1] = PanelDeControl_main_region_ESPERA;
1a000346:	2305      	movs	r3, #5
1a000348:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00034a:	2301      	movs	r3, #1
1a00034c:	6043      	str	r3, [r0, #4]
}
1a00034e:	4770      	bx	lr

1a000350 <exseq_TECX_NO_OPRIMIDO>:

/* Default exit sequence for state NO_OPRIMIDO */
static void exseq_TECX_NO_OPRIMIDO(PanelDeControl* handle)
{
	/* Default exit sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = PanelDeControl_last_state;
1a000350:	2300      	movs	r3, #0
1a000352:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000354:	6043      	str	r3, [r0, #4]
}
1a000356:	4770      	bx	lr

1a000358 <exseq_TECX_OPRIMIDO>:

/* Default exit sequence for state OPRIMIDO */
static void exseq_TECX_OPRIMIDO(PanelDeControl* handle)
{
	/* Default exit sequence for state OPRIMIDO */
	handle->stateConfVector[0] = PanelDeControl_last_state;
1a000358:	2300      	movs	r3, #0
1a00035a:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00035c:	6043      	str	r3, [r0, #4]
}
1a00035e:	4770      	bx	lr

1a000360 <exseq_TECX_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_TECX_VALIDACION(PanelDeControl* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[0] = PanelDeControl_last_state;
1a000360:	2300      	movs	r3, #0
1a000362:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000364:	6043      	str	r3, [r0, #4]
}
1a000366:	4770      	bx	lr

1a000368 <exseq_main_region_ESPERA>:

/* Default exit sequence for state ESPERA */
static void exseq_main_region_ESPERA(PanelDeControl* handle)
{
	/* Default exit sequence for state ESPERA */
	handle->stateConfVector[1] = PanelDeControl_last_state;
1a000368:	2300      	movs	r3, #0
1a00036a:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00036c:	2301      	movs	r3, #1
1a00036e:	6043      	str	r3, [r0, #4]
}
1a000370:	4770      	bx	lr

1a000372 <exseq_Funcion_TRIANGULAR>:

/* Default exit sequence for state TRIANGULAR */
static void exseq_Funcion_TRIANGULAR(PanelDeControl* handle)
{
	/* Default exit sequence for state TRIANGULAR */
	handle->stateConfVector[2] = PanelDeControl_last_state;
1a000372:	2300      	movs	r3, #0
1a000374:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000376:	2302      	movs	r3, #2
1a000378:	6043      	str	r3, [r0, #4]
}
1a00037a:	4770      	bx	lr

1a00037c <exseq_Funcion_CUADRADA>:

/* Default exit sequence for state CUADRADA */
static void exseq_Funcion_CUADRADA(PanelDeControl* handle)
{
	/* Default exit sequence for state CUADRADA */
	handle->stateConfVector[2] = PanelDeControl_last_state;
1a00037c:	2300      	movs	r3, #0
1a00037e:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000380:	2302      	movs	r3, #2
1a000382:	6043      	str	r3, [r0, #4]
}
1a000384:	4770      	bx	lr

1a000386 <exseq_Funcion_SENOIDAL>:

/* Default exit sequence for state SENOIDAL */
static void exseq_Funcion_SENOIDAL(PanelDeControl* handle)
{
	/* Default exit sequence for state SENOIDAL */
	handle->stateConfVector[2] = PanelDeControl_last_state;
1a000386:	2300      	movs	r3, #0
1a000388:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a00038a:	2302      	movs	r3, #2
1a00038c:	6043      	str	r3, [r0, #4]
}
1a00038e:	4770      	bx	lr

1a000390 <exseq_Magnitud_TENSION>:

/* Default exit sequence for state TENSION */
static void exseq_Magnitud_TENSION(PanelDeControl* handle)
{
	/* Default exit sequence for state TENSION */
	handle->stateConfVector[3] = PanelDeControl_last_state;
1a000390:	2300      	movs	r3, #0
1a000392:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000394:	2303      	movs	r3, #3
1a000396:	6043      	str	r3, [r0, #4]
}
1a000398:	4770      	bx	lr

1a00039a <exseq_Magnitud_FRECUENCIA>:

/* Default exit sequence for state FRECUENCIA */
static void exseq_Magnitud_FRECUENCIA(PanelDeControl* handle)
{
	/* Default exit sequence for state FRECUENCIA */
	handle->stateConfVector[3] = PanelDeControl_last_state;
1a00039a:	2300      	movs	r3, #0
1a00039c:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a00039e:	2303      	movs	r3, #3
1a0003a0:	6043      	str	r3, [r0, #4]
}
1a0003a2:	4770      	bx	lr

1a0003a4 <react_TECX__entry_Default>:
	}
}

/* Default react sequence for initial entry  */
static void react_TECX__entry_Default(PanelDeControl* handle)
{
1a0003a4:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a0003a6:	f7ff ffbb 	bl	1a000320 <enseq_TECX_NO_OPRIMIDO_default>
}
1a0003aa:	bd08      	pop	{r3, pc}

1a0003ac <enseq_TECX_default>:
{
1a0003ac:	b508      	push	{r3, lr}
	react_TECX__entry_Default(handle);
1a0003ae:	f7ff fff9 	bl	1a0003a4 <react_TECX__entry_Default>
}
1a0003b2:	bd08      	pop	{r3, pc}

1a0003b4 <react_main_region__entry_Default>:

/* Default react sequence for initial entry  */
static void react_main_region__entry_Default(PanelDeControl* handle)
{
1a0003b4:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_main_region_ESPERA_default(handle);
1a0003b6:	f7ff ffc6 	bl	1a000346 <enseq_main_region_ESPERA_default>
}
1a0003ba:	bd08      	pop	{r3, pc}

1a0003bc <enseq_main_region_default>:
{
1a0003bc:	b508      	push	{r3, lr}
	react_main_region__entry_Default(handle);
1a0003be:	f7ff fff9 	bl	1a0003b4 <react_main_region__entry_Default>
}
1a0003c2:	bd08      	pop	{r3, pc}

1a0003c4 <react>:

static sc_boolean react(PanelDeControl* handle) {
	/* State machine reactions. */
	SC_UNUSED(handle);
	return bool_false;
}
1a0003c4:	2000      	movs	r0, #0
1a0003c6:	4770      	bx	lr

1a0003c8 <TECX_OPRIMIDO_react>:
			}
		} 
	} return did_transition;
}

static sc_boolean TECX_OPRIMIDO_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a0003c8:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state OPRIMIDO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0003ca:	460d      	mov	r5, r1
1a0003cc:	b131      	cbz	r1, 1a0003dc <TECX_OPRIMIDO_react+0x14>
1a0003ce:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
1a0003d0:	f7ff fff8 	bl	1a0003c4 <react>
1a0003d4:	b910      	cbnz	r0, 1a0003dc <TECX_OPRIMIDO_react+0x14>
		{ 
			if (handle->iface.evTECXNoOprimido_raised == bool_true)
1a0003d6:	7b23      	ldrb	r3, [r4, #12]
1a0003d8:	b913      	cbnz	r3, 1a0003e0 <TECX_OPRIMIDO_react+0x18>
			{ 
				exseq_TECX_OPRIMIDO(handle);
				enseq_TECX_NO_OPRIMIDO_default(handle);
			}  else
			{
				did_transition = bool_false;
1a0003da:	461d      	mov	r5, r3
			}
		} 
	} return did_transition;
}
1a0003dc:	4628      	mov	r0, r5
1a0003de:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_OPRIMIDO(handle);
1a0003e0:	4620      	mov	r0, r4
1a0003e2:	f7ff ffb9 	bl	1a000358 <exseq_TECX_OPRIMIDO>
				enseq_TECX_NO_OPRIMIDO_default(handle);
1a0003e6:	4620      	mov	r0, r4
1a0003e8:	f7ff ff9a 	bl	1a000320 <enseq_TECX_NO_OPRIMIDO_default>
1a0003ec:	e7f6      	b.n	1a0003dc <TECX_OPRIMIDO_react+0x14>

1a0003ee <TECX_VALIDACION_react>:

static sc_boolean TECX_VALIDACION_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a0003ee:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state VALIDACION. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0003f0:	460d      	mov	r5, r1
1a0003f2:	b141      	cbz	r1, 1a000406 <TECX_VALIDACION_react+0x18>
1a0003f4:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
1a0003f6:	f7ff ffe5 	bl	1a0003c4 <react>
1a0003fa:	b920      	cbnz	r0, 1a000406 <TECX_VALIDACION_react+0x18>
		{ 
			if (handle->iface.evTECXOprimido_raised == bool_true)
1a0003fc:	7b63      	ldrb	r3, [r4, #13]
1a0003fe:	b923      	cbnz	r3, 1a00040a <TECX_VALIDACION_react+0x1c>
			{ 
				exseq_TECX_VALIDACION(handle);
				enseq_TECX_OPRIMIDO_default(handle);
			}  else
			{
				if (handle->iface.evTECXNoOprimido_raised == bool_true)
1a000400:	7b23      	ldrb	r3, [r4, #12]
1a000402:	b94b      	cbnz	r3, 1a000418 <TECX_VALIDACION_react+0x2a>
				{ 
					exseq_TECX_VALIDACION(handle);
					enseq_TECX_NO_OPRIMIDO_default(handle);
				}  else
				{
					did_transition = bool_false;
1a000404:	461d      	mov	r5, r3
				}
			}
		} 
	} return did_transition;
}
1a000406:	4628      	mov	r0, r5
1a000408:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_VALIDACION(handle);
1a00040a:	4620      	mov	r0, r4
1a00040c:	f7ff ffa8 	bl	1a000360 <exseq_TECX_VALIDACION>
				enseq_TECX_OPRIMIDO_default(handle);
1a000410:	4620      	mov	r0, r4
1a000412:	f7ff ff8a 	bl	1a00032a <enseq_TECX_OPRIMIDO_default>
1a000416:	e7f6      	b.n	1a000406 <TECX_VALIDACION_react+0x18>
					exseq_TECX_VALIDACION(handle);
1a000418:	4620      	mov	r0, r4
1a00041a:	f7ff ffa1 	bl	1a000360 <exseq_TECX_VALIDACION>
					enseq_TECX_NO_OPRIMIDO_default(handle);
1a00041e:	4620      	mov	r0, r4
1a000420:	f7ff ff7e 	bl	1a000320 <enseq_TECX_NO_OPRIMIDO_default>
1a000424:	e7ef      	b.n	1a000406 <TECX_VALIDACION_react+0x18>

1a000426 <enact_Funcion_TRIANGULAR>:
{
1a000426:	b510      	push	{r4, lr}
1a000428:	4604      	mov	r4, r0
	panelDeControlIface_opSetForma(handle, PANELDECONTROL_PANELDECONTROLIFACE_TRIANG);
1a00042a:	2100      	movs	r1, #0
1a00042c:	f001 fb13 	bl	1a001a56 <panelDeControlIface_opSetForma>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LEDG, PANELDECONTROL_PANELDECONTROLIFACE_LED_ON);
1a000430:	2201      	movs	r2, #1
1a000432:	4611      	mov	r1, r2
1a000434:	4620      	mov	r0, r4
1a000436:	f001 fad9 	bl	1a0019ec <panelDeControlIface_opLED>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LEDR, PANELDECONTROL_PANELDECONTROLIFACE_LED_OFF);
1a00043a:	2200      	movs	r2, #0
1a00043c:	4611      	mov	r1, r2
1a00043e:	4620      	mov	r0, r4
1a000440:	f001 fad4 	bl	1a0019ec <panelDeControlIface_opLED>
}
1a000444:	bd10      	pop	{r4, pc}

1a000446 <enseq_Funcion_TRIANGULAR_default>:
{
1a000446:	b510      	push	{r4, lr}
1a000448:	4604      	mov	r4, r0
	enact_Funcion_TRIANGULAR(handle);
1a00044a:	f7ff ffec 	bl	1a000426 <enact_Funcion_TRIANGULAR>
	handle->stateConfVector[2] = PanelDeControl_Funcion_TRIANGULAR;
1a00044e:	2306      	movs	r3, #6
1a000450:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000452:	2302      	movs	r3, #2
1a000454:	6063      	str	r3, [r4, #4]
}
1a000456:	bd10      	pop	{r4, pc}

1a000458 <react_Funcion__entry_Default>:
{
1a000458:	b508      	push	{r3, lr}
	enseq_Funcion_TRIANGULAR_default(handle);
1a00045a:	f7ff fff4 	bl	1a000446 <enseq_Funcion_TRIANGULAR_default>
}
1a00045e:	bd08      	pop	{r3, pc}

1a000460 <enseq_Funcion_default>:
{
1a000460:	b508      	push	{r3, lr}
	react_Funcion__entry_Default(handle);
1a000462:	f7ff fff9 	bl	1a000458 <react_Funcion__entry_Default>
}
1a000466:	bd08      	pop	{r3, pc}

1a000468 <Funcion_SENOIDAL_react>:
			did_transition = bool_false;
		}
	} return did_transition;
}

static sc_boolean Funcion_SENOIDAL_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a000468:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state SENOIDAL. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a00046a:	460d      	mov	r5, r1
1a00046c:	b119      	cbz	r1, 1a000476 <Funcion_SENOIDAL_react+0xe>
1a00046e:	4604      	mov	r4, r0
	{ 
		if (handle->iface.evForma_raised == bool_true)
1a000470:	7a03      	ldrb	r3, [r0, #8]
1a000472:	b913      	cbnz	r3, 1a00047a <Funcion_SENOIDAL_react+0x12>
		{ 
			exseq_Funcion_SENOIDAL(handle);
			enseq_Funcion_TRIANGULAR_default(handle);
		}  else
		{
			did_transition = bool_false;
1a000474:	461d      	mov	r5, r3
		}
	} return did_transition;
}
1a000476:	4628      	mov	r0, r5
1a000478:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Funcion_SENOIDAL(handle);
1a00047a:	f7ff ff84 	bl	1a000386 <exseq_Funcion_SENOIDAL>
			enseq_Funcion_TRIANGULAR_default(handle);
1a00047e:	4620      	mov	r0, r4
1a000480:	f7ff ffe1 	bl	1a000446 <enseq_Funcion_TRIANGULAR_default>
1a000484:	e7f7      	b.n	1a000476 <Funcion_SENOIDAL_react+0xe>

1a000486 <main_region_ESPERA_react>:
static sc_boolean main_region_ESPERA_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a000486:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000488:	460d      	mov	r5, r1
1a00048a:	2900      	cmp	r1, #0
1a00048c:	d049      	beq.n	1a000522 <main_region_ESPERA_react+0x9c>
1a00048e:	4604      	mov	r4, r0
		if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PANELDECONTROL_PANELDECONTROLIFACE_TEC4)) == bool_true))
1a000490:	7d03      	ldrb	r3, [r0, #20]
1a000492:	b113      	cbz	r3, 1a00049a <main_region_ESPERA_react+0x14>
1a000494:	6a02      	ldr	r2, [r0, #32]
1a000496:	2a08      	cmp	r2, #8
1a000498:	d00d      	beq.n	1a0004b6 <main_region_ESPERA_react+0x30>
			if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PANELDECONTROL_PANELDECONTROLIFACE_TEC3)) == bool_true))
1a00049a:	b113      	cbz	r3, 1a0004a2 <main_region_ESPERA_react+0x1c>
1a00049c:	6a22      	ldr	r2, [r4, #32]
1a00049e:	2a04      	cmp	r2, #4
1a0004a0:	d016      	beq.n	1a0004d0 <main_region_ESPERA_react+0x4a>
				if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PANELDECONTROL_PANELDECONTROLIFACE_TEC2)) == bool_true))
1a0004a2:	b113      	cbz	r3, 1a0004aa <main_region_ESPERA_react+0x24>
1a0004a4:	6a22      	ldr	r2, [r4, #32]
1a0004a6:	2a02      	cmp	r2, #2
1a0004a8:	d01f      	beq.n	1a0004ea <main_region_ESPERA_react+0x64>
					if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PANELDECONTROL_PANELDECONTROLIFACE_TEC1)) == bool_true))
1a0004aa:	b3cb      	cbz	r3, 1a000520 <main_region_ESPERA_react+0x9a>
1a0004ac:	6a23      	ldr	r3, [r4, #32]
1a0004ae:	2b01      	cmp	r3, #1
1a0004b0:	d028      	beq.n	1a000504 <main_region_ESPERA_react+0x7e>
						did_transition = bool_false;
1a0004b2:	2500      	movs	r5, #0
1a0004b4:	e035      	b.n	1a000522 <main_region_ESPERA_react+0x9c>
			exseq_main_region_ESPERA(handle);
1a0004b6:	f7ff ff57 	bl	1a000368 <exseq_main_region_ESPERA>
			handle->iface.evMagnitud_raised = bool_true;
1a0004ba:	2301      	movs	r3, #1
1a0004bc:	7263      	strb	r3, [r4, #9]
			panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED3, PANELDECONTROL_PANELDECONTROLIFACE_LED_OFF);
1a0004be:	2200      	movs	r2, #0
1a0004c0:	2105      	movs	r1, #5
1a0004c2:	4620      	mov	r0, r4
1a0004c4:	f001 fa92 	bl	1a0019ec <panelDeControlIface_opLED>
			enseq_main_region_ESPERA_default(handle);
1a0004c8:	4620      	mov	r0, r4
1a0004ca:	f7ff ff3c 	bl	1a000346 <enseq_main_region_ESPERA_default>
1a0004ce:	e028      	b.n	1a000522 <main_region_ESPERA_react+0x9c>
				exseq_main_region_ESPERA(handle);
1a0004d0:	4620      	mov	r0, r4
1a0004d2:	f7ff ff49 	bl	1a000368 <exseq_main_region_ESPERA>
				handle->iface.evUp_raised = bool_true;
1a0004d6:	2201      	movs	r2, #1
1a0004d8:	72a2      	strb	r2, [r4, #10]
				panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED3, PANELDECONTROL_PANELDECONTROLIFACE_LED_ON);
1a0004da:	2105      	movs	r1, #5
1a0004dc:	4620      	mov	r0, r4
1a0004de:	f001 fa85 	bl	1a0019ec <panelDeControlIface_opLED>
				enseq_main_region_ESPERA_default(handle);
1a0004e2:	4620      	mov	r0, r4
1a0004e4:	f7ff ff2f 	bl	1a000346 <enseq_main_region_ESPERA_default>
1a0004e8:	e01b      	b.n	1a000522 <main_region_ESPERA_react+0x9c>
					exseq_main_region_ESPERA(handle);
1a0004ea:	4620      	mov	r0, r4
1a0004ec:	f7ff ff3c 	bl	1a000368 <exseq_main_region_ESPERA>
					handle->iface.evDown_raised = bool_true;
1a0004f0:	2201      	movs	r2, #1
1a0004f2:	72e2      	strb	r2, [r4, #11]
					panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED3, PANELDECONTROL_PANELDECONTROLIFACE_LED_ON);
1a0004f4:	2105      	movs	r1, #5
1a0004f6:	4620      	mov	r0, r4
1a0004f8:	f001 fa78 	bl	1a0019ec <panelDeControlIface_opLED>
					enseq_main_region_ESPERA_default(handle);
1a0004fc:	4620      	mov	r0, r4
1a0004fe:	f7ff ff22 	bl	1a000346 <enseq_main_region_ESPERA_default>
1a000502:	e00e      	b.n	1a000522 <main_region_ESPERA_react+0x9c>
						exseq_main_region_ESPERA(handle);
1a000504:	4620      	mov	r0, r4
1a000506:	f7ff ff2f 	bl	1a000368 <exseq_main_region_ESPERA>
						handle->iface.evForma_raised = bool_true;
1a00050a:	2301      	movs	r3, #1
1a00050c:	7223      	strb	r3, [r4, #8]
						panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED3, PANELDECONTROL_PANELDECONTROLIFACE_LED_OFF);
1a00050e:	2200      	movs	r2, #0
1a000510:	2105      	movs	r1, #5
1a000512:	4620      	mov	r0, r4
1a000514:	f001 fa6a 	bl	1a0019ec <panelDeControlIface_opLED>
						enseq_main_region_ESPERA_default(handle);
1a000518:	4620      	mov	r0, r4
1a00051a:	f7ff ff14 	bl	1a000346 <enseq_main_region_ESPERA_default>
1a00051e:	e000      	b.n	1a000522 <main_region_ESPERA_react+0x9c>
						did_transition = bool_false;
1a000520:	461d      	mov	r5, r3
}
1a000522:	4628      	mov	r0, r5
1a000524:	bd38      	pop	{r3, r4, r5, pc}

1a000526 <enact_Funcion_CUADRADA>:
{
1a000526:	b510      	push	{r4, lr}
1a000528:	4604      	mov	r4, r0
	panelDeControlIface_opSetForma(handle, PANELDECONTROL_PANELDECONTROLIFACE_CUADR);
1a00052a:	2101      	movs	r1, #1
1a00052c:	f001 fa93 	bl	1a001a56 <panelDeControlIface_opSetForma>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LEDB, PANELDECONTROL_PANELDECONTROLIFACE_LED_ON);
1a000530:	2201      	movs	r2, #1
1a000532:	2102      	movs	r1, #2
1a000534:	4620      	mov	r0, r4
1a000536:	f001 fa59 	bl	1a0019ec <panelDeControlIface_opLED>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LEDG, PANELDECONTROL_PANELDECONTROLIFACE_LED_OFF);
1a00053a:	2200      	movs	r2, #0
1a00053c:	2101      	movs	r1, #1
1a00053e:	4620      	mov	r0, r4
1a000540:	f001 fa54 	bl	1a0019ec <panelDeControlIface_opLED>
}
1a000544:	bd10      	pop	{r4, pc}

1a000546 <enseq_Funcion_CUADRADA_default>:
{
1a000546:	b510      	push	{r4, lr}
1a000548:	4604      	mov	r4, r0
	enact_Funcion_CUADRADA(handle);
1a00054a:	f7ff ffec 	bl	1a000526 <enact_Funcion_CUADRADA>
	handle->stateConfVector[2] = PanelDeControl_Funcion_CUADRADA;
1a00054e:	2307      	movs	r3, #7
1a000550:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000552:	2302      	movs	r3, #2
1a000554:	6063      	str	r3, [r4, #4]
}
1a000556:	bd10      	pop	{r4, pc}

1a000558 <Funcion_TRIANGULAR_react>:
static sc_boolean Funcion_TRIANGULAR_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a000558:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a00055a:	460d      	mov	r5, r1
1a00055c:	b119      	cbz	r1, 1a000566 <Funcion_TRIANGULAR_react+0xe>
1a00055e:	4604      	mov	r4, r0
		if (handle->iface.evForma_raised == bool_true)
1a000560:	7a03      	ldrb	r3, [r0, #8]
1a000562:	b913      	cbnz	r3, 1a00056a <Funcion_TRIANGULAR_react+0x12>
			did_transition = bool_false;
1a000564:	461d      	mov	r5, r3
}
1a000566:	4628      	mov	r0, r5
1a000568:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Funcion_TRIANGULAR(handle);
1a00056a:	f7ff ff02 	bl	1a000372 <exseq_Funcion_TRIANGULAR>
			enseq_Funcion_CUADRADA_default(handle);
1a00056e:	4620      	mov	r0, r4
1a000570:	f7ff ffe9 	bl	1a000546 <enseq_Funcion_CUADRADA_default>
1a000574:	e7f7      	b.n	1a000566 <Funcion_TRIANGULAR_react+0xe>

1a000576 <enact_Funcion_SENOIDAL>:
{
1a000576:	b510      	push	{r4, lr}
1a000578:	4604      	mov	r4, r0
	panelDeControlIface_opSetForma(handle, PANELDECONTROL_PANELDECONTROLIFACE_SENOI);
1a00057a:	2102      	movs	r1, #2
1a00057c:	f001 fa6b 	bl	1a001a56 <panelDeControlIface_opSetForma>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LEDR, PANELDECONTROL_PANELDECONTROLIFACE_LED_ON);
1a000580:	2201      	movs	r2, #1
1a000582:	2100      	movs	r1, #0
1a000584:	4620      	mov	r0, r4
1a000586:	f001 fa31 	bl	1a0019ec <panelDeControlIface_opLED>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LEDB, PANELDECONTROL_PANELDECONTROLIFACE_LED_OFF);
1a00058a:	2200      	movs	r2, #0
1a00058c:	2102      	movs	r1, #2
1a00058e:	4620      	mov	r0, r4
1a000590:	f001 fa2c 	bl	1a0019ec <panelDeControlIface_opLED>
}
1a000594:	bd10      	pop	{r4, pc}

1a000596 <enseq_Funcion_SENOIDAL_default>:
{
1a000596:	b510      	push	{r4, lr}
1a000598:	4604      	mov	r4, r0
	enact_Funcion_SENOIDAL(handle);
1a00059a:	f7ff ffec 	bl	1a000576 <enact_Funcion_SENOIDAL>
	handle->stateConfVector[2] = PanelDeControl_Funcion_SENOIDAL;
1a00059e:	2308      	movs	r3, #8
1a0005a0:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a0005a2:	2302      	movs	r3, #2
1a0005a4:	6063      	str	r3, [r4, #4]
}
1a0005a6:	bd10      	pop	{r4, pc}

1a0005a8 <Funcion_CUADRADA_react>:
static sc_boolean Funcion_CUADRADA_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a0005a8:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0005aa:	460d      	mov	r5, r1
1a0005ac:	b119      	cbz	r1, 1a0005b6 <Funcion_CUADRADA_react+0xe>
1a0005ae:	4604      	mov	r4, r0
		if (handle->iface.evForma_raised == bool_true)
1a0005b0:	7a03      	ldrb	r3, [r0, #8]
1a0005b2:	b913      	cbnz	r3, 1a0005ba <Funcion_CUADRADA_react+0x12>
			did_transition = bool_false;
1a0005b4:	461d      	mov	r5, r3
}
1a0005b6:	4628      	mov	r0, r5
1a0005b8:	bd38      	pop	{r3, r4, r5, pc}
			exseq_Funcion_CUADRADA(handle);
1a0005ba:	f7ff fedf 	bl	1a00037c <exseq_Funcion_CUADRADA>
			enseq_Funcion_SENOIDAL_default(handle);
1a0005be:	4620      	mov	r0, r4
1a0005c0:	f7ff ffe9 	bl	1a000596 <enseq_Funcion_SENOIDAL_default>
1a0005c4:	e7f7      	b.n	1a0005b6 <Funcion_CUADRADA_react+0xe>

1a0005c6 <enact_Magnitud_TENSION>:
{
1a0005c6:	b510      	push	{r4, lr}
1a0005c8:	4604      	mov	r4, r0
	panelDeControlIface_opSetTension(handle, handle->internal.TENS);
1a0005ca:	6981      	ldr	r1, [r0, #24]
1a0005cc:	f001 fa45 	bl	1a001a5a <panelDeControlIface_opSetTension>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED1, PANELDECONTROL_PANELDECONTROLIFACE_LED_ON);
1a0005d0:	2201      	movs	r2, #1
1a0005d2:	2103      	movs	r1, #3
1a0005d4:	4620      	mov	r0, r4
1a0005d6:	f001 fa09 	bl	1a0019ec <panelDeControlIface_opLED>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED2, PANELDECONTROL_PANELDECONTROLIFACE_LED_OFF);
1a0005da:	2200      	movs	r2, #0
1a0005dc:	2104      	movs	r1, #4
1a0005de:	4620      	mov	r0, r4
1a0005e0:	f001 fa04 	bl	1a0019ec <panelDeControlIface_opLED>
}
1a0005e4:	bd10      	pop	{r4, pc}

1a0005e6 <enseq_Magnitud_TENSION_default>:
{
1a0005e6:	b510      	push	{r4, lr}
1a0005e8:	4604      	mov	r4, r0
	enact_Magnitud_TENSION(handle);
1a0005ea:	f7ff ffec 	bl	1a0005c6 <enact_Magnitud_TENSION>
	handle->stateConfVector[3] = PanelDeControl_Magnitud_TENSION;
1a0005ee:	2309      	movs	r3, #9
1a0005f0:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a0005f2:	2303      	movs	r3, #3
1a0005f4:	6063      	str	r3, [r4, #4]
}
1a0005f6:	bd10      	pop	{r4, pc}

1a0005f8 <react_Magnitud__entry_Default>:
{
1a0005f8:	b508      	push	{r3, lr}
	enseq_Magnitud_TENSION_default(handle);
1a0005fa:	f7ff fff4 	bl	1a0005e6 <enseq_Magnitud_TENSION_default>
}
1a0005fe:	bd08      	pop	{r3, pc}

1a000600 <enseq_Magnitud_default>:
{
1a000600:	b508      	push	{r3, lr}
	react_Magnitud__entry_Default(handle);
1a000602:	f7ff fff9 	bl	1a0005f8 <react_Magnitud__entry_Default>
}
1a000606:	bd08      	pop	{r3, pc}

1a000608 <exact_TECX_DEBOUNCE>:
{
1a000608:	b508      	push	{r3, lr}
	panelDeControl_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.panelDeControl_TECX_DEBOUNCE_tev0_raised) );		
1a00060a:	f100 0124 	add.w	r1, r0, #36	; 0x24
1a00060e:	f001 fa03 	bl	1a001a18 <panelDeControl_unsetTimer>
}
1a000612:	bd08      	pop	{r3, pc}

1a000614 <exseq_TECX_DEBOUNCE>:
{
1a000614:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = PanelDeControl_last_state;
1a000616:	2200      	movs	r2, #0
1a000618:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00061a:	6042      	str	r2, [r0, #4]
	exact_TECX_DEBOUNCE(handle);
1a00061c:	f7ff fff4 	bl	1a000608 <exact_TECX_DEBOUNCE>
}
1a000620:	bd08      	pop	{r3, pc}

1a000622 <TECX_DEBOUNCE_react>:
static sc_boolean TECX_DEBOUNCE_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a000622:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000624:	460d      	mov	r5, r1
1a000626:	b139      	cbz	r1, 1a000638 <TECX_DEBOUNCE_react+0x16>
1a000628:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
1a00062a:	f7ff fecb 	bl	1a0003c4 <react>
1a00062e:	b918      	cbnz	r0, 1a000638 <TECX_DEBOUNCE_react+0x16>
			if (handle->timeEvents.panelDeControl_TECX_DEBOUNCE_tev0_raised == bool_true)
1a000630:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
1a000634:	b913      	cbnz	r3, 1a00063c <TECX_DEBOUNCE_react+0x1a>
				did_transition = bool_false;
1a000636:	461d      	mov	r5, r3
}
1a000638:	4628      	mov	r0, r5
1a00063a:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_DEBOUNCE(handle);
1a00063c:	4620      	mov	r0, r4
1a00063e:	f7ff ffe9 	bl	1a000614 <exseq_TECX_DEBOUNCE>
				enseq_TECX_VALIDACION_default(handle);
1a000642:	4620      	mov	r0, r4
1a000644:	f7ff fe7a 	bl	1a00033c <enseq_TECX_VALIDACION_default>
1a000648:	e7f6      	b.n	1a000638 <TECX_DEBOUNCE_react+0x16>

1a00064a <enact_TECX_DEBOUNCE>:
{
1a00064a:	b508      	push	{r3, lr}
	panelDeControl_setTimer(handle, (sc_eventid) &(handle->timeEvents.panelDeControl_TECX_DEBOUNCE_tev0_raised) , 100, bool_false);
1a00064c:	2300      	movs	r3, #0
1a00064e:	2264      	movs	r2, #100	; 0x64
1a000650:	f100 0124 	add.w	r1, r0, #36	; 0x24
1a000654:	f001 f9d2 	bl	1a0019fc <panelDeControl_setTimer>
}
1a000658:	bd08      	pop	{r3, pc}

1a00065a <enseq_TECX_DEBOUNCE_default>:
{
1a00065a:	b510      	push	{r4, lr}
1a00065c:	4604      	mov	r4, r0
	enact_TECX_DEBOUNCE(handle);
1a00065e:	f7ff fff4 	bl	1a00064a <enact_TECX_DEBOUNCE>
	handle->stateConfVector[0] = PanelDeControl_TECX_DEBOUNCE;
1a000662:	2301      	movs	r3, #1
1a000664:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000666:	2300      	movs	r3, #0
1a000668:	6063      	str	r3, [r4, #4]
}
1a00066a:	bd10      	pop	{r4, pc}

1a00066c <TECX_NO_OPRIMIDO_react>:
static sc_boolean TECX_NO_OPRIMIDO_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a00066c:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a00066e:	460d      	mov	r5, r1
1a000670:	b131      	cbz	r1, 1a000680 <TECX_NO_OPRIMIDO_react+0x14>
1a000672:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
1a000674:	f7ff fea6 	bl	1a0003c4 <react>
1a000678:	b910      	cbnz	r0, 1a000680 <TECX_NO_OPRIMIDO_react+0x14>
			if (handle->iface.evTECXOprimido_raised == bool_true)
1a00067a:	7b63      	ldrb	r3, [r4, #13]
1a00067c:	b913      	cbnz	r3, 1a000684 <TECX_NO_OPRIMIDO_react+0x18>
				did_transition = bool_false;
1a00067e:	461d      	mov	r5, r3
}
1a000680:	4628      	mov	r0, r5
1a000682:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_NO_OPRIMIDO(handle);
1a000684:	4620      	mov	r0, r4
1a000686:	f7ff fe63 	bl	1a000350 <exseq_TECX_NO_OPRIMIDO>
				enseq_TECX_DEBOUNCE_default(handle);
1a00068a:	4620      	mov	r0, r4
1a00068c:	f7ff ffe5 	bl	1a00065a <enseq_TECX_DEBOUNCE_default>
1a000690:	e7f6      	b.n	1a000680 <TECX_NO_OPRIMIDO_react+0x14>

1a000692 <enact_Magnitud_FRECUENCIA>:
{
1a000692:	b510      	push	{r4, lr}
1a000694:	4604      	mov	r4, r0
	panelDeControlIface_opSetFrecuencia(handle, handle->internal.FREC);
1a000696:	69c1      	ldr	r1, [r0, #28]
1a000698:	f001 f9de 	bl	1a001a58 <panelDeControlIface_opSetFrecuencia>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED2, PANELDECONTROL_PANELDECONTROLIFACE_LED_ON);
1a00069c:	2201      	movs	r2, #1
1a00069e:	2104      	movs	r1, #4
1a0006a0:	4620      	mov	r0, r4
1a0006a2:	f001 f9a3 	bl	1a0019ec <panelDeControlIface_opLED>
	panelDeControlIface_opLED(handle, PANELDECONTROL_PANELDECONTROLIFACE_LED1, PANELDECONTROL_PANELDECONTROLIFACE_LED_OFF);
1a0006a6:	2200      	movs	r2, #0
1a0006a8:	2103      	movs	r1, #3
1a0006aa:	4620      	mov	r0, r4
1a0006ac:	f001 f99e 	bl	1a0019ec <panelDeControlIface_opLED>
}
1a0006b0:	bd10      	pop	{r4, pc}

1a0006b2 <enseq_Magnitud_FRECUENCIA_default>:
{
1a0006b2:	b510      	push	{r4, lr}
1a0006b4:	4604      	mov	r4, r0
	enact_Magnitud_FRECUENCIA(handle);
1a0006b6:	f7ff ffec 	bl	1a000692 <enact_Magnitud_FRECUENCIA>
	handle->stateConfVector[3] = PanelDeControl_Magnitud_FRECUENCIA;
1a0006ba:	230a      	movs	r3, #10
1a0006bc:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a0006be:	2303      	movs	r3, #3
1a0006c0:	6063      	str	r3, [r4, #4]
}
1a0006c2:	bd10      	pop	{r4, pc}

1a0006c4 <Magnitud_TENSION_react>:

static sc_boolean Magnitud_TENSION_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a0006c4:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state TENSION. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0006c6:	460d      	mov	r5, r1
1a0006c8:	b169      	cbz	r1, 1a0006e6 <Magnitud_TENSION_react+0x22>
1a0006ca:	4604      	mov	r4, r0
	{ 
		if (handle->iface.evMagnitud_raised == bool_true)
1a0006cc:	7a43      	ldrb	r3, [r0, #9]
1a0006ce:	b92b      	cbnz	r3, 1a0006dc <Magnitud_TENSION_react+0x18>
		{ 
			exseq_Magnitud_TENSION(handle);
			enseq_Magnitud_FRECUENCIA_default(handle);
		}  else
		{
			if (handle->iface.evUp_raised == bool_true)
1a0006d0:	7a83      	ldrb	r3, [r0, #10]
1a0006d2:	b953      	cbnz	r3, 1a0006ea <Magnitud_TENSION_react+0x26>
				exseq_Magnitud_TENSION(handle);
				handle->internal.TENS++;
				enseq_Magnitud_TENSION_default(handle);
			}  else
			{
				if (handle->iface.evDown_raised == bool_true)
1a0006d4:	7ac3      	ldrb	r3, [r0, #11]
1a0006d6:	b98b      	cbnz	r3, 1a0006fc <Magnitud_TENSION_react+0x38>
					exseq_Magnitud_TENSION(handle);
					handle->internal.TENS--;
					enseq_Magnitud_TENSION_default(handle);
				}  else
				{
					did_transition = bool_false;
1a0006d8:	461d      	mov	r5, r3
1a0006da:	e004      	b.n	1a0006e6 <Magnitud_TENSION_react+0x22>
			exseq_Magnitud_TENSION(handle);
1a0006dc:	f7ff fe58 	bl	1a000390 <exseq_Magnitud_TENSION>
			enseq_Magnitud_FRECUENCIA_default(handle);
1a0006e0:	4620      	mov	r0, r4
1a0006e2:	f7ff ffe6 	bl	1a0006b2 <enseq_Magnitud_FRECUENCIA_default>
				}
			}
		}
	} return did_transition;
}
1a0006e6:	4628      	mov	r0, r5
1a0006e8:	bd38      	pop	{r3, r4, r5, pc}
				exseq_Magnitud_TENSION(handle);
1a0006ea:	f7ff fe51 	bl	1a000390 <exseq_Magnitud_TENSION>
				handle->internal.TENS++;
1a0006ee:	69a3      	ldr	r3, [r4, #24]
1a0006f0:	3301      	adds	r3, #1
1a0006f2:	61a3      	str	r3, [r4, #24]
				enseq_Magnitud_TENSION_default(handle);
1a0006f4:	4620      	mov	r0, r4
1a0006f6:	f7ff ff76 	bl	1a0005e6 <enseq_Magnitud_TENSION_default>
1a0006fa:	e7f4      	b.n	1a0006e6 <Magnitud_TENSION_react+0x22>
					exseq_Magnitud_TENSION(handle);
1a0006fc:	f7ff fe48 	bl	1a000390 <exseq_Magnitud_TENSION>
					handle->internal.TENS--;
1a000700:	69a3      	ldr	r3, [r4, #24]
1a000702:	3b01      	subs	r3, #1
1a000704:	61a3      	str	r3, [r4, #24]
					enseq_Magnitud_TENSION_default(handle);
1a000706:	4620      	mov	r0, r4
1a000708:	f7ff ff6d 	bl	1a0005e6 <enseq_Magnitud_TENSION_default>
1a00070c:	e7eb      	b.n	1a0006e6 <Magnitud_TENSION_react+0x22>

1a00070e <Magnitud_FRECUENCIA_react>:

static sc_boolean Magnitud_FRECUENCIA_react(PanelDeControl* handle, const sc_boolean try_transition) {
1a00070e:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state FRECUENCIA. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000710:	460d      	mov	r5, r1
1a000712:	b169      	cbz	r1, 1a000730 <Magnitud_FRECUENCIA_react+0x22>
1a000714:	4604      	mov	r4, r0
	{ 
		if (handle->iface.evMagnitud_raised == bool_true)
1a000716:	7a43      	ldrb	r3, [r0, #9]
1a000718:	b92b      	cbnz	r3, 1a000726 <Magnitud_FRECUENCIA_react+0x18>
		{ 
			exseq_Magnitud_FRECUENCIA(handle);
			enseq_Magnitud_TENSION_default(handle);
		}  else
		{
			if (handle->iface.evUp_raised == bool_true)
1a00071a:	7a83      	ldrb	r3, [r0, #10]
1a00071c:	b953      	cbnz	r3, 1a000734 <Magnitud_FRECUENCIA_react+0x26>
				exseq_Magnitud_FRECUENCIA(handle);
				handle->internal.FREC++;
				enseq_Magnitud_FRECUENCIA_default(handle);
			}  else
			{
				if (handle->iface.evDown_raised == bool_true)
1a00071e:	7ac3      	ldrb	r3, [r0, #11]
1a000720:	b98b      	cbnz	r3, 1a000746 <Magnitud_FRECUENCIA_react+0x38>
					exseq_Magnitud_FRECUENCIA(handle);
					handle->internal.FREC--;
					enseq_Magnitud_FRECUENCIA_default(handle);
				}  else
				{
					did_transition = bool_false;
1a000722:	461d      	mov	r5, r3
1a000724:	e004      	b.n	1a000730 <Magnitud_FRECUENCIA_react+0x22>
			exseq_Magnitud_FRECUENCIA(handle);
1a000726:	f7ff fe38 	bl	1a00039a <exseq_Magnitud_FRECUENCIA>
			enseq_Magnitud_TENSION_default(handle);
1a00072a:	4620      	mov	r0, r4
1a00072c:	f7ff ff5b 	bl	1a0005e6 <enseq_Magnitud_TENSION_default>
				}
			}
		}
	} return did_transition;
}
1a000730:	4628      	mov	r0, r5
1a000732:	bd38      	pop	{r3, r4, r5, pc}
				exseq_Magnitud_FRECUENCIA(handle);
1a000734:	f7ff fe31 	bl	1a00039a <exseq_Magnitud_FRECUENCIA>
				handle->internal.FREC++;
1a000738:	69e3      	ldr	r3, [r4, #28]
1a00073a:	3301      	adds	r3, #1
1a00073c:	61e3      	str	r3, [r4, #28]
				enseq_Magnitud_FRECUENCIA_default(handle);
1a00073e:	4620      	mov	r0, r4
1a000740:	f7ff ffb7 	bl	1a0006b2 <enseq_Magnitud_FRECUENCIA_default>
1a000744:	e7f4      	b.n	1a000730 <Magnitud_FRECUENCIA_react+0x22>
					exseq_Magnitud_FRECUENCIA(handle);
1a000746:	f7ff fe28 	bl	1a00039a <exseq_Magnitud_FRECUENCIA>
					handle->internal.FREC--;
1a00074a:	69e3      	ldr	r3, [r4, #28]
1a00074c:	3b01      	subs	r3, #1
1a00074e:	61e3      	str	r3, [r4, #28]
					enseq_Magnitud_FRECUENCIA_default(handle);
1a000750:	4620      	mov	r0, r4
1a000752:	f7ff ffae 	bl	1a0006b2 <enseq_Magnitud_FRECUENCIA_default>
1a000756:	e7eb      	b.n	1a000730 <Magnitud_FRECUENCIA_react+0x22>

1a000758 <panelDeControl_init>:
{
1a000758:	b538      	push	{r3, r4, r5, lr}
1a00075a:	4604      	mov	r4, r0
	for (i = 0; i < PANELDECONTROL_MAX_ORTHOGONAL_STATES; ++i)
1a00075c:	2300      	movs	r3, #0
1a00075e:	e002      	b.n	1a000766 <panelDeControl_init+0xe>
		handle->stateConfVector[i] = PanelDeControl_last_state;
1a000760:	2200      	movs	r2, #0
1a000762:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < PANELDECONTROL_MAX_ORTHOGONAL_STATES; ++i)
1a000764:	3301      	adds	r3, #1
1a000766:	2b03      	cmp	r3, #3
1a000768:	ddfa      	ble.n	1a000760 <panelDeControl_init+0x8>
	handle->stateConfVectorPosition = 0;
1a00076a:	2500      	movs	r5, #0
1a00076c:	6065      	str	r5, [r4, #4]
	clearInEvents(handle);
1a00076e:	4620      	mov	r0, r4
1a000770:	f7ff fdc6 	bl	1a000300 <clearInEvents>
	handle->internal.TENS = 100;
1a000774:	2364      	movs	r3, #100	; 0x64
1a000776:	61a3      	str	r3, [r4, #24]
	handle->internal.FREC = 100;
1a000778:	61e3      	str	r3, [r4, #28]
	handle->internal.viTecla = 0;
1a00077a:	6225      	str	r5, [r4, #32]
}
1a00077c:	bd38      	pop	{r3, r4, r5, pc}

1a00077e <panelDeControl_enter>:
{
1a00077e:	b510      	push	{r4, lr}
1a000780:	4604      	mov	r4, r0
	enseq_TECX_default(handle);
1a000782:	f7ff fe13 	bl	1a0003ac <enseq_TECX_default>
	enseq_main_region_default(handle);
1a000786:	4620      	mov	r0, r4
1a000788:	f7ff fe18 	bl	1a0003bc <enseq_main_region_default>
	enseq_Funcion_default(handle);
1a00078c:	4620      	mov	r0, r4
1a00078e:	f7ff fe67 	bl	1a000460 <enseq_Funcion_default>
	enseq_Magnitud_default(handle);
1a000792:	4620      	mov	r0, r4
1a000794:	f7ff ff34 	bl	1a000600 <enseq_Magnitud_default>
}
1a000798:	bd10      	pop	{r4, pc}
1a00079a:	Address 0x1a00079a is out of bounds.


1a00079c <panelDeControl_runCycle>:
{
1a00079c:	b510      	push	{r4, lr}
1a00079e:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a0007a0:	2300      	movs	r3, #0
1a0007a2:	6043      	str	r3, [r0, #4]
1a0007a4:	e006      	b.n	1a0007b4 <panelDeControl_runCycle+0x18>
			TECX_DEBOUNCE_react(handle, bool_true);
1a0007a6:	2101      	movs	r1, #1
1a0007a8:	4620      	mov	r0, r4
1a0007aa:	f7ff ff3a 	bl	1a000622 <TECX_DEBOUNCE_react>
		handle->stateConfVectorPosition++)
1a0007ae:	6863      	ldr	r3, [r4, #4]
1a0007b0:	3301      	adds	r3, #1
1a0007b2:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < PANELDECONTROL_MAX_ORTHOGONAL_STATES;
1a0007b4:	6863      	ldr	r3, [r4, #4]
	for (handle->stateConfVectorPosition = 0;
1a0007b6:	2b03      	cmp	r3, #3
1a0007b8:	d847      	bhi.n	1a00084a <panelDeControl_runCycle+0xae>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a0007ba:	5ce3      	ldrb	r3, [r4, r3]
1a0007bc:	3b01      	subs	r3, #1
1a0007be:	2b09      	cmp	r3, #9
1a0007c0:	d8f5      	bhi.n	1a0007ae <panelDeControl_runCycle+0x12>
1a0007c2:	a201      	add	r2, pc, #4	; (adr r2, 1a0007c8 <panelDeControl_runCycle+0x2c>)
1a0007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0007c8:	1a0007a7 	.word	0x1a0007a7
1a0007cc:	1a0007f1 	.word	0x1a0007f1
1a0007d0:	1a0007fb 	.word	0x1a0007fb
1a0007d4:	1a000805 	.word	0x1a000805
1a0007d8:	1a00080f 	.word	0x1a00080f
1a0007dc:	1a000819 	.word	0x1a000819
1a0007e0:	1a000823 	.word	0x1a000823
1a0007e4:	1a00082d 	.word	0x1a00082d
1a0007e8:	1a000837 	.word	0x1a000837
1a0007ec:	1a000841 	.word	0x1a000841
			TECX_NO_OPRIMIDO_react(handle, bool_true);
1a0007f0:	2101      	movs	r1, #1
1a0007f2:	4620      	mov	r0, r4
1a0007f4:	f7ff ff3a 	bl	1a00066c <TECX_NO_OPRIMIDO_react>
			break;
1a0007f8:	e7d9      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			TECX_OPRIMIDO_react(handle, bool_true);
1a0007fa:	2101      	movs	r1, #1
1a0007fc:	4620      	mov	r0, r4
1a0007fe:	f7ff fde3 	bl	1a0003c8 <TECX_OPRIMIDO_react>
			break;
1a000802:	e7d4      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			TECX_VALIDACION_react(handle, bool_true);
1a000804:	2101      	movs	r1, #1
1a000806:	4620      	mov	r0, r4
1a000808:	f7ff fdf1 	bl	1a0003ee <TECX_VALIDACION_react>
			break;
1a00080c:	e7cf      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			main_region_ESPERA_react(handle, bool_true);
1a00080e:	2101      	movs	r1, #1
1a000810:	4620      	mov	r0, r4
1a000812:	f7ff fe38 	bl	1a000486 <main_region_ESPERA_react>
			break;
1a000816:	e7ca      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			Funcion_TRIANGULAR_react(handle, bool_true);
1a000818:	2101      	movs	r1, #1
1a00081a:	4620      	mov	r0, r4
1a00081c:	f7ff fe9c 	bl	1a000558 <Funcion_TRIANGULAR_react>
			break;
1a000820:	e7c5      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			Funcion_CUADRADA_react(handle, bool_true);
1a000822:	2101      	movs	r1, #1
1a000824:	4620      	mov	r0, r4
1a000826:	f7ff febf 	bl	1a0005a8 <Funcion_CUADRADA_react>
			break;
1a00082a:	e7c0      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			Funcion_SENOIDAL_react(handle, bool_true);
1a00082c:	2101      	movs	r1, #1
1a00082e:	4620      	mov	r0, r4
1a000830:	f7ff fe1a 	bl	1a000468 <Funcion_SENOIDAL_react>
			break;
1a000834:	e7bb      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			Magnitud_TENSION_react(handle, bool_true);
1a000836:	2101      	movs	r1, #1
1a000838:	4620      	mov	r0, r4
1a00083a:	f7ff ff43 	bl	1a0006c4 <Magnitud_TENSION_react>
			break;
1a00083e:	e7b6      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
			Magnitud_FRECUENCIA_react(handle, bool_true);
1a000840:	2101      	movs	r1, #1
1a000842:	4620      	mov	r0, r4
1a000844:	f7ff ff63 	bl	1a00070e <Magnitud_FRECUENCIA_react>
			break;
1a000848:	e7b1      	b.n	1a0007ae <panelDeControl_runCycle+0x12>
	clearInEvents(handle);
1a00084a:	4620      	mov	r0, r4
1a00084c:	f7ff fd58 	bl	1a000300 <clearInEvents>
}
1a000850:	bd10      	pop	{r4, pc}
1a000852:	bf00      	nop

1a000854 <panelDeControl_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a000854:	3024      	adds	r0, #36	; 0x24
1a000856:	4288      	cmp	r0, r1
1a000858:	dc04      	bgt.n	1a000864 <panelDeControl_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(PanelDeControlTimeEvents))
1a00085a:	3001      	adds	r0, #1
1a00085c:	4288      	cmp	r0, r1
1a00085e:	d901      	bls.n	1a000864 <panelDeControl_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a000860:	2301      	movs	r3, #1
1a000862:	700b      	strb	r3, [r1, #0]
}
1a000864:	4770      	bx	lr

1a000866 <panelDeControlIface_raise_evTECXNoOprimido>:
	handle->iface.evTECXNoOprimido_raised = bool_true;
1a000866:	2301      	movs	r3, #1
1a000868:	7303      	strb	r3, [r0, #12]
}
1a00086a:	4770      	bx	lr

1a00086c <panelDeControlIface_raise_evTECXOprimido>:
	handle->iface.evTECXOprimido_value = value;
1a00086c:	6101      	str	r1, [r0, #16]
	handle->iface.evTECXOprimido_raised = bool_true;
1a00086e:	2301      	movs	r3, #1
1a000870:	7343      	strb	r3, [r0, #13]
}
1a000872:	4770      	bx	lr

1a000874 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000874:	2300      	movs	r3, #0
1a000876:	2b1c      	cmp	r3, #28
1a000878:	d812      	bhi.n	1a0008a0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00087a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00087c:	4a09      	ldr	r2, [pc, #36]	; (1a0008a4 <Board_SetupMuxing+0x30>)
1a00087e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000882:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000886:	784a      	ldrb	r2, [r1, #1]
1a000888:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00088a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00088e:	4906      	ldr	r1, [pc, #24]	; (1a0008a8 <Board_SetupMuxing+0x34>)
1a000890:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000894:	3301      	adds	r3, #1
1a000896:	2b1c      	cmp	r3, #28
1a000898:	d9f0      	bls.n	1a00087c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00089a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00089e:	4770      	bx	lr
1a0008a0:	4770      	bx	lr
1a0008a2:	bf00      	nop
1a0008a4:	1a001f74 	.word	0x1a001f74
1a0008a8:	40086000 	.word	0x40086000

1a0008ac <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0008ac:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0008ae:	4a17      	ldr	r2, [pc, #92]	; (1a00090c <Board_SetupClocking+0x60>)
1a0008b0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0008b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0008b8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0008bc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0008c0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0008c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0008c8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0008cc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0008d0:	2201      	movs	r2, #1
1a0008d2:	490f      	ldr	r1, [pc, #60]	; (1a000910 <Board_SetupClocking+0x64>)
1a0008d4:	2006      	movs	r0, #6
1a0008d6:	f000 fd73 	bl	1a0013c0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0008da:	2400      	movs	r4, #0
1a0008dc:	b14c      	cbz	r4, 1a0008f2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0008de:	4b0b      	ldr	r3, [pc, #44]	; (1a00090c <Board_SetupClocking+0x60>)
1a0008e0:	685a      	ldr	r2, [r3, #4]
1a0008e2:	f022 020c 	bic.w	r2, r2, #12
1a0008e6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0008e8:	685a      	ldr	r2, [r3, #4]
1a0008ea:	f042 0203 	orr.w	r2, r2, #3
1a0008ee:	605a      	str	r2, [r3, #4]
}
1a0008f0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0008f2:	4808      	ldr	r0, [pc, #32]	; (1a000914 <Board_SetupClocking+0x68>)
1a0008f4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0008f8:	2301      	movs	r3, #1
1a0008fa:	788a      	ldrb	r2, [r1, #2]
1a0008fc:	7849      	ldrb	r1, [r1, #1]
1a0008fe:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000902:	f000 fb0b 	bl	1a000f1c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000906:	3401      	adds	r4, #1
1a000908:	e7e8      	b.n	1a0008dc <Board_SetupClocking+0x30>
1a00090a:	bf00      	nop
1a00090c:	40043000 	.word	0x40043000
1a000910:	0c28cb00 	.word	0x0c28cb00
1a000914:	1a001f70 	.word	0x1a001f70

1a000918 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000918:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00091a:	f7ff ffab 	bl	1a000874 <Board_SetupMuxing>
    Board_SetupClocking();
1a00091e:	f7ff ffc5 	bl	1a0008ac <Board_SetupClocking>
}
1a000922:	bd08      	pop	{r3, pc}

1a000924 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000924:	2200      	movs	r2, #0
1a000926:	2a05      	cmp	r2, #5
1a000928:	d819      	bhi.n	1a00095e <Board_LED_Init+0x3a>
{
1a00092a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00092c:	490c      	ldr	r1, [pc, #48]	; (1a000960 <Board_LED_Init+0x3c>)
1a00092e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000932:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000936:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000938:	4b0a      	ldr	r3, [pc, #40]	; (1a000964 <Board_LED_Init+0x40>)
1a00093a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00093e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000942:	2001      	movs	r0, #1
1a000944:	40a0      	lsls	r0, r4
1a000946:	4301      	orrs	r1, r0
1a000948:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00094c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000950:	2100      	movs	r1, #0
1a000952:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000954:	3201      	adds	r2, #1
1a000956:	2a05      	cmp	r2, #5
1a000958:	d9e8      	bls.n	1a00092c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00095a:	bc70      	pop	{r4, r5, r6}
1a00095c:	4770      	bx	lr
1a00095e:	4770      	bx	lr
1a000960:	1a001ff4 	.word	0x1a001ff4
1a000964:	400f4000 	.word	0x400f4000

1a000968 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000968:	2300      	movs	r3, #0
1a00096a:	2b03      	cmp	r3, #3
1a00096c:	d816      	bhi.n	1a00099c <Board_TEC_Init+0x34>
{
1a00096e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000970:	490b      	ldr	r1, [pc, #44]	; (1a0009a0 <Board_TEC_Init+0x38>)
1a000972:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000976:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00097a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00097c:	4c09      	ldr	r4, [pc, #36]	; (1a0009a4 <Board_TEC_Init+0x3c>)
1a00097e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000982:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000986:	2001      	movs	r0, #1
1a000988:	40a8      	lsls	r0, r5
1a00098a:	ea21 0100 	bic.w	r1, r1, r0
1a00098e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000992:	3301      	adds	r3, #1
1a000994:	2b03      	cmp	r3, #3
1a000996:	d9eb      	bls.n	1a000970 <Board_TEC_Init+0x8>
   }
}
1a000998:	bc30      	pop	{r4, r5}
1a00099a:	4770      	bx	lr
1a00099c:	4770      	bx	lr
1a00099e:	bf00      	nop
1a0009a0:	1a001fec 	.word	0x1a001fec
1a0009a4:	400f4000 	.word	0x400f4000

1a0009a8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009a8:	2300      	movs	r3, #0
1a0009aa:	2b08      	cmp	r3, #8
1a0009ac:	d816      	bhi.n	1a0009dc <Board_GPIO_Init+0x34>
{
1a0009ae:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009b0:	490b      	ldr	r1, [pc, #44]	; (1a0009e0 <Board_GPIO_Init+0x38>)
1a0009b2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009b6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009ba:	784d      	ldrb	r5, [r1, #1]
1a0009bc:	4c09      	ldr	r4, [pc, #36]	; (1a0009e4 <Board_GPIO_Init+0x3c>)
1a0009be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009c2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009c6:	2001      	movs	r0, #1
1a0009c8:	40a8      	lsls	r0, r5
1a0009ca:	ea21 0100 	bic.w	r1, r1, r0
1a0009ce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009d2:	3301      	adds	r3, #1
1a0009d4:	2b08      	cmp	r3, #8
1a0009d6:	d9eb      	bls.n	1a0009b0 <Board_GPIO_Init+0x8>
   }
}
1a0009d8:	bc30      	pop	{r4, r5}
1a0009da:	4770      	bx	lr
1a0009dc:	4770      	bx	lr
1a0009de:	bf00      	nop
1a0009e0:	1a002000 	.word	0x1a002000
1a0009e4:	400f4000 	.word	0x400f4000

1a0009e8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0009e8:	b510      	push	{r4, lr}
1a0009ea:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0009ec:	4c08      	ldr	r4, [pc, #32]	; (1a000a10 <Board_ADC_Init+0x28>)
1a0009ee:	4669      	mov	r1, sp
1a0009f0:	4620      	mov	r0, r4
1a0009f2:	f000 fca5 	bl	1a001340 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0009f6:	4a07      	ldr	r2, [pc, #28]	; (1a000a14 <Board_ADC_Init+0x2c>)
1a0009f8:	4669      	mov	r1, sp
1a0009fa:	4620      	mov	r0, r4
1a0009fc:	f000 fcc0 	bl	1a001380 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000a00:	2200      	movs	r2, #0
1a000a02:	4669      	mov	r1, sp
1a000a04:	4620      	mov	r0, r4
1a000a06:	f000 fcd4 	bl	1a0013b2 <Chip_ADC_SetResolution>
}
1a000a0a:	b002      	add	sp, #8
1a000a0c:	bd10      	pop	{r4, pc}
1a000a0e:	bf00      	nop
1a000a10:	400e3000 	.word	0x400e3000
1a000a14:	00061a80 	.word	0x00061a80

1a000a18 <Board_SPI_Init>:
{
1a000a18:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000a1a:	4c0b      	ldr	r4, [pc, #44]	; (1a000a48 <Board_SPI_Init+0x30>)
1a000a1c:	4620      	mov	r0, r4
1a000a1e:	f000 fb5f 	bl	1a0010e0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000a22:	6863      	ldr	r3, [r4, #4]
1a000a24:	f023 0304 	bic.w	r3, r3, #4
1a000a28:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000a2a:	6823      	ldr	r3, [r4, #0]
1a000a2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000a30:	f043 0307 	orr.w	r3, r3, #7
1a000a34:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000a36:	4905      	ldr	r1, [pc, #20]	; (1a000a4c <Board_SPI_Init+0x34>)
1a000a38:	4620      	mov	r0, r4
1a000a3a:	f000 fb32 	bl	1a0010a2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000a3e:	6863      	ldr	r3, [r4, #4]
1a000a40:	f043 0302 	orr.w	r3, r3, #2
1a000a44:	6063      	str	r3, [r4, #4]
}
1a000a46:	bd10      	pop	{r4, pc}
1a000a48:	400c5000 	.word	0x400c5000
1a000a4c:	000186a0 	.word	0x000186a0

1a000a50 <Board_I2C_Init>:
{
1a000a50:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000a52:	2000      	movs	r0, #0
1a000a54:	f000 fc1e 	bl	1a001294 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000a58:	4b04      	ldr	r3, [pc, #16]	; (1a000a6c <Board_I2C_Init+0x1c>)
1a000a5a:	f640 0208 	movw	r2, #2056	; 0x808
1a000a5e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000a62:	4903      	ldr	r1, [pc, #12]	; (1a000a70 <Board_I2C_Init+0x20>)
1a000a64:	2000      	movs	r0, #0
1a000a66:	f000 fc29 	bl	1a0012bc <Chip_I2C_SetClockRate>
}
1a000a6a:	bd08      	pop	{r3, pc}
1a000a6c:	40086000 	.word	0x40086000
1a000a70:	000f4240 	.word	0x000f4240

1a000a74 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000a74:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000a76:	4c07      	ldr	r4, [pc, #28]	; (1a000a94 <Board_Debug_Init+0x20>)
1a000a78:	4620      	mov	r0, r4
1a000a7a:	f000 fb63 	bl	1a001144 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000a7e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000a82:	4620      	mov	r0, r4
1a000a84:	f000 fb88 	bl	1a001198 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000a88:	2303      	movs	r3, #3
1a000a8a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000a8c:	2301      	movs	r3, #1
1a000a8e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000a90:	bd10      	pop	{r4, pc}
1a000a92:	bf00      	nop
1a000a94:	400c1000 	.word	0x400c1000

1a000a98 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000a98:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000a9a:	f7ff ffeb 	bl	1a000a74 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000a9e:	4809      	ldr	r0, [pc, #36]	; (1a000ac4 <Board_Init+0x2c>)
1a000aa0:	f000 f812 	bl	1a000ac8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000aa4:	f7ff ff80 	bl	1a0009a8 <Board_GPIO_Init>
   Board_ADC_Init();
1a000aa8:	f7ff ff9e 	bl	1a0009e8 <Board_ADC_Init>
   Board_SPI_Init();
1a000aac:	f7ff ffb4 	bl	1a000a18 <Board_SPI_Init>
   Board_I2C_Init();
1a000ab0:	f7ff ffce 	bl	1a000a50 <Board_I2C_Init>

   Board_LED_Init();
1a000ab4:	f7ff ff36 	bl	1a000924 <Board_LED_Init>
   Board_TEC_Init();
1a000ab8:	f7ff ff56 	bl	1a000968 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000abc:	f000 f806 	bl	1a000acc <SystemCoreClockUpdate>
}
1a000ac0:	bd08      	pop	{r3, pc}
1a000ac2:	bf00      	nop
1a000ac4:	400f4000 	.word	0x400f4000

1a000ac8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000ac8:	4770      	bx	lr
1a000aca:	Address 0x1a000aca is out of bounds.


1a000acc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000acc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000ace:	2069      	movs	r0, #105	; 0x69
1a000ad0:	f000 faa2 	bl	1a001018 <Chip_Clock_GetRate>
1a000ad4:	4b01      	ldr	r3, [pc, #4]	; (1a000adc <SystemCoreClockUpdate+0x10>)
1a000ad6:	6018      	str	r0, [r3, #0]
}
1a000ad8:	bd08      	pop	{r3, pc}
1a000ada:	bf00      	nop
1a000adc:	10000094 	.word	0x10000094

1a000ae0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ae0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000ae2:	680b      	ldr	r3, [r1, #0]
1a000ae4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ae8:	d002      	beq.n	1a000af0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000aee:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000af0:	4607      	mov	r7, r0
1a000af2:	2501      	movs	r5, #1
1a000af4:	e03a      	b.n	1a000b6c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000af6:	694b      	ldr	r3, [r1, #20]
1a000af8:	fb03 f302 	mul.w	r3, r3, r2
1a000afc:	fbb3 f3f5 	udiv	r3, r3, r5
1a000b00:	e01c      	b.n	1a000b3c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000b02:	461c      	mov	r4, r3
	if (val < 0)
1a000b04:	ebb0 0c04 	subs.w	ip, r0, r4
1a000b08:	d427      	bmi.n	1a000b5a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000b0a:	4567      	cmp	r7, ip
1a000b0c:	d906      	bls.n	1a000b1c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000b0e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000b10:	1c77      	adds	r7, r6, #1
1a000b12:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000b14:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000b16:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000b18:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000b1a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000b1c:	3201      	adds	r2, #1
1a000b1e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000b22:	dc1d      	bgt.n	1a000b60 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000b24:	680c      	ldr	r4, [r1, #0]
1a000b26:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000b2a:	d0e4      	beq.n	1a000af6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000b2c:	1c73      	adds	r3, r6, #1
1a000b2e:	fa02 fc03 	lsl.w	ip, r2, r3
1a000b32:	694b      	ldr	r3, [r1, #20]
1a000b34:	fb03 f30c 	mul.w	r3, r3, ip
1a000b38:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000b3c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000b78 <pll_calc_divs+0x98>
1a000b40:	4563      	cmp	r3, ip
1a000b42:	d9eb      	bls.n	1a000b1c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000b44:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000b7c <pll_calc_divs+0x9c>
1a000b48:	4563      	cmp	r3, ip
1a000b4a:	d809      	bhi.n	1a000b60 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000b4c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b50:	d1d7      	bne.n	1a000b02 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000b52:	1c74      	adds	r4, r6, #1
1a000b54:	fa23 f404 	lsr.w	r4, r3, r4
1a000b58:	e7d4      	b.n	1a000b04 <pll_calc_divs+0x24>
		return -val;
1a000b5a:	f1cc 0c00 	rsb	ip, ip, #0
1a000b5e:	e7d4      	b.n	1a000b0a <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000b60:	3601      	adds	r6, #1
1a000b62:	2e03      	cmp	r6, #3
1a000b64:	dc01      	bgt.n	1a000b6a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000b66:	2201      	movs	r2, #1
1a000b68:	e7d9      	b.n	1a000b1e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000b6a:	3501      	adds	r5, #1
1a000b6c:	2d04      	cmp	r5, #4
1a000b6e:	dc01      	bgt.n	1a000b74 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000b70:	2600      	movs	r6, #0
1a000b72:	e7f6      	b.n	1a000b62 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000b74:	bcf0      	pop	{r4, r5, r6, r7}
1a000b76:	4770      	bx	lr
1a000b78:	094c5eff 	.word	0x094c5eff
1a000b7c:	1312d000 	.word	0x1312d000

1a000b80 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b82:	b099      	sub	sp, #100	; 0x64
1a000b84:	4605      	mov	r5, r0
1a000b86:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000b88:	225c      	movs	r2, #92	; 0x5c
1a000b8a:	2100      	movs	r1, #0
1a000b8c:	a801      	add	r0, sp, #4
1a000b8e:	f001 f9e7 	bl	1a001f60 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000b92:	2380      	movs	r3, #128	; 0x80
1a000b94:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000b96:	6963      	ldr	r3, [r4, #20]
1a000b98:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000b9a:	7923      	ldrb	r3, [r4, #4]
1a000b9c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000ba0:	4669      	mov	r1, sp
1a000ba2:	4628      	mov	r0, r5
1a000ba4:	f7ff ff9c 	bl	1a000ae0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000ba8:	9b06      	ldr	r3, [sp, #24]
1a000baa:	42ab      	cmp	r3, r5
1a000bac:	d027      	beq.n	1a000bfe <pll_get_frac+0x7e>
	if (val < 0)
1a000bae:	1aeb      	subs	r3, r5, r3
1a000bb0:	d42e      	bmi.n	1a000c10 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000bb2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000bba:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000bbc:	6963      	ldr	r3, [r4, #20]
1a000bbe:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000bc0:	7923      	ldrb	r3, [r4, #4]
1a000bc2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000bc6:	a910      	add	r1, sp, #64	; 0x40
1a000bc8:	4628      	mov	r0, r5
1a000bca:	f7ff ff89 	bl	1a000ae0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000bce:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000bd0:	42ab      	cmp	r3, r5
1a000bd2:	d01f      	beq.n	1a000c14 <pll_get_frac+0x94>
	if (val < 0)
1a000bd4:	1aeb      	subs	r3, r5, r3
1a000bd6:	d425      	bmi.n	1a000c24 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000bd8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000bda:	4b2b      	ldr	r3, [pc, #172]	; (1a000c88 <pll_get_frac+0x108>)
1a000bdc:	429d      	cmp	r5, r3
1a000bde:	d923      	bls.n	1a000c28 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000be0:	980e      	ldr	r0, [sp, #56]	; 0x38
	if (val < 0)
1a000be2:	1a2d      	subs	r5, r5, r0
1a000be4:	d433      	bmi.n	1a000c4e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000be6:	42ae      	cmp	r6, r5
1a000be8:	dc3b      	bgt.n	1a000c62 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000bea:	42be      	cmp	r6, r7
1a000bec:	dc31      	bgt.n	1a000c52 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000bee:	466d      	mov	r5, sp
1a000bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bfc:	e006      	b.n	1a000c0c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000bfe:	466d      	mov	r5, sp
1a000c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000c0c:	b019      	add	sp, #100	; 0x64
1a000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000c10:	425b      	negs	r3, r3
1a000c12:	e7ce      	b.n	1a000bb2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000c14:	ad10      	add	r5, sp, #64	; 0x40
1a000c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000c22:	e7f3      	b.n	1a000c0c <pll_get_frac+0x8c>
		return -val;
1a000c24:	425b      	negs	r3, r3
1a000c26:	e7d7      	b.n	1a000bd8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000c28:	2340      	movs	r3, #64	; 0x40
1a000c2a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000c2c:	6963      	ldr	r3, [r4, #20]
1a000c2e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000c30:	a908      	add	r1, sp, #32
1a000c32:	4628      	mov	r0, r5
1a000c34:	f7ff ff54 	bl	1a000ae0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000c3a:	42ab      	cmp	r3, r5
1a000c3c:	d1d0      	bne.n	1a000be0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000c3e:	ad08      	add	r5, sp, #32
1a000c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000c4c:	e7de      	b.n	1a000c0c <pll_get_frac+0x8c>
		return -val;
1a000c4e:	426d      	negs	r5, r5
1a000c50:	e7c9      	b.n	1a000be6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000c52:	ad10      	add	r5, sp, #64	; 0x40
1a000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c60:	e7d4      	b.n	1a000c0c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000c62:	42af      	cmp	r7, r5
1a000c64:	db07      	blt.n	1a000c76 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000c66:	ad08      	add	r5, sp, #32
1a000c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c74:	e7ca      	b.n	1a000c0c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000c76:	ad10      	add	r5, sp, #64	; 0x40
1a000c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000c7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000c84:	e7c2      	b.n	1a000c0c <pll_get_frac+0x8c>
1a000c86:	bf00      	nop
1a000c88:	068e7780 	.word	0x068e7780

1a000c8c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000c8c:	b430      	push	{r4, r5}
1a000c8e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000c90:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000c92:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c94:	e000      	b.n	1a000c98 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000c96:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c98:	281c      	cmp	r0, #28
1a000c9a:	d117      	bne.n	1a000ccc <Chip_Clock_FindBaseClock+0x40>
1a000c9c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ca0:	490b      	ldr	r1, [pc, #44]	; (1a000cd0 <Chip_Clock_FindBaseClock+0x44>)
1a000ca2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
1a000ca6:	7911      	ldrb	r1, [r2, #4]
1a000ca8:	4281      	cmp	r1, r0
1a000caa:	d00f      	beq.n	1a000ccc <Chip_Clock_FindBaseClock+0x40>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000cac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000cb0:	4c07      	ldr	r4, [pc, #28]	; (1a000cd0 <Chip_Clock_FindBaseClock+0x44>)
1a000cb2:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000cb6:	42aa      	cmp	r2, r5
1a000cb8:	d8ed      	bhi.n	1a000c96 <Chip_Clock_FindBaseClock+0xa>
1a000cba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000cbe:	eb04 0242 	add.w	r2, r4, r2, lsl #1
1a000cc2:	8852      	ldrh	r2, [r2, #2]
1a000cc4:	42aa      	cmp	r2, r5
1a000cc6:	d3e6      	bcc.n	1a000c96 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000cc8:	4608      	mov	r0, r1
1a000cca:	e7e5      	b.n	1a000c98 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000ccc:	bc30      	pop	{r4, r5}
1a000cce:	4770      	bx	lr
1a000cd0:	1a002020 	.word	0x1a002020

1a000cd4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000cd4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000cda:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000cdc:	4a0d      	ldr	r2, [pc, #52]	; (1a000d14 <Chip_Clock_EnableCrystal+0x40>)
1a000cde:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000ce0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000ce4:	6992      	ldr	r2, [r2, #24]
1a000ce6:	428a      	cmp	r2, r1
1a000ce8:	d001      	beq.n	1a000cee <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000cea:	4a0a      	ldr	r2, [pc, #40]	; (1a000d14 <Chip_Clock_EnableCrystal+0x40>)
1a000cec:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000cee:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000cf2:	4a09      	ldr	r2, [pc, #36]	; (1a000d18 <Chip_Clock_EnableCrystal+0x44>)
1a000cf4:	6811      	ldr	r1, [r2, #0]
1a000cf6:	4a09      	ldr	r2, [pc, #36]	; (1a000d1c <Chip_Clock_EnableCrystal+0x48>)
1a000cf8:	4291      	cmp	r1, r2
1a000cfa:	d901      	bls.n	1a000d00 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000cfc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000d00:	4a04      	ldr	r2, [pc, #16]	; (1a000d14 <Chip_Clock_EnableCrystal+0x40>)
1a000d02:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000d04:	9b01      	ldr	r3, [sp, #4]
1a000d06:	1e5a      	subs	r2, r3, #1
1a000d08:	9201      	str	r2, [sp, #4]
1a000d0a:	2b00      	cmp	r3, #0
1a000d0c:	d1fa      	bne.n	1a000d04 <Chip_Clock_EnableCrystal+0x30>
}
1a000d0e:	b002      	add	sp, #8
1a000d10:	4770      	bx	lr
1a000d12:	bf00      	nop
1a000d14:	40050000 	.word	0x40050000
1a000d18:	1a002014 	.word	0x1a002014
1a000d1c:	01312cff 	.word	0x01312cff

1a000d20 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000d20:	3012      	adds	r0, #18
1a000d22:	4b05      	ldr	r3, [pc, #20]	; (1a000d38 <Chip_Clock_GetDividerSource+0x18>)
1a000d24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000d28:	f010 0f01 	tst.w	r0, #1
1a000d2c:	d102      	bne.n	1a000d34 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d2e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d32:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d34:	2011      	movs	r0, #17
}
1a000d36:	4770      	bx	lr
1a000d38:	40050000 	.word	0x40050000

1a000d3c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000d3c:	f100 0212 	add.w	r2, r0, #18
1a000d40:	4b03      	ldr	r3, [pc, #12]	; (1a000d50 <Chip_Clock_GetDividerDivisor+0x14>)
1a000d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000d46:	4b03      	ldr	r3, [pc, #12]	; (1a000d54 <Chip_Clock_GetDividerDivisor+0x18>)
1a000d48:	5c18      	ldrb	r0, [r3, r0]
}
1a000d4a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000d4e:	4770      	bx	lr
1a000d50:	40050000 	.word	0x40050000
1a000d54:	1a002018 	.word	0x1a002018

1a000d58 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000d58:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000d5a:	2810      	cmp	r0, #16
1a000d5c:	d80a      	bhi.n	1a000d74 <Chip_Clock_GetClockInputHz+0x1c>
1a000d5e:	e8df f000 	tbb	[pc, r0]
1a000d62:	0b44      	.short	0x0b44
1a000d64:	0921180d 	.word	0x0921180d
1a000d68:	2d2a2724 	.word	0x2d2a2724
1a000d6c:	34300909 	.word	0x34300909
1a000d70:	3c38      	.short	0x3c38
1a000d72:	40          	.byte	0x40
1a000d73:	00          	.byte	0x00
	uint32_t rate = 0;
1a000d74:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a000d76:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a000d78:	481e      	ldr	r0, [pc, #120]	; (1a000df4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000d7a:	e7fc      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d7c:	4b1e      	ldr	r3, [pc, #120]	; (1a000df8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000d7e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d82:	f003 0307 	and.w	r3, r3, #7
1a000d86:	2b04      	cmp	r3, #4
1a000d88:	d001      	beq.n	1a000d8e <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a000d8a:	481c      	ldr	r0, [pc, #112]	; (1a000dfc <Chip_Clock_GetClockInputHz+0xa4>)
1a000d8c:	e7f3      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a000d8e:	2000      	movs	r0, #0
1a000d90:	e7f1      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d92:	4b19      	ldr	r3, [pc, #100]	; (1a000df8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000d94:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d98:	f003 0307 	and.w	r3, r3, #7
1a000d9c:	2b04      	cmp	r3, #4
1a000d9e:	d027      	beq.n	1a000df0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000da0:	4816      	ldr	r0, [pc, #88]	; (1a000dfc <Chip_Clock_GetClockInputHz+0xa4>)
1a000da2:	e7e8      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a000da4:	4b16      	ldr	r3, [pc, #88]	; (1a000e00 <Chip_Clock_GetClockInputHz+0xa8>)
1a000da6:	6818      	ldr	r0, [r3, #0]
		break;
1a000da8:	e7e5      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a000daa:	4b16      	ldr	r3, [pc, #88]	; (1a000e04 <Chip_Clock_GetClockInputHz+0xac>)
1a000dac:	6818      	ldr	r0, [r3, #0]
		break;
1a000dae:	e7e2      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000db0:	4b15      	ldr	r3, [pc, #84]	; (1a000e08 <Chip_Clock_GetClockInputHz+0xb0>)
1a000db2:	6818      	ldr	r0, [r3, #0]
		break;
1a000db4:	e7df      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000db6:	4b14      	ldr	r3, [pc, #80]	; (1a000e08 <Chip_Clock_GetClockInputHz+0xb0>)
1a000db8:	6858      	ldr	r0, [r3, #4]
		break;
1a000dba:	e7dc      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a000dbc:	f000 f868 	bl	1a000e90 <Chip_Clock_GetMainPLLHz>
		break;
1a000dc0:	e7d9      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000dc2:	2100      	movs	r1, #0
1a000dc4:	f000 f898 	bl	1a000ef8 <Chip_Clock_GetDivRate>
		break;
1a000dc8:	e7d5      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000dca:	2101      	movs	r1, #1
1a000dcc:	f000 f894 	bl	1a000ef8 <Chip_Clock_GetDivRate>
		break;
1a000dd0:	e7d1      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000dd2:	2102      	movs	r1, #2
1a000dd4:	f000 f890 	bl	1a000ef8 <Chip_Clock_GetDivRate>
		break;
1a000dd8:	e7cd      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000dda:	2103      	movs	r1, #3
1a000ddc:	f000 f88c 	bl	1a000ef8 <Chip_Clock_GetDivRate>
		break;
1a000de0:	e7c9      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000de2:	2104      	movs	r1, #4
1a000de4:	f000 f888 	bl	1a000ef8 <Chip_Clock_GetDivRate>
		break;
1a000de8:	e7c5      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a000dea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000dee:	e7c2      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a000df0:	4806      	ldr	r0, [pc, #24]	; (1a000e0c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000df2:	e7c0      	b.n	1a000d76 <Chip_Clock_GetClockInputHz+0x1e>
1a000df4:	00b71b00 	.word	0x00b71b00
1a000df8:	40043000 	.word	0x40043000
1a000dfc:	017d7840 	.word	0x017d7840
1a000e00:	1a001fe8 	.word	0x1a001fe8
1a000e04:	1a002014 	.word	0x1a002014
1a000e08:	10000048 	.word	0x10000048
1a000e0c:	02faf080 	.word	0x02faf080

1a000e10 <Chip_Clock_CalcMainPLLValue>:
{
1a000e10:	b538      	push	{r3, r4, r5, lr}
1a000e12:	4605      	mov	r5, r0
1a000e14:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000e16:	7908      	ldrb	r0, [r1, #4]
1a000e18:	f7ff ff9e 	bl	1a000d58 <Chip_Clock_GetClockInputHz>
1a000e1c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000e1e:	4b19      	ldr	r3, [pc, #100]	; (1a000e84 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000e20:	442b      	add	r3, r5
1a000e22:	4a19      	ldr	r2, [pc, #100]	; (1a000e88 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000e24:	4293      	cmp	r3, r2
1a000e26:	d821      	bhi.n	1a000e6c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000e28:	b318      	cbz	r0, 1a000e72 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000e2a:	2380      	movs	r3, #128	; 0x80
1a000e2c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000e2e:	2300      	movs	r3, #0
1a000e30:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000e32:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000e34:	fbb5 f3f0 	udiv	r3, r5, r0
1a000e38:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000e3a:	4a14      	ldr	r2, [pc, #80]	; (1a000e8c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000e3c:	4295      	cmp	r5, r2
1a000e3e:	d903      	bls.n	1a000e48 <Chip_Clock_CalcMainPLLValue+0x38>
1a000e40:	fb03 f000 	mul.w	r0, r3, r0
1a000e44:	42a8      	cmp	r0, r5
1a000e46:	d007      	beq.n	1a000e58 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000e48:	4621      	mov	r1, r4
1a000e4a:	4628      	mov	r0, r5
1a000e4c:	f7ff fe98 	bl	1a000b80 <pll_get_frac>
		if (!ppll->nsel) {
1a000e50:	68a3      	ldr	r3, [r4, #8]
1a000e52:	b18b      	cbz	r3, 1a000e78 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000e54:	3b01      	subs	r3, #1
1a000e56:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000e58:	6923      	ldr	r3, [r4, #16]
1a000e5a:	b183      	cbz	r3, 1a000e7e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000e5c:	68e2      	ldr	r2, [r4, #12]
1a000e5e:	b10a      	cbz	r2, 1a000e64 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000e60:	3a01      	subs	r2, #1
1a000e62:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000e64:	3b01      	subs	r3, #1
1a000e66:	6123      	str	r3, [r4, #16]
	return 0;
1a000e68:	2000      	movs	r0, #0
}
1a000e6a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000e6c:	f04f 30ff 	mov.w	r0, #4294967295
1a000e70:	e7fb      	b.n	1a000e6a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000e72:	f04f 30ff 	mov.w	r0, #4294967295
1a000e76:	e7f8      	b.n	1a000e6a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000e78:	f04f 30ff 	mov.w	r0, #4294967295
1a000e7c:	e7f5      	b.n	1a000e6a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000e7e:	f04f 30ff 	mov.w	r0, #4294967295
1a000e82:	e7f2      	b.n	1a000e6a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000e84:	ff6b3a10 	.word	0xff6b3a10
1a000e88:	0b940510 	.word	0x0b940510
1a000e8c:	094c5eff 	.word	0x094c5eff

1a000e90 <Chip_Clock_GetMainPLLHz>:
{
1a000e90:	b570      	push	{r4, r5, r6, lr}
1a000e92:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000e94:	4d16      	ldr	r5, [pc, #88]	; (1a000ef0 <Chip_Clock_GetMainPLLHz+0x60>)
1a000e96:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000e98:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000e9c:	f7ff ff5c 	bl	1a000d58 <Chip_Clock_GetClockInputHz>
1a000ea0:	4606      	mov	r6, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000ea2:	4a14      	ldr	r2, [pc, #80]	; (1a000ef4 <Chip_Clock_GetMainPLLHz+0x64>)
1a000ea4:	9201      	str	r2, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000ea6:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000ea8:	f010 0001 	ands.w	r0, r0, #1
1a000eac:	d01d      	beq.n	1a000eea <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a000eae:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000eb2:	f3c4 3101 	ubfx	r1, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000eb6:	f3c4 2501 	ubfx	r5, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000eba:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a000ebe:	3201      	adds	r2, #1
	n = nsel + 1;
1a000ec0:	3101      	adds	r1, #1
	p = ptab[psel];
1a000ec2:	ab02      	add	r3, sp, #8
1a000ec4:	441d      	add	r5, r3
1a000ec6:	f815 3c04 	ldrb.w	r3, [r5, #-4]
	if (direct || fbsel) {
1a000eca:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000ece:	d108      	bne.n	1a000ee2 <Chip_Clock_GetMainPLLHz+0x52>
1a000ed0:	b938      	cbnz	r0, 1a000ee2 <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a000ed2:	0058      	lsls	r0, r3, #1
1a000ed4:	fbb2 f2f0 	udiv	r2, r2, r0
1a000ed8:	fbb6 f0f1 	udiv	r0, r6, r1
1a000edc:	fb00 f002 	mul.w	r0, r0, r2
1a000ee0:	e003      	b.n	1a000eea <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a000ee2:	fbb6 f0f1 	udiv	r0, r6, r1
1a000ee6:	fb02 f000 	mul.w	r0, r2, r0
}
1a000eea:	b002      	add	sp, #8
1a000eec:	bd70      	pop	{r4, r5, r6, pc}
1a000eee:	bf00      	nop
1a000ef0:	40050000 	.word	0x40050000
1a000ef4:	08040201 	.word	0x08040201

1a000ef8 <Chip_Clock_GetDivRate>:
{
1a000ef8:	b538      	push	{r3, r4, r5, lr}
1a000efa:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000efc:	4608      	mov	r0, r1
1a000efe:	f7ff ff0f 	bl	1a000d20 <Chip_Clock_GetDividerSource>
1a000f02:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000f04:	4620      	mov	r0, r4
1a000f06:	f7ff ff19 	bl	1a000d3c <Chip_Clock_GetDividerDivisor>
1a000f0a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000f0c:	4628      	mov	r0, r5
1a000f0e:	f7ff ff23 	bl	1a000d58 <Chip_Clock_GetClockInputHz>
1a000f12:	3401      	adds	r4, #1
}
1a000f14:	fbb0 f0f4 	udiv	r0, r0, r4
1a000f18:	bd38      	pop	{r3, r4, r5, pc}
1a000f1a:	Address 0x1a000f1a is out of bounds.


1a000f1c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000f1c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f1e:	f100 0416 	add.w	r4, r0, #22
1a000f22:	00a4      	lsls	r4, r4, #2
1a000f24:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000f28:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000f2c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000f2e:	281b      	cmp	r0, #27
1a000f30:	d813      	bhi.n	1a000f5a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000f32:	2911      	cmp	r1, #17
1a000f34:	d01a      	beq.n	1a000f6c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000f36:	4d0e      	ldr	r5, [pc, #56]	; (1a000f70 <Chip_Clock_SetBaseClock+0x54>)
1a000f38:	4025      	ands	r5, r4

			if (autoblocken) {
1a000f3a:	b10a      	cbz	r2, 1a000f40 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000f3c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000f40:	b10b      	cbz	r3, 1a000f46 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000f42:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000f46:	ea45 6101 	orr.w	r1, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000f4a:	3016      	adds	r0, #22
1a000f4c:	0080      	lsls	r0, r0, #2
1a000f4e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f52:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f56:	6041      	str	r1, [r0, #4]
1a000f58:	e008      	b.n	1a000f6c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000f5a:	f044 0401 	orr.w	r4, r4, #1
1a000f5e:	3016      	adds	r0, #22
1a000f60:	0080      	lsls	r0, r0, #2
1a000f62:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000f66:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000f6a:	6044      	str	r4, [r0, #4]
	}
}
1a000f6c:	bc30      	pop	{r4, r5}
1a000f6e:	4770      	bx	lr
1a000f70:	e0fff7fe 	.word	0xe0fff7fe

1a000f74 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000f74:	281b      	cmp	r0, #27
1a000f76:	d80d      	bhi.n	1a000f94 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000f78:	f100 0316 	add.w	r3, r0, #22
1a000f7c:	009b      	lsls	r3, r3, #2
1a000f7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a000f82:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a000f86:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000f88:	f010 0f01 	tst.w	r0, #1
1a000f8c:	d104      	bne.n	1a000f98 <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f8e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f92:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f94:	2011      	movs	r0, #17
1a000f96:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f98:	2011      	movs	r0, #17
}
1a000f9a:	4770      	bx	lr

1a000f9c <Chip_Clock_GetBaseClocktHz>:
{
1a000f9c:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000f9e:	f7ff ffe9 	bl	1a000f74 <Chip_Clock_GetBaseClock>
1a000fa2:	f7ff fed9 	bl	1a000d58 <Chip_Clock_GetClockInputHz>
}
1a000fa6:	bd08      	pop	{r3, pc}

1a000fa8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000fa8:	b971      	cbnz	r1, 1a000fc8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000faa:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000fac:	b10a      	cbz	r2, 1a000fb2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000fae:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000fb2:	2b02      	cmp	r3, #2
1a000fb4:	d00a      	beq.n	1a000fcc <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000fb6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000fba:	d30a      	bcc.n	1a000fd2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000fbc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000fc0:	4b06      	ldr	r3, [pc, #24]	; (1a000fdc <Chip_Clock_EnableOpts+0x34>)
1a000fc2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000fc6:	4770      	bx	lr
		reg |= (1 << 1);
1a000fc8:	2103      	movs	r1, #3
1a000fca:	e7ef      	b.n	1a000fac <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000fcc:	f041 0120 	orr.w	r1, r1, #32
1a000fd0:	e7f1      	b.n	1a000fb6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000fd2:	3020      	adds	r0, #32
1a000fd4:	4b02      	ldr	r3, [pc, #8]	; (1a000fe0 <Chip_Clock_EnableOpts+0x38>)
1a000fd6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000fda:	4770      	bx	lr
1a000fdc:	40052000 	.word	0x40052000
1a000fe0:	40051000 	.word	0x40051000

1a000fe4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000fe4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000fe8:	d309      	bcc.n	1a000ffe <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000fea:	4a09      	ldr	r2, [pc, #36]	; (1a001010 <Chip_Clock_Enable+0x2c>)
1a000fec:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000ff0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000ff4:	f043 0301 	orr.w	r3, r3, #1
1a000ff8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000ffc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000ffe:	4a05      	ldr	r2, [pc, #20]	; (1a001014 <Chip_Clock_Enable+0x30>)
1a001000:	3020      	adds	r0, #32
1a001002:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001006:	f043 0301 	orr.w	r3, r3, #1
1a00100a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00100e:	4770      	bx	lr
1a001010:	40052000 	.word	0x40052000
1a001014:	40051000 	.word	0x40051000

1a001018 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001018:	b510      	push	{r4, lr}
1a00101a:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00101c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001020:	d308      	bcc.n	1a001034 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001022:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a001026:	490d      	ldr	r1, [pc, #52]	; (1a00105c <Chip_Clock_GetRate+0x44>)
1a001028:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00102c:	f014 0001 	ands.w	r0, r4, #1
1a001030:	d106      	bne.n	1a001040 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a001032:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001034:	f100 0220 	add.w	r2, r0, #32
1a001038:	4909      	ldr	r1, [pc, #36]	; (1a001060 <Chip_Clock_GetRate+0x48>)
1a00103a:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a00103e:	e7f5      	b.n	1a00102c <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001040:	4618      	mov	r0, r3
1a001042:	f7ff fe23 	bl	1a000c8c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001046:	f7ff ffa9 	bl	1a000f9c <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00104a:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00104e:	d103      	bne.n	1a001058 <Chip_Clock_GetRate+0x40>
			div = 1;
1a001050:	2301      	movs	r3, #1
		rate = rate / div;
1a001052:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a001056:	e7ec      	b.n	1a001032 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001058:	2302      	movs	r3, #2
1a00105a:	e7fa      	b.n	1a001052 <Chip_Clock_GetRate+0x3a>
1a00105c:	40052000 	.word	0x40052000
1a001060:	40051000 	.word	0x40051000

1a001064 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001064:	4b03      	ldr	r3, [pc, #12]	; (1a001074 <Chip_SSP_GetClockIndex+0x10>)
1a001066:	4298      	cmp	r0, r3
1a001068:	d001      	beq.n	1a00106e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00106a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a00106c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00106e:	20a5      	movs	r0, #165	; 0xa5
1a001070:	4770      	bx	lr
1a001072:	bf00      	nop
1a001074:	400c5000 	.word	0x400c5000

1a001078 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001078:	4b04      	ldr	r3, [pc, #16]	; (1a00108c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00107a:	4298      	cmp	r0, r3
1a00107c:	d002      	beq.n	1a001084 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00107e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001082:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001084:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001088:	4770      	bx	lr
1a00108a:	bf00      	nop
1a00108c:	400c5000 	.word	0x400c5000

1a001090 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001090:	6803      	ldr	r3, [r0, #0]
1a001092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001096:	0209      	lsls	r1, r1, #8
1a001098:	b289      	uxth	r1, r1
1a00109a:	4319      	orrs	r1, r3
1a00109c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00109e:	6102      	str	r2, [r0, #16]
}
1a0010a0:	4770      	bx	lr

1a0010a2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0010a2:	b570      	push	{r4, r5, r6, lr}
1a0010a4:	4606      	mov	r6, r0
1a0010a6:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0010a8:	f7ff ffe6 	bl	1a001078 <Chip_SSP_GetPeriphClockIndex>
1a0010ac:	f7ff ffb4 	bl	1a001018 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0010b0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0010b2:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0010b6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0010b8:	e000      	b.n	1a0010bc <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0010ba:	4629      	mov	r1, r5
	while (cmp_clk > bitRate) {
1a0010bc:	42a3      	cmp	r3, r4
1a0010be:	d90b      	bls.n	1a0010d8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0010c0:	1c4d      	adds	r5, r1, #1
1a0010c2:	fb01 2302 	mla	r3, r1, r2, r2
1a0010c6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0010ca:	429c      	cmp	r4, r3
1a0010cc:	d2f6      	bcs.n	1a0010bc <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0010ce:	2dff      	cmp	r5, #255	; 0xff
1a0010d0:	d9f3      	bls.n	1a0010ba <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0010d2:	3202      	adds	r2, #2
				cr0_div = 0;
1a0010d4:	2100      	movs	r1, #0
1a0010d6:	e7f1      	b.n	1a0010bc <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0010d8:	4630      	mov	r0, r6
1a0010da:	f7ff ffd9 	bl	1a001090 <Chip_SSP_SetClockRate>
}
1a0010de:	bd70      	pop	{r4, r5, r6, pc}

1a0010e0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0010e0:	b510      	push	{r4, lr}
1a0010e2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0010e4:	f7ff ffbe 	bl	1a001064 <Chip_SSP_GetClockIndex>
1a0010e8:	f7ff ff7c 	bl	1a000fe4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0010ec:	4620      	mov	r0, r4
1a0010ee:	f7ff ffc3 	bl	1a001078 <Chip_SSP_GetPeriphClockIndex>
1a0010f2:	f7ff ff77 	bl	1a000fe4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0010f6:	6863      	ldr	r3, [r4, #4]
1a0010f8:	f023 0304 	bic.w	r3, r3, #4
1a0010fc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0010fe:	6823      	ldr	r3, [r4, #0]
1a001100:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001104:	f043 0307 	orr.w	r3, r3, #7
1a001108:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00110a:	4902      	ldr	r1, [pc, #8]	; (1a001114 <Chip_SSP_Init+0x34>)
1a00110c:	4620      	mov	r0, r4
1a00110e:	f7ff ffc8 	bl	1a0010a2 <Chip_SSP_SetBitRate>
}
1a001112:	bd10      	pop	{r4, pc}
1a001114:	000186a0 	.word	0x000186a0

1a001118 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001118:	4b09      	ldr	r3, [pc, #36]	; (1a001140 <Chip_UART_GetIndex+0x28>)
1a00111a:	4298      	cmp	r0, r3
1a00111c:	d00b      	beq.n	1a001136 <Chip_UART_GetIndex+0x1e>
1a00111e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001122:	4298      	cmp	r0, r3
1a001124:	d009      	beq.n	1a00113a <Chip_UART_GetIndex+0x22>
1a001126:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00112a:	4298      	cmp	r0, r3
1a00112c:	d001      	beq.n	1a001132 <Chip_UART_GetIndex+0x1a>
1a00112e:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a001130:	4770      	bx	lr
			return 1;
1a001132:	2001      	movs	r0, #1
1a001134:	4770      	bx	lr
			return 2;
1a001136:	2002      	movs	r0, #2
1a001138:	4770      	bx	lr
			return 3;
1a00113a:	2003      	movs	r0, #3
1a00113c:	4770      	bx	lr
1a00113e:	bf00      	nop
1a001140:	400c1000 	.word	0x400c1000

1a001144 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001144:	b530      	push	{r4, r5, lr}
1a001146:	b083      	sub	sp, #12
1a001148:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00114a:	f7ff ffe5 	bl	1a001118 <Chip_UART_GetIndex>
1a00114e:	2301      	movs	r3, #1
1a001150:	461a      	mov	r2, r3
1a001152:	4619      	mov	r1, r3
1a001154:	4d0e      	ldr	r5, [pc, #56]	; (1a001190 <Chip_UART_Init+0x4c>)
1a001156:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00115a:	f7ff ff25 	bl	1a000fa8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00115e:	2307      	movs	r3, #7
1a001160:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001162:	2300      	movs	r3, #0
1a001164:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001166:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001168:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00116a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00116c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00116e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001170:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001172:	4b08      	ldr	r3, [pc, #32]	; (1a001194 <Chip_UART_Init+0x50>)
1a001174:	429c      	cmp	r4, r3
1a001176:	d006      	beq.n	1a001186 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001178:	2303      	movs	r3, #3
1a00117a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00117c:	2310      	movs	r3, #16
1a00117e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001180:	9b01      	ldr	r3, [sp, #4]
}
1a001182:	b003      	add	sp, #12
1a001184:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001186:	2300      	movs	r3, #0
1a001188:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00118a:	69a3      	ldr	r3, [r4, #24]
1a00118c:	9301      	str	r3, [sp, #4]
1a00118e:	e7f3      	b.n	1a001178 <Chip_UART_Init+0x34>
1a001190:	1a002094 	.word	0x1a002094
1a001194:	40082000 	.word	0x40082000

1a001198 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00119c:	b083      	sub	sp, #12
1a00119e:	9001      	str	r0, [sp, #4]
1a0011a0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0011a2:	f7ff ffb9 	bl	1a001118 <Chip_UART_GetIndex>
1a0011a6:	4b32      	ldr	r3, [pc, #200]	; (1a001270 <Chip_UART_SetBaudFDR+0xd8>)
1a0011a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0011ac:	f7ff ff34 	bl	1a001018 <Chip_Clock_GetRate>
1a0011b0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0011b2:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0011b6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0011b8:	f04f 0b00 	mov.w	fp, #0
1a0011bc:	46a2      	mov	sl, r4
1a0011be:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0011c0:	e02a      	b.n	1a001218 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0011c2:	4242      	negs	r2, r0
				div ++;
1a0011c4:	1c4b      	adds	r3, r1, #1
1a0011c6:	e017      	b.n	1a0011f8 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0011c8:	b30a      	cbz	r2, 1a00120e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0011ca:	4617      	mov	r7, r2
			sd = d;
1a0011cc:	46ab      	mov	fp, r5
			sm = m;
1a0011ce:	46a2      	mov	sl, r4
			sdiv = div;
1a0011d0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0011d2:	3501      	adds	r5, #1
1a0011d4:	42ac      	cmp	r4, r5
1a0011d6:	d91e      	bls.n	1a001216 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0011d8:	0933      	lsrs	r3, r6, #4
1a0011da:	0730      	lsls	r0, r6, #28
1a0011dc:	fba4 0100 	umull	r0, r1, r4, r0
1a0011e0:	fb04 1103 	mla	r1, r4, r3, r1
1a0011e4:	1962      	adds	r2, r4, r5
1a0011e6:	fb08 f202 	mul.w	r2, r8, r2
1a0011ea:	2300      	movs	r3, #0
1a0011ec:	f000 fd18 	bl	1a001c20 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0011f0:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0011f2:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0011f4:	2800      	cmp	r0, #0
1a0011f6:	dbe4      	blt.n	1a0011c2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0011f8:	4297      	cmp	r7, r2
1a0011fa:	d3ea      	bcc.n	1a0011d2 <Chip_UART_SetBaudFDR+0x3a>
1a0011fc:	2b00      	cmp	r3, #0
1a0011fe:	d0e8      	beq.n	1a0011d2 <Chip_UART_SetBaudFDR+0x3a>
1a001200:	0c19      	lsrs	r1, r3, #16
1a001202:	d1e6      	bne.n	1a0011d2 <Chip_UART_SetBaudFDR+0x3a>
1a001204:	2b02      	cmp	r3, #2
1a001206:	d8df      	bhi.n	1a0011c8 <Chip_UART_SetBaudFDR+0x30>
1a001208:	2d00      	cmp	r5, #0
1a00120a:	d0dd      	beq.n	1a0011c8 <Chip_UART_SetBaudFDR+0x30>
1a00120c:	e7e1      	b.n	1a0011d2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00120e:	4617      	mov	r7, r2
			sd = d;
1a001210:	46ab      	mov	fp, r5
			sm = m;
1a001212:	46a2      	mov	sl, r4
			sdiv = div;
1a001214:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001216:	3401      	adds	r4, #1
1a001218:	b11f      	cbz	r7, 1a001222 <Chip_UART_SetBaudFDR+0x8a>
1a00121a:	2c0f      	cmp	r4, #15
1a00121c:	d801      	bhi.n	1a001222 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00121e:	2500      	movs	r5, #0
1a001220:	e7d8      	b.n	1a0011d4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001222:	f1b9 0f00 	cmp.w	r9, #0
1a001226:	d01e      	beq.n	1a001266 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001228:	9a01      	ldr	r2, [sp, #4]
1a00122a:	4611      	mov	r1, r2
1a00122c:	68d3      	ldr	r3, [r2, #12]
1a00122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001232:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001234:	fa5f f389 	uxtb.w	r3, r9
1a001238:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00123a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00123e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001240:	68d3      	ldr	r3, [r2, #12]
1a001242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001246:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001248:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00124c:	b2db      	uxtb	r3, r3
1a00124e:	f00b 020f 	and.w	r2, fp, #15
1a001252:	4313      	orrs	r3, r2
1a001254:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001256:	0933      	lsrs	r3, r6, #4
1a001258:	fb0a f303 	mul.w	r3, sl, r3
1a00125c:	44da      	add	sl, fp
1a00125e:	fb09 f90a 	mul.w	r9, r9, sl
1a001262:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001266:	4648      	mov	r0, r9
1a001268:	b003      	add	sp, #12
1a00126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00126e:	bf00      	nop
1a001270:	1a00208c 	.word	0x1a00208c

1a001274 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001274:	2901      	cmp	r1, #1
1a001276:	d109      	bne.n	1a00128c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001278:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00127c:	4b04      	ldr	r3, [pc, #16]	; (1a001290 <Chip_I2C_EventHandler+0x1c>)
1a00127e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a001282:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001284:	7d13      	ldrb	r3, [r2, #20]
1a001286:	b2db      	uxtb	r3, r3
1a001288:	2b04      	cmp	r3, #4
1a00128a:	d0fb      	beq.n	1a001284 <Chip_I2C_EventHandler+0x10>
}
1a00128c:	4770      	bx	lr
1a00128e:	bf00      	nop
1a001290:	10000000 	.word	0x10000000

1a001294 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001294:	b570      	push	{r4, r5, r6, lr}
1a001296:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001298:	4e07      	ldr	r6, [pc, #28]	; (1a0012b8 <Chip_I2C_Init+0x24>)
1a00129a:	00c5      	lsls	r5, r0, #3
1a00129c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0012a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a0012a4:	8898      	ldrh	r0, [r3, #4]
1a0012a6:	f7ff fe9d 	bl	1a000fe4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0012aa:	1b2c      	subs	r4, r5, r4
1a0012ac:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
1a0012b0:	226c      	movs	r2, #108	; 0x6c
1a0012b2:	619a      	str	r2, [r3, #24]
}
1a0012b4:	bd70      	pop	{r4, r5, r6, pc}
1a0012b6:	bf00      	nop
1a0012b8:	10000000 	.word	0x10000000

1a0012bc <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0012bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0012c0:	4604      	mov	r4, r0
1a0012c2:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0012c4:	4d0b      	ldr	r5, [pc, #44]	; (1a0012f4 <Chip_I2C_SetClockRate+0x38>)
1a0012c6:	00c6      	lsls	r6, r0, #3
1a0012c8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0012cc:	009f      	lsls	r7, r3, #2
1a0012ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a0012d2:	8898      	ldrh	r0, [r3, #4]
1a0012d4:	f7ff fea0 	bl	1a001018 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0012d8:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0012dc:	59eb      	ldr	r3, [r5, r7]
1a0012de:	084a      	lsrs	r2, r1, #1
1a0012e0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0012e2:	1b34      	subs	r4, r6, r4
1a0012e4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1a0012e8:	6918      	ldr	r0, [r3, #16]
1a0012ea:	1a09      	subs	r1, r1, r0
1a0012ec:	6159      	str	r1, [r3, #20]
}
1a0012ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0012f2:	bf00      	nop
1a0012f4:	10000000 	.word	0x10000000

1a0012f8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0012f8:	4b03      	ldr	r3, [pc, #12]	; (1a001308 <Chip_ADC_GetClockIndex+0x10>)
1a0012fa:	4298      	cmp	r0, r3
1a0012fc:	d001      	beq.n	1a001302 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0012fe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001300:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001302:	2004      	movs	r0, #4
1a001304:	4770      	bx	lr
1a001306:	bf00      	nop
1a001308:	400e4000 	.word	0x400e4000

1a00130c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00130c:	b570      	push	{r4, r5, r6, lr}
1a00130e:	460d      	mov	r5, r1
1a001310:	4614      	mov	r4, r2
1a001312:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001314:	f7ff fff0 	bl	1a0012f8 <Chip_ADC_GetClockIndex>
1a001318:	f7ff fe7e 	bl	1a001018 <Chip_Clock_GetRate>
	if (burstMode) {
1a00131c:	b155      	cbz	r5, 1a001334 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a00131e:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001322:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001326:	0064      	lsls	r4, r4, #1
1a001328:	fbb0 f0f4 	udiv	r0, r0, r4
1a00132c:	b2c0      	uxtb	r0, r0
1a00132e:	3801      	subs	r0, #1
	return div;
}
1a001330:	b2c0      	uxtb	r0, r0
1a001332:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001334:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001338:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a00133c:	e7f1      	b.n	1a001322 <getClkDiv+0x16>
1a00133e:	Address 0x1a00133e is out of bounds.


1a001340 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001340:	b538      	push	{r3, r4, r5, lr}
1a001342:	4605      	mov	r5, r0
1a001344:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001346:	f7ff ffd7 	bl	1a0012f8 <Chip_ADC_GetClockIndex>
1a00134a:	2301      	movs	r3, #1
1a00134c:	461a      	mov	r2, r3
1a00134e:	4619      	mov	r1, r3
1a001350:	f7ff fe2a 	bl	1a000fa8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001354:	2100      	movs	r1, #0
1a001356:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001358:	4a08      	ldr	r2, [pc, #32]	; (1a00137c <Chip_ADC_Init+0x3c>)
1a00135a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00135c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00135e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001360:	230b      	movs	r3, #11
1a001362:	4628      	mov	r0, r5
1a001364:	f7ff ffd2 	bl	1a00130c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001368:	0200      	lsls	r0, r0, #8
1a00136a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00136e:	7923      	ldrb	r3, [r4, #4]
1a001370:	045b      	lsls	r3, r3, #17
1a001372:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001376:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a001378:	602b      	str	r3, [r5, #0]
}
1a00137a:	bd38      	pop	{r3, r4, r5, pc}
1a00137c:	00061a80 	.word	0x00061a80

1a001380 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001380:	b570      	push	{r4, r5, r6, lr}
1a001382:	4605      	mov	r5, r0
1a001384:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001386:	6804      	ldr	r4, [r0, #0]
1a001388:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00138c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001390:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001392:	790b      	ldrb	r3, [r1, #4]
1a001394:	f1c3 030b 	rsb	r3, r3, #11
1a001398:	b2db      	uxtb	r3, r3
1a00139a:	7949      	ldrb	r1, [r1, #5]
1a00139c:	f7ff ffb6 	bl	1a00130c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0013a0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0013a4:	7933      	ldrb	r3, [r6, #4]
1a0013a6:	045b      	lsls	r3, r3, #17
1a0013a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0013ac:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a0013ae:	602b      	str	r3, [r5, #0]
}
1a0013b0:	bd70      	pop	{r4, r5, r6, pc}

1a0013b2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0013b2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0013b4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0013b6:	680a      	ldr	r2, [r1, #0]
1a0013b8:	f7ff ffe2 	bl	1a001380 <Chip_ADC_SetSampleRate>
}
1a0013bc:	bd08      	pop	{r3, pc}
1a0013be:	Address 0x1a0013be is out of bounds.


1a0013c0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0013c0:	b570      	push	{r4, r5, r6, lr}
1a0013c2:	b08a      	sub	sp, #40	; 0x28
1a0013c4:	4605      	mov	r5, r0
1a0013c6:	460e      	mov	r6, r1
1a0013c8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0013ca:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0013ce:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0013d0:	2806      	cmp	r0, #6
1a0013d2:	d018      	beq.n	1a001406 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0013d4:	2300      	movs	r3, #0
1a0013d6:	2201      	movs	r2, #1
1a0013d8:	4629      	mov	r1, r5
1a0013da:	2004      	movs	r0, #4
1a0013dc:	f7ff fd9e 	bl	1a000f1c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0013e0:	4a4a      	ldr	r2, [pc, #296]	; (1a00150c <Chip_SetupCoreClock+0x14c>)
1a0013e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0013e4:	f043 0301 	orr.w	r3, r3, #1
1a0013e8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0013ea:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0013ee:	a901      	add	r1, sp, #4
1a0013f0:	4630      	mov	r0, r6
1a0013f2:	f7ff fd0d 	bl	1a000e10 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0013f6:	4b46      	ldr	r3, [pc, #280]	; (1a001510 <Chip_SetupCoreClock+0x150>)
1a0013f8:	429e      	cmp	r6, r3
1a0013fa:	d916      	bls.n	1a00142a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0013fc:	9b01      	ldr	r3, [sp, #4]
1a0013fe:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001402:	d003      	beq.n	1a00140c <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001404:	e7fe      	b.n	1a001404 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001406:	f7ff fc65 	bl	1a000cd4 <Chip_Clock_EnableCrystal>
1a00140a:	e7e3      	b.n	1a0013d4 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a00140c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001410:	d005      	beq.n	1a00141e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001416:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001418:	2500      	movs	r5, #0
			direct = 1;
1a00141a:	2601      	movs	r6, #1
1a00141c:	e007      	b.n	1a00142e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00141e:	9b04      	ldr	r3, [sp, #16]
1a001420:	3301      	adds	r3, #1
1a001422:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001424:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001426:	2600      	movs	r6, #0
1a001428:	e001      	b.n	1a00142e <Chip_SetupCoreClock+0x6e>
1a00142a:	2500      	movs	r5, #0
1a00142c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00142e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001432:	9b01      	ldr	r3, [sp, #4]
1a001434:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001438:	9a05      	ldr	r2, [sp, #20]
1a00143a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00143e:	9a03      	ldr	r2, [sp, #12]
1a001440:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001444:	9a04      	ldr	r2, [sp, #16]
1a001446:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00144a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00144e:	4a2f      	ldr	r2, [pc, #188]	; (1a00150c <Chip_SetupCoreClock+0x14c>)
1a001450:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001452:	4b2e      	ldr	r3, [pc, #184]	; (1a00150c <Chip_SetupCoreClock+0x14c>)
1a001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001456:	f013 0f01 	tst.w	r3, #1
1a00145a:	d0fa      	beq.n	1a001452 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00145c:	2300      	movs	r3, #0
1a00145e:	2201      	movs	r2, #1
1a001460:	2109      	movs	r1, #9
1a001462:	2004      	movs	r0, #4
1a001464:	f7ff fd5a 	bl	1a000f1c <Chip_Clock_SetBaseClock>

	if (direct) {
1a001468:	b306      	cbz	r6, 1a0014ac <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00146a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00146e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001470:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001472:	1e5a      	subs	r2, r3, #1
1a001474:	9209      	str	r2, [sp, #36]	; 0x24
1a001476:	2b00      	cmp	r3, #0
1a001478:	d1fa      	bne.n	1a001470 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00147a:	9b01      	ldr	r3, [sp, #4]
1a00147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001480:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001482:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001486:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00148a:	9a05      	ldr	r2, [sp, #20]
1a00148c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001490:	9a03      	ldr	r2, [sp, #12]
1a001492:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001496:	9a04      	ldr	r2, [sp, #16]
1a001498:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00149c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0014a0:	4a1a      	ldr	r2, [pc, #104]	; (1a00150c <Chip_SetupCoreClock+0x14c>)
1a0014a2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0014a4:	2c00      	cmp	r4, #0
1a0014a6:	d12e      	bne.n	1a001506 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0014a8:	b00a      	add	sp, #40	; 0x28
1a0014aa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0014ac:	2d00      	cmp	r5, #0
1a0014ae:	d0f9      	beq.n	1a0014a4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0014b0:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0014b4:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0014b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0014b8:	1e5a      	subs	r2, r3, #1
1a0014ba:	9209      	str	r2, [sp, #36]	; 0x24
1a0014bc:	2b00      	cmp	r3, #0
1a0014be:	d1fa      	bne.n	1a0014b6 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0014c0:	9b04      	ldr	r3, [sp, #16]
1a0014c2:	1e5a      	subs	r2, r3, #1
1a0014c4:	9204      	str	r2, [sp, #16]
1a0014c6:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0014ca:	9b01      	ldr	r3, [sp, #4]
1a0014cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0014d0:	9905      	ldr	r1, [sp, #20]
1a0014d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0014d6:	9903      	ldr	r1, [sp, #12]
1a0014d8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0014dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0014e4:	4a09      	ldr	r2, [pc, #36]	; (1a00150c <Chip_SetupCoreClock+0x14c>)
1a0014e6:	6453      	str	r3, [r2, #68]	; 0x44
}
1a0014e8:	e7dc      	b.n	1a0014a4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0014ea:	480a      	ldr	r0, [pc, #40]	; (1a001514 <Chip_SetupCoreClock+0x154>)
1a0014ec:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0014f0:	78cb      	ldrb	r3, [r1, #3]
1a0014f2:	788a      	ldrb	r2, [r1, #2]
1a0014f4:	7849      	ldrb	r1, [r1, #1]
1a0014f6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0014fa:	f7ff fd0f 	bl	1a000f1c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0014fe:	3401      	adds	r4, #1
1a001500:	2c11      	cmp	r4, #17
1a001502:	d9f2      	bls.n	1a0014ea <Chip_SetupCoreClock+0x12a>
1a001504:	e7d0      	b.n	1a0014a8 <Chip_SetupCoreClock+0xe8>
1a001506:	2400      	movs	r4, #0
1a001508:	e7fa      	b.n	1a001500 <Chip_SetupCoreClock+0x140>
1a00150a:	bf00      	nop
1a00150c:	40050000 	.word	0x40050000
1a001510:	068e7780 	.word	0x068e7780
1a001514:	1a00209c 	.word	0x1a00209c

1a001518 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001518:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00151a:	4a0b      	ldr	r2, [pc, #44]	; (1a001548 <SystemInit+0x30>)
1a00151c:	4b0b      	ldr	r3, [pc, #44]	; (1a00154c <SystemInit+0x34>)
1a00151e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001520:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001524:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001526:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00152a:	2b20      	cmp	r3, #32
1a00152c:	d004      	beq.n	1a001538 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00152e:	f7ff f9f3 	bl	1a000918 <Board_SystemInit>
   Board_Init();
1a001532:	f7ff fab1 	bl	1a000a98 <Board_Init>
}
1a001536:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001538:	4a04      	ldr	r2, [pc, #16]	; (1a00154c <SystemInit+0x34>)
1a00153a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00153e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001542:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001546:	e7f2      	b.n	1a00152e <SystemInit+0x16>
1a001548:	1a000000 	.word	0x1a000000
1a00154c:	e000ed00 	.word	0xe000ed00

1a001550 <initialise_monitor_handles>:
}
1a001550:	4770      	bx	lr
1a001552:	Address 0x1a001552 is out of bounds.


1a001554 <Reset_Handler>:
void Reset_Handler(void) {
1a001554:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001556:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001558:	4b19      	ldr	r3, [pc, #100]	; (1a0015c0 <Reset_Handler+0x6c>)
1a00155a:	4a1a      	ldr	r2, [pc, #104]	; (1a0015c4 <Reset_Handler+0x70>)
1a00155c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00155e:	3304      	adds	r3, #4
1a001560:	4a19      	ldr	r2, [pc, #100]	; (1a0015c8 <Reset_Handler+0x74>)
1a001562:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001564:	2300      	movs	r3, #0
1a001566:	e005      	b.n	1a001574 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001568:	4a18      	ldr	r2, [pc, #96]	; (1a0015cc <Reset_Handler+0x78>)
1a00156a:	f04f 31ff 	mov.w	r1, #4294967295
1a00156e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001572:	3301      	adds	r3, #1
1a001574:	2b07      	cmp	r3, #7
1a001576:	d9f7      	bls.n	1a001568 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001578:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00157a:	4b15      	ldr	r3, [pc, #84]	; (1a0015d0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00157c:	e007      	b.n	1a00158e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00157e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001582:	689a      	ldr	r2, [r3, #8]
1a001584:	6859      	ldr	r1, [r3, #4]
1a001586:	6818      	ldr	r0, [r3, #0]
1a001588:	f7fe fe00 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a00158c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00158e:	4a11      	ldr	r2, [pc, #68]	; (1a0015d4 <Reset_Handler+0x80>)
1a001590:	4293      	cmp	r3, r2
1a001592:	d3f4      	bcc.n	1a00157e <Reset_Handler+0x2a>
1a001594:	e006      	b.n	1a0015a4 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001596:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001598:	6859      	ldr	r1, [r3, #4]
1a00159a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00159e:	f7fe fe04 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a0015a2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0015a4:	4a0c      	ldr	r2, [pc, #48]	; (1a0015d8 <Reset_Handler+0x84>)
1a0015a6:	4293      	cmp	r3, r2
1a0015a8:	d3f5      	bcc.n	1a001596 <Reset_Handler+0x42>
    SystemInit();
1a0015aa:	f7ff ffb5 	bl	1a001518 <SystemInit>
    __libc_init_array();
1a0015ae:	f000 fcb3 	bl	1a001f18 <__libc_init_array>
    initialise_monitor_handles();
1a0015b2:	f7ff ffcd 	bl	1a001550 <initialise_monitor_handles>
    main();
1a0015b6:	f000 fa51 	bl	1a001a5c <main>
        __asm__ volatile("wfi");
1a0015ba:	bf30      	wfi
    while (1) {
1a0015bc:	e7fd      	b.n	1a0015ba <Reset_Handler+0x66>
1a0015be:	bf00      	nop
1a0015c0:	40053100 	.word	0x40053100
1a0015c4:	10df1000 	.word	0x10df1000
1a0015c8:	01dff7ff 	.word	0x01dff7ff
1a0015cc:	e000e280 	.word	0xe000e280
1a0015d0:	1a000114 	.word	0x1a000114
1a0015d4:	1a000150 	.word	0x1a000150
1a0015d8:	1a000178 	.word	0x1a000178

1a0015dc <_fini>:
void _fini(void) {}
1a0015dc:	4770      	bx	lr

1a0015de <_init>:
void _init(void) {}
1a0015de:	4770      	bx	lr

1a0015e0 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0015e0:	4b04      	ldr	r3, [pc, #16]	; (1a0015f4 <cyclesCounterInit+0x14>)
1a0015e2:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0015e4:	4a04      	ldr	r2, [pc, #16]	; (1a0015f8 <cyclesCounterInit+0x18>)
1a0015e6:	6813      	ldr	r3, [r2, #0]
1a0015e8:	f043 0301 	orr.w	r3, r3, #1
1a0015ec:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0015ee:	2001      	movs	r0, #1
1a0015f0:	4770      	bx	lr
1a0015f2:	bf00      	nop
1a0015f4:	10000038 	.word	0x10000038
1a0015f8:	e0001000 	.word	0xe0001000

1a0015fc <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0015fc:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0015fe:	4d0b      	ldr	r5, [pc, #44]	; (1a00162c <gpioObtainPinInit+0x30>)
1a001600:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001604:	182c      	adds	r4, r5, r0
1a001606:	5628      	ldrsb	r0, [r5, r0]
1a001608:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00160a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00160e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001610:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001614:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001616:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00161a:	9b02      	ldr	r3, [sp, #8]
1a00161c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00161e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001622:	9b03      	ldr	r3, [sp, #12]
1a001624:	701a      	strb	r2, [r3, #0]
}
1a001626:	bc30      	pop	{r4, r5}
1a001628:	4770      	bx	lr
1a00162a:	bf00      	nop
1a00162c:	1a0020e4 	.word	0x1a0020e4

1a001630 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001630:	b570      	push	{r4, r5, r6, lr}
1a001632:	b084      	sub	sp, #16
1a001634:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001636:	2300      	movs	r3, #0
1a001638:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00163c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001640:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001644:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001648:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00164c:	f10d 030b 	add.w	r3, sp, #11
1a001650:	9301      	str	r3, [sp, #4]
1a001652:	ab03      	add	r3, sp, #12
1a001654:	9300      	str	r3, [sp, #0]
1a001656:	f10d 030d 	add.w	r3, sp, #13
1a00165a:	f10d 020e 	add.w	r2, sp, #14
1a00165e:	f10d 010f 	add.w	r1, sp, #15
1a001662:	f7ff ffcb 	bl	1a0015fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001666:	2c05      	cmp	r4, #5
1a001668:	f200 80a5 	bhi.w	1a0017b6 <gpioInit+0x186>
1a00166c:	e8df f004 	tbb	[pc, r4]
1a001670:	45278109 	.word	0x45278109
1a001674:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001676:	4851      	ldr	r0, [pc, #324]	; (1a0017bc <gpioInit+0x18c>)
1a001678:	f7ff fa26 	bl	1a000ac8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00167c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00167e:	b004      	add	sp, #16
1a001680:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001682:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001686:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00168a:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00168e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001692:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001696:	494a      	ldr	r1, [pc, #296]	; (1a0017c0 <gpioInit+0x190>)
1a001698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00169c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0016a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0016a4:	2001      	movs	r0, #1
1a0016a6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0016aa:	4c44      	ldr	r4, [pc, #272]	; (1a0017bc <gpioInit+0x18c>)
1a0016ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0016b0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0016b4:	ea22 0201 	bic.w	r2, r2, r1
1a0016b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0016bc:	e7df      	b.n	1a00167e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0016be:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0016c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0016ca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0016ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0016d2:	493b      	ldr	r1, [pc, #236]	; (1a0017c0 <gpioInit+0x190>)
1a0016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0016d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0016dc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0016e0:	2001      	movs	r0, #1
1a0016e2:	fa00 f102 	lsl.w	r1, r0, r2
1a0016e6:	4c35      	ldr	r4, [pc, #212]	; (1a0017bc <gpioInit+0x18c>)
1a0016e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0016ec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0016f0:	ea22 0201 	bic.w	r2, r2, r1
1a0016f4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0016f8:	e7c1      	b.n	1a00167e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0016fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0016fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001702:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001706:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00170a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00170e:	492c      	ldr	r1, [pc, #176]	; (1a0017c0 <gpioInit+0x190>)
1a001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001714:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001718:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00171c:	2001      	movs	r0, #1
1a00171e:	fa00 f102 	lsl.w	r1, r0, r2
1a001722:	4c26      	ldr	r4, [pc, #152]	; (1a0017bc <gpioInit+0x18c>)
1a001724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001728:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00172c:	ea22 0201 	bic.w	r2, r2, r1
1a001730:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001734:	e7a3      	b.n	1a00167e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001736:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00173a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00173e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001742:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001746:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00174a:	491d      	ldr	r1, [pc, #116]	; (1a0017c0 <gpioInit+0x190>)
1a00174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001750:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001754:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001758:	2001      	movs	r0, #1
1a00175a:	fa00 f102 	lsl.w	r1, r0, r2
1a00175e:	4c17      	ldr	r4, [pc, #92]	; (1a0017bc <gpioInit+0x18c>)
1a001760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001764:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001768:	ea22 0201 	bic.w	r2, r2, r1
1a00176c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001770:	e785      	b.n	1a00167e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001772:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001776:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00177a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00177e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001782:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001786:	490e      	ldr	r1, [pc, #56]	; (1a0017c0 <gpioInit+0x190>)
1a001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00178c:	f89d 000c 	ldrb.w	r0, [sp, #12]
1a001790:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a001794:	2201      	movs	r2, #1
1a001796:	408a      	lsls	r2, r1
		pGPIO->DIR[portNum] |= bitValue;
1a001798:	4b08      	ldr	r3, [pc, #32]	; (1a0017bc <gpioInit+0x18c>)
1a00179a:	f500 6500 	add.w	r5, r0, #2048	; 0x800
1a00179e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0017a2:	4332      	orrs	r2, r6
1a0017a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0017a8:	b2c9      	uxtb	r1, r1
	pGPIO->B[port][pin] = setting;
1a0017aa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0017ae:	2200      	movs	r2, #0
1a0017b0:	545a      	strb	r2, [r3, r1]
   bool_t ret_val     = 1;
1a0017b2:	4620      	mov	r0, r4
}
1a0017b4:	e763      	b.n	1a00167e <gpioInit+0x4e>
   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0017b6:	2000      	movs	r0, #0
1a0017b8:	e761      	b.n	1a00167e <gpioInit+0x4e>
1a0017ba:	bf00      	nop
1a0017bc:	400f4000 	.word	0x400f4000
1a0017c0:	40086000 	.word	0x40086000

1a0017c4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0017c4:	b510      	push	{r4, lr}
1a0017c6:	b084      	sub	sp, #16
1a0017c8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0017ca:	2300      	movs	r3, #0
1a0017cc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0017d0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0017d4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0017d8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0017dc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0017e0:	f10d 030b 	add.w	r3, sp, #11
1a0017e4:	9301      	str	r3, [sp, #4]
1a0017e6:	ab03      	add	r3, sp, #12
1a0017e8:	9300      	str	r3, [sp, #0]
1a0017ea:	f10d 030d 	add.w	r3, sp, #13
1a0017ee:	f10d 020e 	add.w	r2, sp, #14
1a0017f2:	f10d 010f 	add.w	r1, sp, #15
1a0017f6:	f7ff ff01 	bl	1a0015fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0017fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017fe:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001802:	3c00      	subs	r4, #0
1a001804:	bf18      	it	ne
1a001806:	2401      	movne	r4, #1
	pGPIO->B[port][pin] = setting;
1a001808:	015b      	lsls	r3, r3, #5
1a00180a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00180e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001812:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a001814:	2001      	movs	r0, #1
1a001816:	b004      	add	sp, #16
1a001818:	bd10      	pop	{r4, pc}

1a00181a <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00181a:	b500      	push	{lr}
1a00181c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00181e:	2300      	movs	r3, #0
1a001820:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001824:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001828:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00182c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001830:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001834:	f10d 030b 	add.w	r3, sp, #11
1a001838:	9301      	str	r3, [sp, #4]
1a00183a:	ab03      	add	r3, sp, #12
1a00183c:	9300      	str	r3, [sp, #0]
1a00183e:	f10d 030d 	add.w	r3, sp, #13
1a001842:	f10d 020e 	add.w	r2, sp, #14
1a001846:	f10d 010f 	add.w	r1, sp, #15
1a00184a:	f7ff fed7 	bl	1a0015fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00184e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001852:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001856:	015b      	lsls	r3, r3, #5
1a001858:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00185c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001860:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a001862:	3800      	subs	r0, #0
1a001864:	bf18      	it	ne
1a001866:	2001      	movne	r0, #1
1a001868:	b005      	add	sp, #20
1a00186a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00186e:	Address 0x1a00186e is out of bounds.


1a001870 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a001870:	b130      	cbz	r0, 1a001880 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a001872:	4a05      	ldr	r2, [pc, #20]	; (1a001888 <tickCallbackSet+0x18>)
1a001874:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a001876:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a001878:	b121      	cbz	r1, 1a001884 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a00187a:	4b04      	ldr	r3, [pc, #16]	; (1a00188c <tickCallbackSet+0x1c>)
1a00187c:	6019      	str	r1, [r3, #0]
1a00187e:	4770      	bx	lr
         retVal = FALSE;
1a001880:	2000      	movs	r0, #0
1a001882:	e7f9      	b.n	1a001878 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a001884:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a001886:	4770      	bx	lr
1a001888:	10000060 	.word	0x10000060
1a00188c:	10000050 	.word	0x10000050

1a001890 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001890:	b118      	cbz	r0, 1a00189a <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001892:	4b04      	ldr	r3, [pc, #16]	; (1a0018a4 <tickPowerSet+0x14>)
1a001894:	2207      	movs	r2, #7
1a001896:	601a      	str	r2, [r3, #0]
1a001898:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00189a:	4b02      	ldr	r3, [pc, #8]	; (1a0018a4 <tickPowerSet+0x14>)
1a00189c:	2200      	movs	r2, #0
1a00189e:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0018a0:	4770      	bx	lr
1a0018a2:	bf00      	nop
1a0018a4:	e000e010 	.word	0xe000e010

1a0018a8 <tickInit>:
{
1a0018a8:	b538      	push	{r3, r4, r5, lr}
1a0018aa:	4602      	mov	r2, r0
1a0018ac:	460b      	mov	r3, r1
      if( tickRateMSvalue == 0 ) {
1a0018ae:	ea52 0103 	orrs.w	r1, r2, r3
1a0018b2:	d028      	beq.n	1a001906 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0018b4:	f110 34ff 	adds.w	r4, r0, #4294967295
1a0018b8:	f143 35ff 	adc.w	r5, r3, #4294967295
1a0018bc:	2d00      	cmp	r5, #0
1a0018be:	bf08      	it	eq
1a0018c0:	2c32      	cmpeq	r4, #50	; 0x32
1a0018c2:	d225      	bcs.n	1a001910 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0018c4:	4913      	ldr	r1, [pc, #76]	; (1a001914 <tickInit+0x6c>)
1a0018c6:	e9c1 2300 	strd	r2, r3, [r1]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0018ca:	4913      	ldr	r1, [pc, #76]	; (1a001918 <tickInit+0x70>)
1a0018cc:	680c      	ldr	r4, [r1, #0]
1a0018ce:	fba4 0100 	umull	r0, r1, r4, r0
1a0018d2:	fb04 1103 	mla	r1, r4, r3, r1
1a0018d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0018da:	2300      	movs	r3, #0
1a0018dc:	f000 f9a0 	bl	1a001c20 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0018e0:	3801      	subs	r0, #1
1a0018e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0018e6:	d209      	bcs.n	1a0018fc <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0018e8:	4b0c      	ldr	r3, [pc, #48]	; (1a00191c <tickInit+0x74>)
1a0018ea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0018ec:	4a0c      	ldr	r2, [pc, #48]	; (1a001920 <tickInit+0x78>)
1a0018ee:	21e0      	movs	r1, #224	; 0xe0
1a0018f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0018f4:	2200      	movs	r2, #0
1a0018f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0018f8:	2207      	movs	r2, #7
1a0018fa:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0018fc:	2001      	movs	r0, #1
1a0018fe:	f7ff ffc7 	bl	1a001890 <tickPowerSet>
      bool_t ret_val = 1;
1a001902:	2001      	movs	r0, #1
1a001904:	e005      	b.n	1a001912 <tickInit+0x6a>
         tickPowerSet( OFF );
1a001906:	2000      	movs	r0, #0
1a001908:	f7ff ffc2 	bl	1a001890 <tickPowerSet>
         ret_val = 0;
1a00190c:	2000      	movs	r0, #0
1a00190e:	e000      	b.n	1a001912 <tickInit+0x6a>
            ret_val = 0;
1a001910:	2000      	movs	r0, #0
}
1a001912:	bd38      	pop	{r3, r4, r5, pc}
1a001914:	10000040 	.word	0x10000040
1a001918:	10000094 	.word	0x10000094
1a00191c:	e000e010 	.word	0xe000e010
1a001920:	e000ed00 	.word	0xe000ed00

1a001924 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001924:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001926:	4a07      	ldr	r2, [pc, #28]	; (1a001944 <SysTick_Handler+0x20>)
1a001928:	6813      	ldr	r3, [r2, #0]
1a00192a:	6851      	ldr	r1, [r2, #4]
1a00192c:	3301      	adds	r3, #1
1a00192e:	f141 0100 	adc.w	r1, r1, #0
1a001932:	6013      	str	r3, [r2, #0]
1a001934:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001936:	4b04      	ldr	r3, [pc, #16]	; (1a001948 <SysTick_Handler+0x24>)
1a001938:	681b      	ldr	r3, [r3, #0]
1a00193a:	b113      	cbz	r3, 1a001942 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a00193c:	4a03      	ldr	r2, [pc, #12]	; (1a00194c <SysTick_Handler+0x28>)
1a00193e:	6810      	ldr	r0, [r2, #0]
1a001940:	4798      	blx	r3
   }
}
1a001942:	bd08      	pop	{r3, pc}
1a001944:	10000058 	.word	0x10000058
1a001948:	10000060 	.word	0x10000060
1a00194c:	10000050 	.word	0x10000050

1a001950 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001950:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001952:	4b04      	ldr	r3, [pc, #16]	; (1a001964 <USB0_IRQHandler+0x14>)
1a001954:	681b      	ldr	r3, [r3, #0]
1a001956:	681b      	ldr	r3, [r3, #0]
1a001958:	68db      	ldr	r3, [r3, #12]
1a00195a:	4a03      	ldr	r2, [pc, #12]	; (1a001968 <USB0_IRQHandler+0x18>)
1a00195c:	6810      	ldr	r0, [r2, #0]
1a00195e:	4798      	blx	r3
}
1a001960:	bd08      	pop	{r3, pc}
1a001962:	bf00      	nop
1a001964:	10000098 	.word	0x10000098
1a001968:	10000064 	.word	0x10000064

1a00196c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00196c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00196e:	f7ff f8ad 	bl	1a000acc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001972:	4b1a      	ldr	r3, [pc, #104]	; (1a0019dc <boardInit+0x70>)
1a001974:	6818      	ldr	r0, [r3, #0]
1a001976:	f7ff fe33 	bl	1a0015e0 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a00197a:	2001      	movs	r0, #1
1a00197c:	2100      	movs	r1, #0
1a00197e:	f7ff ff93 	bl	1a0018a8 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001982:	2105      	movs	r1, #5
1a001984:	2000      	movs	r0, #0
1a001986:	f7ff fe53 	bl	1a001630 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00198a:	2100      	movs	r1, #0
1a00198c:	2024      	movs	r0, #36	; 0x24
1a00198e:	f7ff fe4f 	bl	1a001630 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001992:	2100      	movs	r1, #0
1a001994:	2025      	movs	r0, #37	; 0x25
1a001996:	f7ff fe4b 	bl	1a001630 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00199a:	2100      	movs	r1, #0
1a00199c:	2026      	movs	r0, #38	; 0x26
1a00199e:	f7ff fe47 	bl	1a001630 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0019a2:	2100      	movs	r1, #0
1a0019a4:	2027      	movs	r0, #39	; 0x27
1a0019a6:	f7ff fe43 	bl	1a001630 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0019aa:	2101      	movs	r1, #1
1a0019ac:	2028      	movs	r0, #40	; 0x28
1a0019ae:	f7ff fe3f 	bl	1a001630 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0019b2:	2101      	movs	r1, #1
1a0019b4:	2029      	movs	r0, #41	; 0x29
1a0019b6:	f7ff fe3b 	bl	1a001630 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0019ba:	2101      	movs	r1, #1
1a0019bc:	202a      	movs	r0, #42	; 0x2a
1a0019be:	f7ff fe37 	bl	1a001630 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0019c2:	2101      	movs	r1, #1
1a0019c4:	202b      	movs	r0, #43	; 0x2b
1a0019c6:	f7ff fe33 	bl	1a001630 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0019ca:	2101      	movs	r1, #1
1a0019cc:	202c      	movs	r0, #44	; 0x2c
1a0019ce:	f7ff fe2f 	bl	1a001630 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0019d2:	2101      	movs	r1, #1
1a0019d4:	202d      	movs	r0, #45	; 0x2d
1a0019d6:	f7ff fe2b 	bl	1a001630 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0019da:	bd08      	pop	{r3, pc}
1a0019dc:	10000094 	.word	0x10000094

1a0019e0 <myTickHook>:
 * @return	Nothing
 */
void myTickHook( void *ptr ){

	/* The sysTick Interrupt Handler only set a Flag */
	SysTick_Time_Flag = true;
1a0019e0:	4b01      	ldr	r3, [pc, #4]	; (1a0019e8 <myTickHook+0x8>)
1a0019e2:	2201      	movs	r2, #1
1a0019e4:	701a      	strb	r2, [r3, #0]
}
1a0019e6:	4770      	bx	lr
1a0019e8:	10000068 	.word	0x10000068

1a0019ec <panelDeControlIface_opLED>:
{
1a0019ec:	b508      	push	{r3, lr}
	gpioWrite( (LEDR + LEDNumber), State );
1a0019ee:	b2c8      	uxtb	r0, r1
1a0019f0:	3028      	adds	r0, #40	; 0x28
1a0019f2:	4611      	mov	r1, r2
1a0019f4:	b2c0      	uxtb	r0, r0
1a0019f6:	f7ff fee5 	bl	1a0017c4 <gpioWrite>
}
1a0019fa:	bd08      	pop	{r3, pc}

1a0019fc <panelDeControl_setTimer>:
{
1a0019fc:	b500      	push	{lr}
1a0019fe:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a001a00:	9300      	str	r3, [sp, #0]
1a001a02:	4613      	mov	r3, r2
1a001a04:	460a      	mov	r2, r1
1a001a06:	2101      	movs	r1, #1
1a001a08:	4802      	ldr	r0, [pc, #8]	; (1a001a14 <panelDeControl_setTimer+0x18>)
1a001a0a:	f000 f88b 	bl	1a001b24 <SetNewTimerTick>
}
1a001a0e:	b003      	add	sp, #12
1a001a10:	f85d fb04 	ldr.w	pc, [sp], #4
1a001a14:	1000009c 	.word	0x1000009c

1a001a18 <panelDeControl_unsetTimer>:
{
1a001a18:	b508      	push	{r3, lr}
1a001a1a:	460a      	mov	r2, r1
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a001a1c:	2101      	movs	r1, #1
1a001a1e:	4802      	ldr	r0, [pc, #8]	; (1a001a28 <panelDeControl_unsetTimer+0x10>)
1a001a20:	f000 f89a 	bl	1a001b58 <UnsetTimerTick>
}
1a001a24:	bd08      	pop	{r3, pc}
1a001a26:	bf00      	nop
1a001a28:	1000009c 	.word	0x1000009c

1a001a2c <Buttons_GetStatus_>:

/*! This function scan all EDU-CIAA-NXP buttons (TEC1, TEC2, TEC3 and TEC4),
 *  and return ID of pressed button (TEC1 or TEC2 or TEC3 or TEC4)
 *  or false if no button was pressed.
 */
uint32_t Buttons_GetStatus_(void) {
1a001a2c:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = false;
	uint32_t idx;

	for (idx = 0; idx < 4; ++idx) {
1a001a2e:	2400      	movs	r4, #0
	uint8_t ret = false;
1a001a30:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a001a32:	e000      	b.n	1a001a36 <Buttons_GetStatus_+0xa>
1a001a34:	3401      	adds	r4, #1
1a001a36:	2c03      	cmp	r4, #3
1a001a38:	d80b      	bhi.n	1a001a52 <Buttons_GetStatus_+0x26>
		if (gpioRead( TEC1 + idx ) == 0)
1a001a3a:	b2e0      	uxtb	r0, r4
1a001a3c:	3024      	adds	r0, #36	; 0x24
1a001a3e:	b2c0      	uxtb	r0, r0
1a001a40:	f7ff feeb 	bl	1a00181a <gpioRead>
1a001a44:	2800      	cmp	r0, #0
1a001a46:	d1f5      	bne.n	1a001a34 <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a001a48:	2301      	movs	r3, #1
1a001a4a:	40a3      	lsls	r3, r4
1a001a4c:	431d      	orrs	r5, r3
1a001a4e:	b2ed      	uxtb	r5, r5
1a001a50:	e7f0      	b.n	1a001a34 <Buttons_GetStatus_+0x8>
	}
	return ret;
}
1a001a52:	4628      	mov	r0, r5
1a001a54:	bd38      	pop	{r3, r4, r5, pc}

1a001a56 <panelDeControlIface_opSetForma>:

void panelDeControlIface_opSetForma(sc_integer forma)
{
	return;
}
1a001a56:	4770      	bx	lr

1a001a58 <panelDeControlIface_opSetFrecuencia>:

void panelDeControlIface_opSetFrecuencia(sc_integer frecuencia)
{
	return;
}
1a001a58:	4770      	bx	lr

1a001a5a <panelDeControlIface_opSetTension>:


void panelDeControlIface_opSetTension(sc_integer tension)
{
	return;
}
1a001a5a:	4770      	bx	lr

1a001a5c <main>:
/**
 * @brief	main routine for statechart example: EDU-CIAA-NXP - Application
 * @return	Function should not exit.
 */
int main(void)
{
1a001a5c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	uint32_t BUTTON_Status;

	/* Generic Initialization */
	boardConfig();
1a001a5e:	f7ff ff85 	bl	1a00196c <boardInit>

	/* Init Ticks counter => TICKRATE_MS */
	tickConfig( TICKRATE_MS );
1a001a62:	2001      	movs	r0, #1
1a001a64:	2100      	movs	r1, #0
1a001a66:	f7ff ff1f 	bl	1a0018a8 <tickInit>

	/* Add Tick Hook */
	tickCallbackSet( myTickHook, (void*)NULL );
1a001a6a:	2100      	movs	r1, #0
1a001a6c:	4820      	ldr	r0, [pc, #128]	; (1a001af0 <main+0x94>)
1a001a6e:	f7ff feff 	bl	1a001870 <tickCallbackSet>

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a001a72:	2101      	movs	r1, #1
1a001a74:	481f      	ldr	r0, [pc, #124]	; (1a001af4 <main+0x98>)
1a001a76:	f000 f843 	bl	1a001b00 <InitTimerTicks>

	/* Statechart Initialization */
	panelDeControl_init( &statechart );
1a001a7a:	4c1f      	ldr	r4, [pc, #124]	; (1a001af8 <main+0x9c>)
1a001a7c:	4620      	mov	r0, r4
1a001a7e:	f7fe fe6b 	bl	1a000758 <panelDeControl_init>
	panelDeControl_enter( &statechart );
1a001a82:	4620      	mov	r0, r4
1a001a84:	f7fe fe7b 	bl	1a00077e <panelDeControl_enter>
1a001a88:	e01a      	b.n	1a001ac0 <main+0x64>

			/* Then Scan all Timer Ticks */
			for (i = 0; i < NOF_TIMERS; i++) {

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a001a8a:	481a      	ldr	r0, [pc, #104]	; (1a001af4 <main+0x98>)
1a001a8c:	0123      	lsls	r3, r4, #4
1a001a8e:	58c2      	ldr	r2, [r0, r3]
1a001a90:	2101      	movs	r1, #1
1a001a92:	f000 f87c 	bl	1a001b8e <IsPendEvent>
1a001a96:	b908      	cbnz	r0, 1a001a9c <main+0x40>
			for (i = 0; i < NOF_TIMERS; i++) {
1a001a98:	3401      	adds	r4, #1
1a001a9a:	e01d      	b.n	1a001ad8 <main+0x7c>

					/* Then Raise an Event -> Ticks.evid => OK */
					panelDeControl_raiseTimeEvent( &statechart, ticks[i].evid );
1a001a9c:	4d15      	ldr	r5, [pc, #84]	; (1a001af4 <main+0x98>)
1a001a9e:	0126      	lsls	r6, r4, #4
1a001aa0:	59a9      	ldr	r1, [r5, r6]
1a001aa2:	4815      	ldr	r0, [pc, #84]	; (1a001af8 <main+0x9c>)
1a001aa4:	f7fe fed6 	bl	1a000854 <panelDeControl_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a001aa8:	59aa      	ldr	r2, [r5, r6]
1a001aaa:	2101      	movs	r1, #1
1a001aac:	4628      	mov	r0, r5
1a001aae:	f000 f882 	bl	1a001bb6 <MarkAsAttEvent>
1a001ab2:	e7f1      	b.n	1a001a98 <main+0x3c>
				/* Then Raise an Event -> evTECXOprimodo => OK,
				 * and Value of pressed button -> viTecla */
				panelDeControlIface_raise_evTECXOprimido(&statechart, BUTTON_Status);
			else
				/* Then else Raise an Event -> evTECXNoOprimido => OK */
				panelDeControlIface_raise_evTECXNoOprimido(&statechart);
1a001ab4:	4810      	ldr	r0, [pc, #64]	; (1a001af8 <main+0x9c>)
1a001ab6:	f7fe fed6 	bl	1a000866 <panelDeControlIface_raise_evTECXNoOprimido>

			/* Then Run an Cycle of Statechart */
			panelDeControl_runCycle(&statechart);		// Run Cycle of Statechart
1a001aba:	480f      	ldr	r0, [pc, #60]	; (1a001af8 <main+0x9c>)
1a001abc:	f7fe fe6e 	bl	1a00079c <panelDeControl_runCycle>
		__WFI();
1a001ac0:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a001ac2:	4b0e      	ldr	r3, [pc, #56]	; (1a001afc <main+0xa0>)
1a001ac4:	781b      	ldrb	r3, [r3, #0]
1a001ac6:	2b00      	cmp	r3, #0
1a001ac8:	d0fa      	beq.n	1a001ac0 <main+0x64>
			SysTick_Time_Flag = false;
1a001aca:	2400      	movs	r4, #0
1a001acc:	4b0b      	ldr	r3, [pc, #44]	; (1a001afc <main+0xa0>)
1a001ace:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a001ad0:	2101      	movs	r1, #1
1a001ad2:	4808      	ldr	r0, [pc, #32]	; (1a001af4 <main+0x98>)
1a001ad4:	f000 f882 	bl	1a001bdc <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a001ad8:	2c00      	cmp	r4, #0
1a001ada:	d0d6      	beq.n	1a001a8a <main+0x2e>
			BUTTON_Status = Buttons_GetStatus_();
1a001adc:	f7ff ffa6 	bl	1a001a2c <Buttons_GetStatus_>
			if (BUTTON_Status != 0)
1a001ae0:	4601      	mov	r1, r0
1a001ae2:	2800      	cmp	r0, #0
1a001ae4:	d0e6      	beq.n	1a001ab4 <main+0x58>
				panelDeControlIface_raise_evTECXOprimido(&statechart, BUTTON_Status);
1a001ae6:	4804      	ldr	r0, [pc, #16]	; (1a001af8 <main+0x9c>)
1a001ae8:	f7fe fec0 	bl	1a00086c <panelDeControlIface_raise_evTECXOprimido>
1a001aec:	e7e5      	b.n	1a001aba <main+0x5e>
1a001aee:	bf00      	nop
1a001af0:	1a0019e1 	.word	0x1a0019e1
1a001af4:	1000009c 	.word	0x1000009c
1a001af8:	1000006c 	.word	0x1000006c
1a001afc:	10000068 	.word	0x10000068

1a001b00 <InitTimerTicks>:
#include "PanelDeControl.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a001b00:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001b02:	2400      	movs	r4, #0
1a001b04:	428c      	cmp	r4, r1
1a001b06:	d20b      	bcs.n	1a001b20 <InitTimerTicks+0x20>
		list[i].evid = (sc_eventid)0;
1a001b08:	0125      	lsls	r5, r4, #4
1a001b0a:	eb00 1204 	add.w	r2, r0, r4, lsl #4
1a001b0e:	2300      	movs	r3, #0
1a001b10:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a001b12:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a001b14:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a001b16:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a001b18:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a001b1a:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a001b1c:	3401      	adds	r4, #1
1a001b1e:	e7f1      	b.n	1a001b04 <InitTimerTicks+0x4>
	}
}
1a001b20:	bc30      	pop	{r4, r5}
1a001b22:	4770      	bx	lr

1a001b24 <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a001b24:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a001b26:	2400      	movs	r4, #0
1a001b28:	428c      	cmp	r4, r1
1a001b2a:	d212      	bcs.n	1a001b52 <SetNewTimerTick+0x2e>
		if(!list[i].evid) {
1a001b2c:	0125      	lsls	r5, r4, #4
1a001b2e:	eb00 1604 	add.w	r6, r0, r4, lsl #4
1a001b32:	5945      	ldr	r5, [r0, r5]
1a001b34:	b10d      	cbz	r5, 1a001b3a <SetNewTimerTick+0x16>
	for(i = 0; i < len; i++) {
1a001b36:	3401      	adds	r4, #1
1a001b38:	e7f6      	b.n	1a001b28 <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a001b3a:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a001b3c:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a001b3e:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a001b40:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b44:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a001b46:	2301      	movs	r3, #1
1a001b48:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a001b4a:	2300      	movs	r3, #0
1a001b4c:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a001b4e:	4610      	mov	r0, r2
			break;
1a001b50:	e000      	b.n	1a001b54 <SetNewTimerTick+0x30>
	sc_eventid ret = (sc_eventid)0;
1a001b52:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a001b54:	bc70      	pop	{r4, r5, r6}
1a001b56:	4770      	bx	lr

1a001b58 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a001b58:	2300      	movs	r3, #0
1a001b5a:	428b      	cmp	r3, r1
1a001b5c:	d215      	bcs.n	1a001b8a <UnsetTimerTick+0x32>
{
1a001b5e:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001b60:	011c      	lsls	r4, r3, #4
1a001b62:	eb00 1503 	add.w	r5, r0, r3, lsl #4
1a001b66:	5904      	ldr	r4, [r0, r4]
1a001b68:	4294      	cmp	r4, r2
1a001b6a:	d004      	beq.n	1a001b76 <UnsetTimerTick+0x1e>
	for(i = 0; i < len; i++) {
1a001b6c:	3301      	adds	r3, #1
1a001b6e:	428b      	cmp	r3, r1
1a001b70:	d3f6      	bcc.n	1a001b60 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a001b72:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a001b74:	e007      	b.n	1a001b86 <UnsetTimerTick+0x2e>
			list[i].evid = (sc_eventid)0;
1a001b76:	2300      	movs	r3, #0
1a001b78:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a001b7a:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a001b7c:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a001b7e:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a001b80:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a001b82:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a001b84:	4610      	mov	r0, r2
}
1a001b86:	bc30      	pop	{r4, r5}
1a001b88:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a001b8a:	2000      	movs	r0, #0
}
1a001b8c:	4770      	bx	lr

1a001b8e <IsPendEvent>:


sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
1a001b8e:	b470      	push	{r4, r5, r6}
1a001b90:	4605      	mov	r5, r0
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a001b92:	2300      	movs	r3, #0
1a001b94:	e000      	b.n	1a001b98 <IsPendEvent+0xa>
1a001b96:	3301      	adds	r3, #1
1a001b98:	428b      	cmp	r3, r1
1a001b9a:	d209      	bcs.n	1a001bb0 <IsPendEvent+0x22>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a001b9c:	011c      	lsls	r4, r3, #4
1a001b9e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
1a001ba2:	5928      	ldr	r0, [r5, r4]
1a001ba4:	4290      	cmp	r0, r2
1a001ba6:	d1f6      	bne.n	1a001b96 <IsPendEvent+0x8>
1a001ba8:	7bb0      	ldrb	r0, [r6, #14]
1a001baa:	2800      	cmp	r0, #0
1a001bac:	d0f3      	beq.n	1a001b96 <IsPendEvent+0x8>
1a001bae:	e000      	b.n	1a001bb2 <IsPendEvent+0x24>
	sc_boolean ret = false;
1a001bb0:	2000      	movs	r0, #0
			ret = true;
			break;
		}
	}
	return ret;
}
1a001bb2:	bc70      	pop	{r4, r5, r6}
1a001bb4:	4770      	bx	lr

1a001bb6 <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001bb6:	2300      	movs	r3, #0
1a001bb8:	428b      	cmp	r3, r1
1a001bba:	d20e      	bcs.n	1a001bda <MarkAsAttEvent+0x24>
{
1a001bbc:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001bbe:	011c      	lsls	r4, r3, #4
1a001bc0:	eb00 1503 	add.w	r5, r0, r3, lsl #4
1a001bc4:	5904      	ldr	r4, [r0, r4]
1a001bc6:	4294      	cmp	r4, r2
1a001bc8:	d003      	beq.n	1a001bd2 <MarkAsAttEvent+0x1c>
	for(i = 0; i < len; i++) {
1a001bca:	3301      	adds	r3, #1
1a001bcc:	428b      	cmp	r3, r1
1a001bce:	d3f6      	bcc.n	1a001bbe <MarkAsAttEvent+0x8>
1a001bd0:	e001      	b.n	1a001bd6 <MarkAsAttEvent+0x20>
			list[i].evPending = false;
1a001bd2:	2300      	movs	r3, #0
1a001bd4:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a001bd6:	bc30      	pop	{r4, r5}
1a001bd8:	4770      	bx	lr
1a001bda:	4770      	bx	lr

1a001bdc <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001bdc:	2300      	movs	r3, #0
1a001bde:	428b      	cmp	r3, r1
1a001be0:	d21d      	bcs.n	1a001c1e <UpdateTimers+0x42>
{
1a001be2:	b410      	push	{r4}
1a001be4:	e006      	b.n	1a001bf4 <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a001be6:	2400      	movs	r4, #0
1a001be8:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a001bea:	2401      	movs	r4, #1
1a001bec:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a001bee:	3301      	adds	r3, #1
1a001bf0:	428b      	cmp	r3, r1
1a001bf2:	d211      	bcs.n	1a001c18 <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a001bf4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a001bf8:	7b54      	ldrb	r4, [r2, #13]
1a001bfa:	2c00      	cmp	r4, #0
1a001bfc:	d0f7      	beq.n	1a001bee <UpdateTimers+0x12>
			if(list[i].count)
1a001bfe:	6894      	ldr	r4, [r2, #8]
1a001c00:	b10c      	cbz	r4, 1a001c06 <UpdateTimers+0x2a>
				list[i].count--;
1a001c02:	3c01      	subs	r4, #1
1a001c04:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a001c06:	6894      	ldr	r4, [r2, #8]
1a001c08:	2c00      	cmp	r4, #0
1a001c0a:	d1f0      	bne.n	1a001bee <UpdateTimers+0x12>
				if(list[i].periodic)
1a001c0c:	7b14      	ldrb	r4, [r2, #12]
1a001c0e:	2c00      	cmp	r4, #0
1a001c10:	d0e9      	beq.n	1a001be6 <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a001c12:	6854      	ldr	r4, [r2, #4]
1a001c14:	6094      	str	r4, [r2, #8]
1a001c16:	e7e8      	b.n	1a001bea <UpdateTimers+0xe>
			}
		}
	}
}
1a001c18:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001c1c:	4770      	bx	lr
1a001c1e:	4770      	bx	lr

1a001c20 <__aeabi_uldivmod>:
1a001c20:	b953      	cbnz	r3, 1a001c38 <__aeabi_uldivmod+0x18>
1a001c22:	b94a      	cbnz	r2, 1a001c38 <__aeabi_uldivmod+0x18>
1a001c24:	2900      	cmp	r1, #0
1a001c26:	bf08      	it	eq
1a001c28:	2800      	cmpeq	r0, #0
1a001c2a:	bf1c      	itt	ne
1a001c2c:	f04f 31ff 	movne.w	r1, #4294967295
1a001c30:	f04f 30ff 	movne.w	r0, #4294967295
1a001c34:	f000 b96e 	b.w	1a001f14 <__aeabi_idiv0>
1a001c38:	f1ad 0c08 	sub.w	ip, sp, #8
1a001c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001c40:	f000 f806 	bl	1a001c50 <__udivmoddi4>
1a001c44:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001c4c:	b004      	add	sp, #16
1a001c4e:	4770      	bx	lr

1a001c50 <__udivmoddi4>:
1a001c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001c54:	9d08      	ldr	r5, [sp, #32]
1a001c56:	4604      	mov	r4, r0
1a001c58:	468c      	mov	ip, r1
1a001c5a:	2b00      	cmp	r3, #0
1a001c5c:	f040 8083 	bne.w	1a001d66 <__udivmoddi4+0x116>
1a001c60:	428a      	cmp	r2, r1
1a001c62:	4617      	mov	r7, r2
1a001c64:	d947      	bls.n	1a001cf6 <__udivmoddi4+0xa6>
1a001c66:	fab2 f282 	clz	r2, r2
1a001c6a:	b142      	cbz	r2, 1a001c7e <__udivmoddi4+0x2e>
1a001c6c:	f1c2 0020 	rsb	r0, r2, #32
1a001c70:	fa24 f000 	lsr.w	r0, r4, r0
1a001c74:	4091      	lsls	r1, r2
1a001c76:	4097      	lsls	r7, r2
1a001c78:	ea40 0c01 	orr.w	ip, r0, r1
1a001c7c:	4094      	lsls	r4, r2
1a001c7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a001c82:	0c23      	lsrs	r3, r4, #16
1a001c84:	fbbc f6f8 	udiv	r6, ip, r8
1a001c88:	fa1f fe87 	uxth.w	lr, r7
1a001c8c:	fb08 c116 	mls	r1, r8, r6, ip
1a001c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001c94:	fb06 f10e 	mul.w	r1, r6, lr
1a001c98:	4299      	cmp	r1, r3
1a001c9a:	d909      	bls.n	1a001cb0 <__udivmoddi4+0x60>
1a001c9c:	18fb      	adds	r3, r7, r3
1a001c9e:	f106 30ff 	add.w	r0, r6, #4294967295
1a001ca2:	f080 8119 	bcs.w	1a001ed8 <__udivmoddi4+0x288>
1a001ca6:	4299      	cmp	r1, r3
1a001ca8:	f240 8116 	bls.w	1a001ed8 <__udivmoddi4+0x288>
1a001cac:	3e02      	subs	r6, #2
1a001cae:	443b      	add	r3, r7
1a001cb0:	1a5b      	subs	r3, r3, r1
1a001cb2:	b2a4      	uxth	r4, r4
1a001cb4:	fbb3 f0f8 	udiv	r0, r3, r8
1a001cb8:	fb08 3310 	mls	r3, r8, r0, r3
1a001cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001cc0:	fb00 fe0e 	mul.w	lr, r0, lr
1a001cc4:	45a6      	cmp	lr, r4
1a001cc6:	d909      	bls.n	1a001cdc <__udivmoddi4+0x8c>
1a001cc8:	193c      	adds	r4, r7, r4
1a001cca:	f100 33ff 	add.w	r3, r0, #4294967295
1a001cce:	f080 8105 	bcs.w	1a001edc <__udivmoddi4+0x28c>
1a001cd2:	45a6      	cmp	lr, r4
1a001cd4:	f240 8102 	bls.w	1a001edc <__udivmoddi4+0x28c>
1a001cd8:	3802      	subs	r0, #2
1a001cda:	443c      	add	r4, r7
1a001cdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1a001ce0:	eba4 040e 	sub.w	r4, r4, lr
1a001ce4:	2600      	movs	r6, #0
1a001ce6:	b11d      	cbz	r5, 1a001cf0 <__udivmoddi4+0xa0>
1a001ce8:	40d4      	lsrs	r4, r2
1a001cea:	2300      	movs	r3, #0
1a001cec:	e9c5 4300 	strd	r4, r3, [r5]
1a001cf0:	4631      	mov	r1, r6
1a001cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001cf6:	b902      	cbnz	r2, 1a001cfa <__udivmoddi4+0xaa>
1a001cf8:	deff      	udf	#255	; 0xff
1a001cfa:	fab2 f282 	clz	r2, r2
1a001cfe:	2a00      	cmp	r2, #0
1a001d00:	d150      	bne.n	1a001da4 <__udivmoddi4+0x154>
1a001d02:	1bcb      	subs	r3, r1, r7
1a001d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a001d08:	fa1f f887 	uxth.w	r8, r7
1a001d0c:	2601      	movs	r6, #1
1a001d0e:	fbb3 fcfe 	udiv	ip, r3, lr
1a001d12:	0c21      	lsrs	r1, r4, #16
1a001d14:	fb0e 331c 	mls	r3, lr, ip, r3
1a001d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001d1c:	fb08 f30c 	mul.w	r3, r8, ip
1a001d20:	428b      	cmp	r3, r1
1a001d22:	d907      	bls.n	1a001d34 <__udivmoddi4+0xe4>
1a001d24:	1879      	adds	r1, r7, r1
1a001d26:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001d2a:	d202      	bcs.n	1a001d32 <__udivmoddi4+0xe2>
1a001d2c:	428b      	cmp	r3, r1
1a001d2e:	f200 80e9 	bhi.w	1a001f04 <__udivmoddi4+0x2b4>
1a001d32:	4684      	mov	ip, r0
1a001d34:	1ac9      	subs	r1, r1, r3
1a001d36:	b2a3      	uxth	r3, r4
1a001d38:	fbb1 f0fe 	udiv	r0, r1, lr
1a001d3c:	fb0e 1110 	mls	r1, lr, r0, r1
1a001d40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
1a001d44:	fb08 f800 	mul.w	r8, r8, r0
1a001d48:	45a0      	cmp	r8, r4
1a001d4a:	d907      	bls.n	1a001d5c <__udivmoddi4+0x10c>
1a001d4c:	193c      	adds	r4, r7, r4
1a001d4e:	f100 33ff 	add.w	r3, r0, #4294967295
1a001d52:	d202      	bcs.n	1a001d5a <__udivmoddi4+0x10a>
1a001d54:	45a0      	cmp	r8, r4
1a001d56:	f200 80d9 	bhi.w	1a001f0c <__udivmoddi4+0x2bc>
1a001d5a:	4618      	mov	r0, r3
1a001d5c:	eba4 0408 	sub.w	r4, r4, r8
1a001d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001d64:	e7bf      	b.n	1a001ce6 <__udivmoddi4+0x96>
1a001d66:	428b      	cmp	r3, r1
1a001d68:	d909      	bls.n	1a001d7e <__udivmoddi4+0x12e>
1a001d6a:	2d00      	cmp	r5, #0
1a001d6c:	f000 80b1 	beq.w	1a001ed2 <__udivmoddi4+0x282>
1a001d70:	2600      	movs	r6, #0
1a001d72:	e9c5 0100 	strd	r0, r1, [r5]
1a001d76:	4630      	mov	r0, r6
1a001d78:	4631      	mov	r1, r6
1a001d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001d7e:	fab3 f683 	clz	r6, r3
1a001d82:	2e00      	cmp	r6, #0
1a001d84:	d14a      	bne.n	1a001e1c <__udivmoddi4+0x1cc>
1a001d86:	428b      	cmp	r3, r1
1a001d88:	d302      	bcc.n	1a001d90 <__udivmoddi4+0x140>
1a001d8a:	4282      	cmp	r2, r0
1a001d8c:	f200 80b8 	bhi.w	1a001f00 <__udivmoddi4+0x2b0>
1a001d90:	1a84      	subs	r4, r0, r2
1a001d92:	eb61 0103 	sbc.w	r1, r1, r3
1a001d96:	2001      	movs	r0, #1
1a001d98:	468c      	mov	ip, r1
1a001d9a:	2d00      	cmp	r5, #0
1a001d9c:	d0a8      	beq.n	1a001cf0 <__udivmoddi4+0xa0>
1a001d9e:	e9c5 4c00 	strd	r4, ip, [r5]
1a001da2:	e7a5      	b.n	1a001cf0 <__udivmoddi4+0xa0>
1a001da4:	f1c2 0320 	rsb	r3, r2, #32
1a001da8:	fa20 f603 	lsr.w	r6, r0, r3
1a001dac:	4097      	lsls	r7, r2
1a001dae:	fa01 f002 	lsl.w	r0, r1, r2
1a001db2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a001db6:	40d9      	lsrs	r1, r3
1a001db8:	4330      	orrs	r0, r6
1a001dba:	0c03      	lsrs	r3, r0, #16
1a001dbc:	fbb1 f6fe 	udiv	r6, r1, lr
1a001dc0:	fa1f f887 	uxth.w	r8, r7
1a001dc4:	fb0e 1116 	mls	r1, lr, r6, r1
1a001dc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001dcc:	fb06 f108 	mul.w	r1, r6, r8
1a001dd0:	4299      	cmp	r1, r3
1a001dd2:	fa04 f402 	lsl.w	r4, r4, r2
1a001dd6:	d909      	bls.n	1a001dec <__udivmoddi4+0x19c>
1a001dd8:	18fb      	adds	r3, r7, r3
1a001dda:	f106 3cff 	add.w	ip, r6, #4294967295
1a001dde:	f080 808d 	bcs.w	1a001efc <__udivmoddi4+0x2ac>
1a001de2:	4299      	cmp	r1, r3
1a001de4:	f240 808a 	bls.w	1a001efc <__udivmoddi4+0x2ac>
1a001de8:	3e02      	subs	r6, #2
1a001dea:	443b      	add	r3, r7
1a001dec:	1a5b      	subs	r3, r3, r1
1a001dee:	b281      	uxth	r1, r0
1a001df0:	fbb3 f0fe 	udiv	r0, r3, lr
1a001df4:	fb0e 3310 	mls	r3, lr, r0, r3
1a001df8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001dfc:	fb00 f308 	mul.w	r3, r0, r8
1a001e00:	428b      	cmp	r3, r1
1a001e02:	d907      	bls.n	1a001e14 <__udivmoddi4+0x1c4>
1a001e04:	1879      	adds	r1, r7, r1
1a001e06:	f100 3cff 	add.w	ip, r0, #4294967295
1a001e0a:	d273      	bcs.n	1a001ef4 <__udivmoddi4+0x2a4>
1a001e0c:	428b      	cmp	r3, r1
1a001e0e:	d971      	bls.n	1a001ef4 <__udivmoddi4+0x2a4>
1a001e10:	3802      	subs	r0, #2
1a001e12:	4439      	add	r1, r7
1a001e14:	1acb      	subs	r3, r1, r3
1a001e16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a001e1a:	e778      	b.n	1a001d0e <__udivmoddi4+0xbe>
1a001e1c:	f1c6 0c20 	rsb	ip, r6, #32
1a001e20:	fa03 f406 	lsl.w	r4, r3, r6
1a001e24:	fa22 f30c 	lsr.w	r3, r2, ip
1a001e28:	431c      	orrs	r4, r3
1a001e2a:	fa20 f70c 	lsr.w	r7, r0, ip
1a001e2e:	fa01 f306 	lsl.w	r3, r1, r6
1a001e32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
1a001e36:	fa21 f10c 	lsr.w	r1, r1, ip
1a001e3a:	431f      	orrs	r7, r3
1a001e3c:	0c3b      	lsrs	r3, r7, #16
1a001e3e:	fbb1 f9fe 	udiv	r9, r1, lr
1a001e42:	fa1f f884 	uxth.w	r8, r4
1a001e46:	fb0e 1119 	mls	r1, lr, r9, r1
1a001e4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001e4e:	fb09 fa08 	mul.w	sl, r9, r8
1a001e52:	458a      	cmp	sl, r1
1a001e54:	fa02 f206 	lsl.w	r2, r2, r6
1a001e58:	fa00 f306 	lsl.w	r3, r0, r6
1a001e5c:	d908      	bls.n	1a001e70 <__udivmoddi4+0x220>
1a001e5e:	1861      	adds	r1, r4, r1
1a001e60:	f109 30ff 	add.w	r0, r9, #4294967295
1a001e64:	d248      	bcs.n	1a001ef8 <__udivmoddi4+0x2a8>
1a001e66:	458a      	cmp	sl, r1
1a001e68:	d946      	bls.n	1a001ef8 <__udivmoddi4+0x2a8>
1a001e6a:	f1a9 0902 	sub.w	r9, r9, #2
1a001e6e:	4421      	add	r1, r4
1a001e70:	eba1 010a 	sub.w	r1, r1, sl
1a001e74:	b2bf      	uxth	r7, r7
1a001e76:	fbb1 f0fe 	udiv	r0, r1, lr
1a001e7a:	fb0e 1110 	mls	r1, lr, r0, r1
1a001e7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
1a001e82:	fb00 f808 	mul.w	r8, r0, r8
1a001e86:	45b8      	cmp	r8, r7
1a001e88:	d907      	bls.n	1a001e9a <__udivmoddi4+0x24a>
1a001e8a:	19e7      	adds	r7, r4, r7
1a001e8c:	f100 31ff 	add.w	r1, r0, #4294967295
1a001e90:	d22e      	bcs.n	1a001ef0 <__udivmoddi4+0x2a0>
1a001e92:	45b8      	cmp	r8, r7
1a001e94:	d92c      	bls.n	1a001ef0 <__udivmoddi4+0x2a0>
1a001e96:	3802      	subs	r0, #2
1a001e98:	4427      	add	r7, r4
1a001e9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001e9e:	eba7 0708 	sub.w	r7, r7, r8
1a001ea2:	fba0 8902 	umull	r8, r9, r0, r2
1a001ea6:	454f      	cmp	r7, r9
1a001ea8:	46c6      	mov	lr, r8
1a001eaa:	4649      	mov	r1, r9
1a001eac:	d31a      	bcc.n	1a001ee4 <__udivmoddi4+0x294>
1a001eae:	d017      	beq.n	1a001ee0 <__udivmoddi4+0x290>
1a001eb0:	b15d      	cbz	r5, 1a001eca <__udivmoddi4+0x27a>
1a001eb2:	ebb3 020e 	subs.w	r2, r3, lr
1a001eb6:	eb67 0701 	sbc.w	r7, r7, r1
1a001eba:	fa07 fc0c 	lsl.w	ip, r7, ip
1a001ebe:	40f2      	lsrs	r2, r6
1a001ec0:	ea4c 0202 	orr.w	r2, ip, r2
1a001ec4:	40f7      	lsrs	r7, r6
1a001ec6:	e9c5 2700 	strd	r2, r7, [r5]
1a001eca:	2600      	movs	r6, #0
1a001ecc:	4631      	mov	r1, r6
1a001ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ed2:	462e      	mov	r6, r5
1a001ed4:	4628      	mov	r0, r5
1a001ed6:	e70b      	b.n	1a001cf0 <__udivmoddi4+0xa0>
1a001ed8:	4606      	mov	r6, r0
1a001eda:	e6e9      	b.n	1a001cb0 <__udivmoddi4+0x60>
1a001edc:	4618      	mov	r0, r3
1a001ede:	e6fd      	b.n	1a001cdc <__udivmoddi4+0x8c>
1a001ee0:	4543      	cmp	r3, r8
1a001ee2:	d2e5      	bcs.n	1a001eb0 <__udivmoddi4+0x260>
1a001ee4:	ebb8 0e02 	subs.w	lr, r8, r2
1a001ee8:	eb69 0104 	sbc.w	r1, r9, r4
1a001eec:	3801      	subs	r0, #1
1a001eee:	e7df      	b.n	1a001eb0 <__udivmoddi4+0x260>
1a001ef0:	4608      	mov	r0, r1
1a001ef2:	e7d2      	b.n	1a001e9a <__udivmoddi4+0x24a>
1a001ef4:	4660      	mov	r0, ip
1a001ef6:	e78d      	b.n	1a001e14 <__udivmoddi4+0x1c4>
1a001ef8:	4681      	mov	r9, r0
1a001efa:	e7b9      	b.n	1a001e70 <__udivmoddi4+0x220>
1a001efc:	4666      	mov	r6, ip
1a001efe:	e775      	b.n	1a001dec <__udivmoddi4+0x19c>
1a001f00:	4630      	mov	r0, r6
1a001f02:	e74a      	b.n	1a001d9a <__udivmoddi4+0x14a>
1a001f04:	f1ac 0c02 	sub.w	ip, ip, #2
1a001f08:	4439      	add	r1, r7
1a001f0a:	e713      	b.n	1a001d34 <__udivmoddi4+0xe4>
1a001f0c:	3802      	subs	r0, #2
1a001f0e:	443c      	add	r4, r7
1a001f10:	e724      	b.n	1a001d5c <__udivmoddi4+0x10c>
1a001f12:	bf00      	nop

1a001f14 <__aeabi_idiv0>:
1a001f14:	4770      	bx	lr
1a001f16:	bf00      	nop

1a001f18 <__libc_init_array>:
1a001f18:	b570      	push	{r4, r5, r6, lr}
1a001f1a:	4d0d      	ldr	r5, [pc, #52]	; (1a001f50 <__libc_init_array+0x38>)
1a001f1c:	4c0d      	ldr	r4, [pc, #52]	; (1a001f54 <__libc_init_array+0x3c>)
1a001f1e:	1b64      	subs	r4, r4, r5
1a001f20:	10a4      	asrs	r4, r4, #2
1a001f22:	2600      	movs	r6, #0
1a001f24:	42a6      	cmp	r6, r4
1a001f26:	d109      	bne.n	1a001f3c <__libc_init_array+0x24>
1a001f28:	4d0b      	ldr	r5, [pc, #44]	; (1a001f58 <__libc_init_array+0x40>)
1a001f2a:	4c0c      	ldr	r4, [pc, #48]	; (1a001f5c <__libc_init_array+0x44>)
1a001f2c:	f7ff fb57 	bl	1a0015de <_init>
1a001f30:	1b64      	subs	r4, r4, r5
1a001f32:	10a4      	asrs	r4, r4, #2
1a001f34:	2600      	movs	r6, #0
1a001f36:	42a6      	cmp	r6, r4
1a001f38:	d105      	bne.n	1a001f46 <__libc_init_array+0x2e>
1a001f3a:	bd70      	pop	{r4, r5, r6, pc}
1a001f3c:	f855 3b04 	ldr.w	r3, [r5], #4
1a001f40:	4798      	blx	r3
1a001f42:	3601      	adds	r6, #1
1a001f44:	e7ee      	b.n	1a001f24 <__libc_init_array+0xc>
1a001f46:	f855 3b04 	ldr.w	r3, [r5], #4
1a001f4a:	4798      	blx	r3
1a001f4c:	3601      	adds	r6, #1
1a001f4e:	e7f2      	b.n	1a001f36 <__libc_init_array+0x1e>
1a001f50:	1a0021cc 	.word	0x1a0021cc
1a001f54:	1a0021cc 	.word	0x1a0021cc
1a001f58:	1a0021cc 	.word	0x1a0021cc
1a001f5c:	1a0021cc 	.word	0x1a0021cc

1a001f60 <memset>:
1a001f60:	4402      	add	r2, r0
1a001f62:	4603      	mov	r3, r0
1a001f64:	4293      	cmp	r3, r2
1a001f66:	d100      	bne.n	1a001f6a <memset+0xa>
1a001f68:	4770      	bx	lr
1a001f6a:	f803 1b01 	strb.w	r1, [r3], #1
1a001f6e:	e7f9      	b.n	1a001f64 <memset+0x4>

1a001f70 <InitClkStates>:
1a001f70:	0f01 0101                                   ....

1a001f74 <pinmuxing>:
1a001f74:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001f84:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001f94:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001fa4:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001fb4:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001fc4:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001fd4:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001fe4:	0206 0057                                   ..W.

1a001fe8 <ExtRateIn>:
1a001fe8:	0000 0000                                   ....

1a001fec <GpioButtons>:
1a001fec:	0400 0800 0900 0901                         ........

1a001ff4 <GpioLeds>:
1a001ff4:	0005 0105 0205 0e00 0b01 0c01               ............

1a002000 <GpioPorts>:
1a002000:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a002010:	0802 ffff                                   ....

1a002014 <OscRateIn>:
1a002014:	1b00 00b7 0f03 0f0f 00ff ffff               ............

1a002020 <periph_to_base>:
1a002020:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002030:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a002040:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a002050:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a002060:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a002070:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a002080:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a00208c <UART_BClock>:
1a00208c:	01c2 01a2 0182 0162                         ......b.

1a002094 <UART_PClock>:
1a002094:	0081 0082 00a1 00a2                         ........

1a00209c <InitClkStates>:
1a00209c:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0020ac:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0020bc:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0020cc:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0020dc:	111a 0001 111b 0001                         ........

1a0020e4 <gpioPinsInit>:
1a0020e4:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a0020f4:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a002104:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a002114:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a002124:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a002134:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a002144:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a002154:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a002164:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a002174:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a002184:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a002194:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a0021a4:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a0021b4:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a0021c4:	020b 000c 0c01 ffff                         ........
