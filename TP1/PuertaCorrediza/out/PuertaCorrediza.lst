
projects/PuertaCorrediza/out/PuertaCorrediza.elf:     file format elf32-littlearm
projects/PuertaCorrediza/out/PuertaCorrediza.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001631

Program Header:
0x70000001 off    0x000122a4 vaddr 0x1a0022a4 paddr 0x1a0022a4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x0000007c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000022ac memsz 0x000022ac flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0022ac align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022a4  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a0022ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          0000007c  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0022a4  1a0022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 17 .noinit       00000000  100000c4  100000c4  00020048  2**2
                  CONTENTS
 18 .debug_info   0001abf6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003b1e  00000000  00000000  0003ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00008473  00000000  00000000  0003e75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000b38  00000000  00000000  00046bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000c00  00000000  00000000  00047707  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00009aef  00000000  00000000  00048307  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000f613  00000000  00000000  00051df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00027ef1  00000000  00000000  00061409  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000079  00000000  00000000  000892fa  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  00089373  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001c34  00000000  00000000  000893a8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0022a4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000c4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 PuertaCorrediza.c
1a000300 l     F .text	0000001c clearInEvents
1a00031c l     F .text	0000000a enact_TECX_OPRIMIDO
1a000326 l     F .text	0000000a enseq_TECX_NO_OPRIMIDO_default
1a000330 l     F .text	00000012 enseq_TECX_OPRIMIDO_default
1a000342 l     F .text	0000000a enseq_TECX_VALIDACION_default
1a00034c l     F .text	0000000a enseq_main_region_ESPERA_default
1a000356 l     F .text	00000008 exseq_TECX_NO_OPRIMIDO
1a00035e l     F .text	00000008 exseq_TECX_OPRIMIDO
1a000366 l     F .text	00000008 exseq_TECX_VALIDACION
1a00036e l     F .text	0000000a exseq_main_region_ESPERA
1a000378 l     F .text	0000000a exseq_PUERTAcORREDIZA_CERRADO
1a000382 l     F .text	0000000a exseq_PUERTAcORREDIZA_CERRANDO
1a00038c l     F .text	0000000a exseq_PUERTAcORREDIZA_ABRIENDO
1a000396 l     F .text	0000000a exseq_PUERTAcORREDIZA_ABIERTO
1a0003a0 l     F .text	0000000a exseq_LED3_REPOSO
1a0003aa l     F .text	00000008 react_TECX__entry_Default
1a0003b2 l     F .text	00000008 enseq_TECX_default
1a0003ba l     F .text	00000008 react_main_region__entry_Default
1a0003c2 l     F .text	00000008 enseq_main_region_default
1a0003ca l     F .text	00000004 react
1a0003ce l     F .text	00000026 TECX_OPRIMIDO_react
1a0003f4 l     F .text	00000038 TECX_VALIDACION_react
1a00042c l     F .text	0000007a main_region_ESPERA_react
1a0004a6 l     F .text	0000000c enact_PUERTAcORREDIZA_ABRIENDO
1a0004b2 l     F .text	00000012 enseq_PUERTAcORREDIZA_ABRIENDO_default
1a0004c4 l     F .text	00000022 PUERTAcORREDIZA_CERRADO_react
1a0004e6 l     F .text	0000000c enact_PUERTAcORREDIZA_CERRANDO
1a0004f2 l     F .text	00000012 enseq_PUERTAcORREDIZA_CERRANDO_default
1a000504 l     F .text	00000022 PUERTAcORREDIZA_ABIERTO_react
1a000526 l     F .text	00000022 enact_PUERTAcORREDIZA_CERRADO
1a000548 l     F .text	00000012 enseq_PUERTAcORREDIZA_CERRADO_default
1a00055a l     F .text	00000008 react_PUERTAcORREDIZA__entry_Default
1a000562 l     F .text	00000008 enseq_PUERTAcORREDIZA_default
1a00056a l     F .text	00000036 PUERTAcORREDIZA_CERRANDO_react
1a0005a0 l     F .text	0000000c enact_LED3_REPOSO
1a0005ac l     F .text	00000012 enseq_LED3_REPOSO_default
1a0005be l     F .text	00000008 react_LED3__entry_Default
1a0005c6 l     F .text	00000008 enseq_LED3_default
1a0005ce l     F .text	00000022 enact_PUERTAcORREDIZA_ABIERTO
1a0005f0 l     F .text	00000012 enseq_PUERTAcORREDIZA_ABIERTO_default
1a000602 l     F .text	00000032 PUERTAcORREDIZA_ABRIENDO_react
1a000634 l     F .text	0000000c exact_TECX_DEBOUNCE
1a000640 l     F .text	0000000e exseq_TECX_DEBOUNCE
1a00064e l     F .text	00000026 TECX_DEBOUNCE_react
1a000674 l     F .text	0000000c exact_LED3_TITILA_r1_APAGADO
1a000680 l     F .text	00000010 exseq_LED3_TITILA_r1_APAGADO
1a000690 l     F .text	0000000c exact_LED3_TITILA_r1_ENCENDIDO
1a00069c l     F .text	00000010 exseq_LED3_TITILA_r1_ENCENDIDO
1a0006ac l     F .text	0000001a exseq_LED3_TITILA_r1
1a0006c6 l     F .text	00000008 exseq_LED3_TITILA
1a0006ce l     F .text	0000001e LED3_TITILA_react
1a0006ec l     F .text	00000010 enact_TECX_DEBOUNCE
1a0006fc l     F .text	00000012 enseq_TECX_DEBOUNCE_default
1a00070e l     F .text	00000026 TECX_NO_OPRIMIDO_react
1a000734 l     F .text	0000001c enact_LED3_TITILA_r1_APAGADO
1a000750 l     F .text	00000012 enseq_LED3_TITILA_r1_APAGADO_default
1a000762 l     F .text	0000002a LED3_TITILA_r1_ENCENDIDO_react
1a00078c l     F .text	00000008 react_LED3_TITILA_r1__entry_Default
1a000794 l     F .text	00000008 enseq_LED3_TITILA_r1_default
1a00079c l     F .text	00000008 enseq_LED3_TITILA_default
1a0007a4 l     F .text	0000001e LED3_REPOSO_react
1a0007c2 l     F .text	0000001e enact_LED3_TITILA_r1_ENCENDIDO
1a0007e0 l     F .text	00000012 enseq_LED3_TITILA_r1_ENCENDIDO_default
1a0007f2 l     F .text	0000002a LED3_TITILA_r1_APAGADO_react
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002048 l     O .text	00000004 InitClkStates
1a00204c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000a00 l     F .text	00000044 Board_LED_Init
1a000a44 l     F .text	00000040 Board_TEC_Init
1a000a84 l     F .text	00000040 Board_GPIO_Init
1a000ac4 l     F .text	00000030 Board_ADC_Init
1a000af4 l     F .text	00000038 Board_SPI_Init
1a000b2c l     F .text	00000024 Board_I2C_Init
1a0020c4 l     O .text	00000008 GpioButtons
1a0020cc l     O .text	0000000c GpioLeds
1a0020d8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000bbc l     F .text	000000a0 pll_calc_divs
1a000c5c l     F .text	0000010c pll_get_frac
1a000d68 l     F .text	00000048 Chip_Clock_FindBaseClock
1a000fd4 l     F .text	00000022 Chip_Clock_GetDivRate
10000048 l     O .bss	00000008 audio_usb_pll_freq
1a0020f8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001140 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001154 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0011f4 l     F .text	0000002c Chip_UART_GetIndex
1a002164 l     O .text	00000008 UART_BClock
1a00216c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0013d4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0013e8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002174 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0016d8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
10000050 l     O .bss	00000004 callBackFuncParams
10000058 l     O .bss	00000008 tickCounter
10000060 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000064 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 main.c
1000006c l     O .bss	00000020 statechart
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a0022a4 l       .bss_RAM5	00000000 __init_array_end
1a0022a4 l       .bss_RAM5	00000000 __preinit_array_end
1a0022a4 l       .bss_RAM5	00000000 __init_array_start
1a0022a4 l       .bss_RAM5	00000000 __preinit_array_start
1a000dfc g     F .text	0000001c Chip_Clock_GetDividerSource
10000068 g     O .bss	00000001 SysTick_Time_Flag
1a000178  w    F .text	00000002 TIMER2_IRQHandler
1a000186  w    F .text	00000002 DebugMon_Handler
1a000178  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000178  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000178  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000178  w    F .text	00000002 I2C0_IRQHandler
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00148e g     F .text	0000000c Chip_ADC_SetResolution
1a001a00 g     F .text	0000002c SysTick_Handler
1a001ad8 g     F .text	0000001c puertaCorrediza_setTimer
1a00162c  w    F .text	00000002 initialise_monitor_handles
1a000178  w    F .text	00000002 SDIO_IRQHandler
1a000178  w    F .text	00000002 ATIMER_IRQHandler
1a000188  w    F .text	00000002 PendSV_Handler
1a00017a  w    F .text	00000002 NMI_Handler
1a0022ac g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000178  w    F .text	00000002 I2C1_IRQHandler
1a000178  w    F .text	00000002 UART1_IRQHandler
1a000178  w    F .text	00000002 GPIO5_IRQHandler
1a000178  w    F .text	00000002 CAN1_IRQHandler
53ff6254 g       *ABS*	00000000 __valid_user_code_checksum
1a0022ac g       .ARM.exidx	00000000 _etext
1a000178  w    F .text	00000002 USB1_IRQHandler
1a000178  w    F .text	00000002 I2S0_IRQHandler
1a00083c g     F .text	0000001c puertaCorrediza_enter
1a001cb4 g     F .text	00000044 UpdateTimers
1a000178  w    F .text	00000002 TIMER3_IRQHandler
1a001078 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a001c66 g     F .text	00000028 IsPendEvent
1a000178  w    F .text	00000002 SGPIO_IRQHandler
1a001c8e g     F .text	00000026 MarkAsAttEvent
1a00081c g     F .text	00000020 puertaCorrediza_init
1a001cf8 g     F .text	00000000 .hidden __aeabi_uldivmod
100000c4 g       .noinit	00000000 _noinit
1000008c g     O .bss	00000004 SystemCoreClock
1a001220 g     F .text	00000054 Chip_UART_Init
1a000178  w    F .text	00000002 ADC0_IRQHandler
1a000182  w    F .text	00000002 UsageFault_Handler
1a001abc g     F .text	0000000c myTickHook
1a0010f4 g     F .text	0000004c Chip_Clock_GetRate
1a000178  w    F .text	00000002 GPIO6_IRQHandler
1a000988 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001d28 g     F .text	000002c2 .hidden __udivmoddi4
1a0020c0 g     O .text	00000004 ExtRateIn
1a000178  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000178  w    F .text	00000002 GPIO1_IRQHandler
1a000178  w    F .text	00000002 SSP0_IRQHandler
1a000948 g     F .text	00000008 puertaCorredizaIface_raise_evTECXOprimido
1a0022a4 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001ff0 g     F .text	00000048 __libc_init_array
1a000178  w    F .text	00000002 ADC1_IRQHandler
1a000b74 g     F .text	00000030 Board_Init
1a0016ba  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000178  w    F .text	00000002 RTC_IRQHandler
100000c4 g       .bss	00000000 _ebss
1a000178  w    F .text	00000002 TIMER0_IRQHandler
1a001630 g     F .text	00000088 Reset_Handler
1a001984 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000178  w    F .text	00000002 SPI_IRQHandler
1a001398 g     F .text	0000003c Chip_I2C_SetClockRate
1a000178  w    F .text	00000002 LCD_IRQHandler
1a000db0 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a000942 g     F .text	00000006 puertaCorredizaIface_raise_evTECXNoOprimido
1a000178  w    F .text	00000002 TIMER1_IRQHandler
1a001370 g     F .text	00000028 Chip_I2C_Init
1a001bfc g     F .text	00000034 SetNewTimerTick
1a000178  w    F .text	00000002 UART2_IRQHandler
1a000f6c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0021bc g     O .text	000000e6 gpioPinsInit
1a00116c g     F .text	00000012 Chip_SSP_SetClockRate
1a000178  w    F .text	00000002 GPIO2_IRQHandler
1a001050 g     F .text	00000028 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a00145c g     F .text	00000032 Chip_ADC_SetSampleRate
1a000178  w    F .text	00000002 I2S1_IRQHandler
1a00117e g     F .text	0000003e Chip_SSP_SetBitRate
1a000ba4 g     F .text	00000002 Chip_GPIO_Init
1a0020ec g     O .text	00000004 OscRateIn
100000c4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000178  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a00170c g     F .text	00000194 gpioInit
1a001fec  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001a2c g     F .text	0000001c USB0_IRQHandler
1a000178  w    F .text	00000002 GPIO3_IRQHandler
1a000178  w    F .text	00000002 SCT_IRQHandler
1a000e18 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002038 g     F .text	00000010 memset
1a00017e  w    F .text	00000002 MemManage_Handler
1a001b34 g     F .text	000000a4 main
1a000178  w    F .text	00000002 WDT_IRQHandler
1a001c30 g     F .text	00000036 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000184  w    F .text	00000002 SVC_Handler
1a000178  w    F .text	00000002 GPIO7_IRQHandler
1a001084 g     F .text	0000003c Chip_Clock_EnableOpts
1a000e34 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000eec g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0015f4 g     F .text	00000038 SystemInit
1a000178  w    F .text	00000002 SPIFI_IRQHandler
1a000178  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0018a0 g     F .text	00000056 gpioWrite
1a0016b8  w    F .text	00000002 _fini
1a00141c g     F .text	00000040 Chip_ADC_Init
10000090 g     O .bss	00000004 g_pUsbApi
1a000950 g     F .text	00000038 Board_SetupMuxing
1a001b08 g     F .text	0000002a Buttons_GetStatus_
1a001274 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001b32 g     F .text	00000002 puertaCorredizaIface_opMotor
10000040 g     O .data	00000008 tickRateMS
1a001af4 g     F .text	00000014 puertaCorrediza_unsetTimer
1a000178  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000094 g     O .bss	00000030 ticks
1a000178  w    F .text	00000002 CAN0_IRQHandler
1a001bd8 g     F .text	00000024 InitTimerTicks
10000000 g       .data	00000000 _data
1a00194c g     F .text	00000020 tickCallbackSet
1a000178 g       .text	00000000 __section_table_end
1a0011bc g     F .text	00000038 Chip_SSP_Init
1a000178  w    F .text	00000002 GINT0_IRQHandler
1a000178  w    F .text	00000002 DAC_IRQHandler
1a000b50 g     F .text	00000024 Board_Debug_Init
1a001ac8 g     F .text	00000010 puertaCorredizaIface_opLED
10000048 g       .data	00000000 _edata
1a001350 g     F .text	00000020 Chip_I2C_EventHandler
1a000178  w    F .text	00000002 M0SUB_IRQHandler
1a00149c g     F .text	00000158 Chip_SetupCoreClock
1a000178  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000ba8 g     F .text	00000014 SystemCoreClockUpdate
1a000178  w    F .text	00000002 DMA_IRQHandler
1a000178  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001fec  w    F .text	00000002 .hidden __aeabi_idiv0
1a000180  w    F .text	00000002 BusFault_Handler
1a0010c0 g     F .text	00000034 Chip_Clock_Enable
1a000178  w    F .text	00000002 UART3_IRQHandler
1a000178  w    F .text	00000002 MCPWM_IRQHandler
1a000178  w    F .text	00000002 M0APP_IRQHandler
1a0018f6 g     F .text	00000054 gpioRead
1a001a48 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a000178  w    F .text	00000002 GINT1_IRQHandler
1a000930 g     F .text	00000012 puertaCorrediza_raiseTimeEvent
1a000858 g     F .text	000000d6 puertaCorrediza_runCycle
1a00196c g     F .text	00000018 tickPowerSet
1a000ff8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0016bc g     F .text	0000001c cyclesCounterInit
1a000178  w    F .text	00000002 GPIO4_IRQHandler
1a0009f4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 31 16 00 1a 7b 01 00 1a 7d 01 00 1a     ....1...{...}...
1a000010:	7f 01 00 1a 81 01 00 1a 83 01 00 1a 54 62 ff 53     ............Tb.S
	...
1a00002c:	85 01 00 1a 87 01 00 1a 00 00 00 00 89 01 00 1a     ................
1a00003c:	01 1a 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	79 01 00 1a 79 01 00 1a 79 01 00 1a 00 00 00 00     y...y...y.......
1a000050:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000060:	2d 1a 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     -...y...y...y...
1a000070:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000080:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a000090:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000a0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000b0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000c0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000d0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000e0:	79 01 00 1a 79 01 00 1a 79 01 00 1a 79 01 00 1a     y...y...y...y...
1a0000f0:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000100:	00 00 00 00 79 01 00 1a 79 01 00 1a 79 01 00 1a     ....y...y...y...
1a000110:	79 01 00 1a                                         y...

1a000114 <__data_section_table>:
1a000114:	1a0022ac 	.word	0x1a0022ac
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a0022ac 	.word	0x1a0022ac
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0022ac 	.word	0x1a0022ac
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0022ac 	.word	0x1a0022ac
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0022ac 	.word	0x1a0022ac
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	0000007c 	.word	0x0000007c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <ADC0_IRQHandler>:
1a000178:	e7fe      	b.n	1a000178 <ADC0_IRQHandler>

1a00017a <NMI_Handler>:

}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <NMI_Handler>

1a00017c <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>

1a00017e <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <MemManage_Handler>

1a000180 <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <BusFault_Handler>

1a000182 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler>

1a000184 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <SVC_Handler>

1a000186 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler>

1a000188 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a00018a:	e7fe      	b.n	1a00018a <PendSV_Handler+0x2>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <clearInEvents>:
	return result;
}

static void clearInEvents(PuertaCorrediza* handle)
{
	handle->iface.evPresencia_raised = bool_false;
1a000300:	2300      	movs	r3, #0
1a000302:	7203      	strb	r3, [r0, #8]
	handle->iface.evNoPresencia_raised = bool_false;
1a000304:	7243      	strb	r3, [r0, #9]
	handle->iface.evAbrio_raised = bool_false;
1a000306:	7283      	strb	r3, [r0, #10]
	handle->iface.evCerro_raised = bool_false;
1a000308:	72c3      	strb	r3, [r0, #11]
	handle->iface.evTECXNoOprimido_raised = bool_false;
1a00030a:	7303      	strb	r3, [r0, #12]
	handle->iface.evTECXOprimido_raised = bool_false;
1a00030c:	7343      	strb	r3, [r0, #13]
	handle->internal.evSiTitilar_raised = bool_false;
1a00030e:	7503      	strb	r3, [r0, #20]
	handle->internal.evNoTitilar_raised = bool_false;
1a000310:	7543      	strb	r3, [r0, #21]
	handle->internal.siTECXOK_raised = bool_false;
1a000312:	7583      	strb	r3, [r0, #22]
	handle->timeEvents.puertaCorrediza_TECX_DEBOUNCE_tev0_raised = bool_false;
1a000314:	7703      	strb	r3, [r0, #28]
	handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_ENCENDIDO_tev0_raised = bool_false;
1a000316:	7743      	strb	r3, [r0, #29]
	handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_APAGADO_tev0_raised = bool_false;
1a000318:	7783      	strb	r3, [r0, #30]
}
1a00031a:	4770      	bx	lr

1a00031c <enact_TECX_OPRIMIDO>:

/* Entry action for state 'OPRIMIDO'. */
static void enact_TECX_OPRIMIDO(PuertaCorrediza* handle)
{
	/* Entry action for state 'OPRIMIDO'. */
	handle->internal.siTECXOK_raised = bool_true;
1a00031c:	2301      	movs	r3, #1
1a00031e:	7583      	strb	r3, [r0, #22]
	handle->internal.viTecla = handle->iface.evTECXOprimido_value;
1a000320:	6903      	ldr	r3, [r0, #16]
1a000322:	6183      	str	r3, [r0, #24]
}
1a000324:	4770      	bx	lr

1a000326 <enseq_TECX_NO_OPRIMIDO_default>:

/* 'default' enter sequence for state NO_OPRIMIDO */
static void enseq_TECX_NO_OPRIMIDO_default(PuertaCorrediza* handle)
{
	/* 'default' enter sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = PuertaCorrediza_TECX_NO_OPRIMIDO;
1a000326:	2302      	movs	r3, #2
1a000328:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00032a:	2300      	movs	r3, #0
1a00032c:	6043      	str	r3, [r0, #4]
}
1a00032e:	4770      	bx	lr

1a000330 <enseq_TECX_OPRIMIDO_default>:

/* 'default' enter sequence for state OPRIMIDO */
static void enseq_TECX_OPRIMIDO_default(PuertaCorrediza* handle)
{
1a000330:	b510      	push	{r4, lr}
1a000332:	4604      	mov	r4, r0
	/* 'default' enter sequence for state OPRIMIDO */
	enact_TECX_OPRIMIDO(handle);
1a000334:	f7ff fff2 	bl	1a00031c <enact_TECX_OPRIMIDO>
	handle->stateConfVector[0] = PuertaCorrediza_TECX_OPRIMIDO;
1a000338:	2303      	movs	r3, #3
1a00033a:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00033c:	2300      	movs	r3, #0
1a00033e:	6063      	str	r3, [r4, #4]
}
1a000340:	bd10      	pop	{r4, pc}

1a000342 <enseq_TECX_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_TECX_VALIDACION_default(PuertaCorrediza* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[0] = PuertaCorrediza_TECX_VALIDACION;
1a000342:	2304      	movs	r3, #4
1a000344:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000346:	2300      	movs	r3, #0
1a000348:	6043      	str	r3, [r0, #4]
}
1a00034a:	4770      	bx	lr

1a00034c <enseq_main_region_ESPERA_default>:

/* 'default' enter sequence for state ESPERA */
static void enseq_main_region_ESPERA_default(PuertaCorrediza* handle)
{
	/* 'default' enter sequence for state ESPERA */
	handle->stateConfVector[1] = PuertaCorrediza_main_region_ESPERA;
1a00034c:	2305      	movs	r3, #5
1a00034e:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000350:	2301      	movs	r3, #1
1a000352:	6043      	str	r3, [r0, #4]
}
1a000354:	4770      	bx	lr

1a000356 <exseq_TECX_NO_OPRIMIDO>:

/* Default exit sequence for state NO_OPRIMIDO */
static void exseq_TECX_NO_OPRIMIDO(PuertaCorrediza* handle)
{
	/* Default exit sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = PuertaCorrediza_last_state;
1a000356:	2300      	movs	r3, #0
1a000358:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00035a:	6043      	str	r3, [r0, #4]
}
1a00035c:	4770      	bx	lr

1a00035e <exseq_TECX_OPRIMIDO>:

/* Default exit sequence for state OPRIMIDO */
static void exseq_TECX_OPRIMIDO(PuertaCorrediza* handle)
{
	/* Default exit sequence for state OPRIMIDO */
	handle->stateConfVector[0] = PuertaCorrediza_last_state;
1a00035e:	2300      	movs	r3, #0
1a000360:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000362:	6043      	str	r3, [r0, #4]
}
1a000364:	4770      	bx	lr

1a000366 <exseq_TECX_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_TECX_VALIDACION(PuertaCorrediza* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[0] = PuertaCorrediza_last_state;
1a000366:	2300      	movs	r3, #0
1a000368:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00036a:	6043      	str	r3, [r0, #4]
}
1a00036c:	4770      	bx	lr

1a00036e <exseq_main_region_ESPERA>:

/* Default exit sequence for state ESPERA */
static void exseq_main_region_ESPERA(PuertaCorrediza* handle)
{
	/* Default exit sequence for state ESPERA */
	handle->stateConfVector[1] = PuertaCorrediza_last_state;
1a00036e:	2300      	movs	r3, #0
1a000370:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a000372:	2301      	movs	r3, #1
1a000374:	6043      	str	r3, [r0, #4]
}
1a000376:	4770      	bx	lr

1a000378 <exseq_PUERTAcORREDIZA_CERRADO>:

/* Default exit sequence for state CERRADO */
static void exseq_PUERTAcORREDIZA_CERRADO(PuertaCorrediza* handle)
{
	/* Default exit sequence for state CERRADO */
	handle->stateConfVector[2] = PuertaCorrediza_last_state;
1a000378:	2300      	movs	r3, #0
1a00037a:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a00037c:	2302      	movs	r3, #2
1a00037e:	6043      	str	r3, [r0, #4]
}
1a000380:	4770      	bx	lr

1a000382 <exseq_PUERTAcORREDIZA_CERRANDO>:

/* Default exit sequence for state CERRANDO */
static void exseq_PUERTAcORREDIZA_CERRANDO(PuertaCorrediza* handle)
{
	/* Default exit sequence for state CERRANDO */
	handle->stateConfVector[2] = PuertaCorrediza_last_state;
1a000382:	2300      	movs	r3, #0
1a000384:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000386:	2302      	movs	r3, #2
1a000388:	6043      	str	r3, [r0, #4]
}
1a00038a:	4770      	bx	lr

1a00038c <exseq_PUERTAcORREDIZA_ABRIENDO>:

/* Default exit sequence for state ABRIENDO */
static void exseq_PUERTAcORREDIZA_ABRIENDO(PuertaCorrediza* handle)
{
	/* Default exit sequence for state ABRIENDO */
	handle->stateConfVector[2] = PuertaCorrediza_last_state;
1a00038c:	2300      	movs	r3, #0
1a00038e:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a000390:	2302      	movs	r3, #2
1a000392:	6043      	str	r3, [r0, #4]
}
1a000394:	4770      	bx	lr

1a000396 <exseq_PUERTAcORREDIZA_ABIERTO>:

/* Default exit sequence for state ABIERTO */
static void exseq_PUERTAcORREDIZA_ABIERTO(PuertaCorrediza* handle)
{
	/* Default exit sequence for state ABIERTO */
	handle->stateConfVector[2] = PuertaCorrediza_last_state;
1a000396:	2300      	movs	r3, #0
1a000398:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a00039a:	2302      	movs	r3, #2
1a00039c:	6043      	str	r3, [r0, #4]
}
1a00039e:	4770      	bx	lr

1a0003a0 <exseq_LED3_REPOSO>:

/* Default exit sequence for state REPOSO */
static void exseq_LED3_REPOSO(PuertaCorrediza* handle)
{
	/* Default exit sequence for state REPOSO */
	handle->stateConfVector[3] = PuertaCorrediza_last_state;
1a0003a0:	2300      	movs	r3, #0
1a0003a2:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0003a4:	2303      	movs	r3, #3
1a0003a6:	6043      	str	r3, [r0, #4]
}
1a0003a8:	4770      	bx	lr

1a0003aa <react_TECX__entry_Default>:
	}
}

/* Default react sequence for initial entry  */
static void react_TECX__entry_Default(PuertaCorrediza* handle)
{
1a0003aa:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a0003ac:	f7ff ffbb 	bl	1a000326 <enseq_TECX_NO_OPRIMIDO_default>
}
1a0003b0:	bd08      	pop	{r3, pc}

1a0003b2 <enseq_TECX_default>:
{
1a0003b2:	b508      	push	{r3, lr}
	react_TECX__entry_Default(handle);
1a0003b4:	f7ff fff9 	bl	1a0003aa <react_TECX__entry_Default>
}
1a0003b8:	bd08      	pop	{r3, pc}

1a0003ba <react_main_region__entry_Default>:

/* Default react sequence for initial entry  */
static void react_main_region__entry_Default(PuertaCorrediza* handle)
{
1a0003ba:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_main_region_ESPERA_default(handle);
1a0003bc:	f7ff ffc6 	bl	1a00034c <enseq_main_region_ESPERA_default>
}
1a0003c0:	bd08      	pop	{r3, pc}

1a0003c2 <enseq_main_region_default>:
{
1a0003c2:	b508      	push	{r3, lr}
	react_main_region__entry_Default(handle);
1a0003c4:	f7ff fff9 	bl	1a0003ba <react_main_region__entry_Default>
}
1a0003c8:	bd08      	pop	{r3, pc}

1a0003ca <react>:

static sc_boolean react(PuertaCorrediza* handle) {
	/* State machine reactions. */
	SC_UNUSED(handle);
	return bool_false;
}
1a0003ca:	2000      	movs	r0, #0
1a0003cc:	4770      	bx	lr

1a0003ce <TECX_OPRIMIDO_react>:
			}
		} 
	} return did_transition;
}

static sc_boolean TECX_OPRIMIDO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a0003ce:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state OPRIMIDO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0003d0:	460d      	mov	r5, r1
1a0003d2:	b131      	cbz	r1, 1a0003e2 <TECX_OPRIMIDO_react+0x14>
1a0003d4:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
1a0003d6:	f7ff fff8 	bl	1a0003ca <react>
1a0003da:	b910      	cbnz	r0, 1a0003e2 <TECX_OPRIMIDO_react+0x14>
		{ 
			if (handle->iface.evTECXNoOprimido_raised == bool_true)
1a0003dc:	7b23      	ldrb	r3, [r4, #12]
1a0003de:	b913      	cbnz	r3, 1a0003e6 <TECX_OPRIMIDO_react+0x18>
			{ 
				exseq_TECX_OPRIMIDO(handle);
				enseq_TECX_NO_OPRIMIDO_default(handle);
			}  else
			{
				did_transition = bool_false;
1a0003e0:	461d      	mov	r5, r3
			}
		} 
	} return did_transition;
}
1a0003e2:	4628      	mov	r0, r5
1a0003e4:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_OPRIMIDO(handle);
1a0003e6:	4620      	mov	r0, r4
1a0003e8:	f7ff ffb9 	bl	1a00035e <exseq_TECX_OPRIMIDO>
				enseq_TECX_NO_OPRIMIDO_default(handle);
1a0003ec:	4620      	mov	r0, r4
1a0003ee:	f7ff ff9a 	bl	1a000326 <enseq_TECX_NO_OPRIMIDO_default>
1a0003f2:	e7f6      	b.n	1a0003e2 <TECX_OPRIMIDO_react+0x14>

1a0003f4 <TECX_VALIDACION_react>:

static sc_boolean TECX_VALIDACION_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a0003f4:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state VALIDACION. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0003f6:	460d      	mov	r5, r1
1a0003f8:	b141      	cbz	r1, 1a00040c <TECX_VALIDACION_react+0x18>
1a0003fa:	4604      	mov	r4, r0
	{ 
		if ((react(handle)) == (bool_false))
1a0003fc:	f7ff ffe5 	bl	1a0003ca <react>
1a000400:	b920      	cbnz	r0, 1a00040c <TECX_VALIDACION_react+0x18>
		{ 
			if (handle->iface.evTECXOprimido_raised == bool_true)
1a000402:	7b63      	ldrb	r3, [r4, #13]
1a000404:	b923      	cbnz	r3, 1a000410 <TECX_VALIDACION_react+0x1c>
			{ 
				exseq_TECX_VALIDACION(handle);
				enseq_TECX_OPRIMIDO_default(handle);
			}  else
			{
				if (handle->iface.evTECXNoOprimido_raised == bool_true)
1a000406:	7b23      	ldrb	r3, [r4, #12]
1a000408:	b94b      	cbnz	r3, 1a00041e <TECX_VALIDACION_react+0x2a>
				{ 
					exseq_TECX_VALIDACION(handle);
					enseq_TECX_NO_OPRIMIDO_default(handle);
				}  else
				{
					did_transition = bool_false;
1a00040a:	461d      	mov	r5, r3
				}
			}
		} 
	} return did_transition;
}
1a00040c:	4628      	mov	r0, r5
1a00040e:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_VALIDACION(handle);
1a000410:	4620      	mov	r0, r4
1a000412:	f7ff ffa8 	bl	1a000366 <exseq_TECX_VALIDACION>
				enseq_TECX_OPRIMIDO_default(handle);
1a000416:	4620      	mov	r0, r4
1a000418:	f7ff ff8a 	bl	1a000330 <enseq_TECX_OPRIMIDO_default>
1a00041c:	e7f6      	b.n	1a00040c <TECX_VALIDACION_react+0x18>
					exseq_TECX_VALIDACION(handle);
1a00041e:	4620      	mov	r0, r4
1a000420:	f7ff ffa1 	bl	1a000366 <exseq_TECX_VALIDACION>
					enseq_TECX_NO_OPRIMIDO_default(handle);
1a000424:	4620      	mov	r0, r4
1a000426:	f7ff ff7e 	bl	1a000326 <enseq_TECX_NO_OPRIMIDO_default>
1a00042a:	e7ef      	b.n	1a00040c <TECX_VALIDACION_react+0x18>

1a00042c <main_region_ESPERA_react>:

static sc_boolean main_region_ESPERA_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a00042c:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state ESPERA. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a00042e:	460d      	mov	r5, r1
1a000430:	b3b9      	cbz	r1, 1a0004a2 <main_region_ESPERA_react+0x76>
1a000432:	4604      	mov	r4, r0
	{ 
		if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PUERTACORREDIZA_PUERTACORREDIZAIFACE_TEC4)) == bool_true))
1a000434:	7d83      	ldrb	r3, [r0, #22]
1a000436:	b113      	cbz	r3, 1a00043e <main_region_ESPERA_react+0x12>
1a000438:	6982      	ldr	r2, [r0, #24]
1a00043a:	2a08      	cmp	r2, #8
1a00043c:	d00d      	beq.n	1a00045a <main_region_ESPERA_react+0x2e>
			exseq_main_region_ESPERA(handle);
			handle->iface.evCerro_raised = bool_true;
			enseq_main_region_ESPERA_default(handle);
		}  else
		{
			if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PUERTACORREDIZA_PUERTACORREDIZAIFACE_TEC3)) == bool_true))
1a00043e:	b113      	cbz	r3, 1a000446 <main_region_ESPERA_react+0x1a>
1a000440:	69a2      	ldr	r2, [r4, #24]
1a000442:	2a04      	cmp	r2, #4
1a000444:	d011      	beq.n	1a00046a <main_region_ESPERA_react+0x3e>
				exseq_main_region_ESPERA(handle);
				handle->iface.evAbrio_raised = bool_true;
				enseq_main_region_ESPERA_default(handle);
			}  else
			{
				if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PUERTACORREDIZA_PUERTACORREDIZAIFACE_TEC2)) == bool_true))
1a000446:	b113      	cbz	r3, 1a00044e <main_region_ESPERA_react+0x22>
1a000448:	69a2      	ldr	r2, [r4, #24]
1a00044a:	2a02      	cmp	r2, #2
1a00044c:	d016      	beq.n	1a00047c <main_region_ESPERA_react+0x50>
					exseq_main_region_ESPERA(handle);
					handle->iface.evNoPresencia_raised = bool_true;
					enseq_main_region_ESPERA_default(handle);
				}  else
				{
					if (((handle->internal.siTECXOK_raised) == bool_true) && (((handle->internal.viTecla) == (PUERTACORREDIZA_PUERTACORREDIZAIFACE_TEC1)) == bool_true))
1a00044e:	b33b      	cbz	r3, 1a0004a0 <main_region_ESPERA_react+0x74>
1a000450:	69a3      	ldr	r3, [r4, #24]
1a000452:	2b01      	cmp	r3, #1
1a000454:	d01b      	beq.n	1a00048e <main_region_ESPERA_react+0x62>
						exseq_main_region_ESPERA(handle);
						handle->iface.evPresencia_raised = bool_true;
						enseq_main_region_ESPERA_default(handle);
					}  else
					{
						did_transition = bool_false;
1a000456:	2500      	movs	r5, #0
1a000458:	e023      	b.n	1a0004a2 <main_region_ESPERA_react+0x76>
			exseq_main_region_ESPERA(handle);
1a00045a:	f7ff ff88 	bl	1a00036e <exseq_main_region_ESPERA>
			handle->iface.evCerro_raised = bool_true;
1a00045e:	2301      	movs	r3, #1
1a000460:	72e3      	strb	r3, [r4, #11]
			enseq_main_region_ESPERA_default(handle);
1a000462:	4620      	mov	r0, r4
1a000464:	f7ff ff72 	bl	1a00034c <enseq_main_region_ESPERA_default>
1a000468:	e01b      	b.n	1a0004a2 <main_region_ESPERA_react+0x76>
				exseq_main_region_ESPERA(handle);
1a00046a:	4620      	mov	r0, r4
1a00046c:	f7ff ff7f 	bl	1a00036e <exseq_main_region_ESPERA>
				handle->iface.evAbrio_raised = bool_true;
1a000470:	2301      	movs	r3, #1
1a000472:	72a3      	strb	r3, [r4, #10]
				enseq_main_region_ESPERA_default(handle);
1a000474:	4620      	mov	r0, r4
1a000476:	f7ff ff69 	bl	1a00034c <enseq_main_region_ESPERA_default>
1a00047a:	e012      	b.n	1a0004a2 <main_region_ESPERA_react+0x76>
					exseq_main_region_ESPERA(handle);
1a00047c:	4620      	mov	r0, r4
1a00047e:	f7ff ff76 	bl	1a00036e <exseq_main_region_ESPERA>
					handle->iface.evNoPresencia_raised = bool_true;
1a000482:	2301      	movs	r3, #1
1a000484:	7263      	strb	r3, [r4, #9]
					enseq_main_region_ESPERA_default(handle);
1a000486:	4620      	mov	r0, r4
1a000488:	f7ff ff60 	bl	1a00034c <enseq_main_region_ESPERA_default>
1a00048c:	e009      	b.n	1a0004a2 <main_region_ESPERA_react+0x76>
						exseq_main_region_ESPERA(handle);
1a00048e:	4620      	mov	r0, r4
1a000490:	f7ff ff6d 	bl	1a00036e <exseq_main_region_ESPERA>
						handle->iface.evPresencia_raised = bool_true;
1a000494:	2301      	movs	r3, #1
1a000496:	7223      	strb	r3, [r4, #8]
						enseq_main_region_ESPERA_default(handle);
1a000498:	4620      	mov	r0, r4
1a00049a:	f7ff ff57 	bl	1a00034c <enseq_main_region_ESPERA_default>
1a00049e:	e000      	b.n	1a0004a2 <main_region_ESPERA_react+0x76>
						did_transition = bool_false;
1a0004a0:	461d      	mov	r5, r3
					}
				}
			}
		}
	} return did_transition;
}
1a0004a2:	4628      	mov	r0, r5
1a0004a4:	bd38      	pop	{r3, r4, r5, pc}

1a0004a6 <enact_PUERTAcORREDIZA_ABRIENDO>:
{
1a0004a6:	b508      	push	{r3, lr}
	puertaCorredizaIface_opMotor(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_OPEN, PUERTACORREDIZA_PUERTACORREDIZAIFACE_ON);
1a0004a8:	2201      	movs	r2, #1
1a0004aa:	4611      	mov	r1, r2
1a0004ac:	f001 fb41 	bl	1a001b32 <puertaCorredizaIface_opMotor>
}
1a0004b0:	bd08      	pop	{r3, pc}

1a0004b2 <enseq_PUERTAcORREDIZA_ABRIENDO_default>:
{
1a0004b2:	b510      	push	{r4, lr}
1a0004b4:	4604      	mov	r4, r0
	enact_PUERTAcORREDIZA_ABRIENDO(handle);
1a0004b6:	f7ff fff6 	bl	1a0004a6 <enact_PUERTAcORREDIZA_ABRIENDO>
	handle->stateConfVector[2] = PuertaCorrediza_PUERTAcORREDIZA_ABRIENDO;
1a0004ba:	2308      	movs	r3, #8
1a0004bc:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a0004be:	2302      	movs	r3, #2
1a0004c0:	6063      	str	r3, [r4, #4]
}
1a0004c2:	bd10      	pop	{r4, pc}

1a0004c4 <PUERTAcORREDIZA_CERRADO_react>:

static sc_boolean PUERTAcORREDIZA_CERRADO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a0004c4:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state CERRADO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0004c6:	460d      	mov	r5, r1
1a0004c8:	b119      	cbz	r1, 1a0004d2 <PUERTAcORREDIZA_CERRADO_react+0xe>
1a0004ca:	4604      	mov	r4, r0
	{ 
		if (handle->iface.evPresencia_raised == bool_true)
1a0004cc:	7a03      	ldrb	r3, [r0, #8]
1a0004ce:	b913      	cbnz	r3, 1a0004d6 <PUERTAcORREDIZA_CERRADO_react+0x12>
			exseq_PUERTAcORREDIZA_CERRADO(handle);
			handle->internal.evSiTitilar_raised = bool_true;
			enseq_PUERTAcORREDIZA_ABRIENDO_default(handle);
		}  else
		{
			did_transition = bool_false;
1a0004d0:	461d      	mov	r5, r3
		}
	} return did_transition;
}
1a0004d2:	4628      	mov	r0, r5
1a0004d4:	bd38      	pop	{r3, r4, r5, pc}
			exseq_PUERTAcORREDIZA_CERRADO(handle);
1a0004d6:	f7ff ff4f 	bl	1a000378 <exseq_PUERTAcORREDIZA_CERRADO>
			handle->internal.evSiTitilar_raised = bool_true;
1a0004da:	2301      	movs	r3, #1
1a0004dc:	7523      	strb	r3, [r4, #20]
			enseq_PUERTAcORREDIZA_ABRIENDO_default(handle);
1a0004de:	4620      	mov	r0, r4
1a0004e0:	f7ff ffe7 	bl	1a0004b2 <enseq_PUERTAcORREDIZA_ABRIENDO_default>
1a0004e4:	e7f5      	b.n	1a0004d2 <PUERTAcORREDIZA_CERRADO_react+0xe>

1a0004e6 <enact_PUERTAcORREDIZA_CERRANDO>:
{
1a0004e6:	b508      	push	{r3, lr}
	puertaCorredizaIface_opMotor(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_CLOSE, PUERTACORREDIZA_PUERTACORREDIZAIFACE_ON);
1a0004e8:	2201      	movs	r2, #1
1a0004ea:	2100      	movs	r1, #0
1a0004ec:	f001 fb21 	bl	1a001b32 <puertaCorredizaIface_opMotor>
}
1a0004f0:	bd08      	pop	{r3, pc}

1a0004f2 <enseq_PUERTAcORREDIZA_CERRANDO_default>:
{
1a0004f2:	b510      	push	{r4, lr}
1a0004f4:	4604      	mov	r4, r0
	enact_PUERTAcORREDIZA_CERRANDO(handle);
1a0004f6:	f7ff fff6 	bl	1a0004e6 <enact_PUERTAcORREDIZA_CERRANDO>
	handle->stateConfVector[2] = PuertaCorrediza_PUERTAcORREDIZA_CERRANDO;
1a0004fa:	2307      	movs	r3, #7
1a0004fc:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a0004fe:	2302      	movs	r3, #2
1a000500:	6063      	str	r3, [r4, #4]
}
1a000502:	bd10      	pop	{r4, pc}

1a000504 <PUERTAcORREDIZA_ABIERTO_react>:
			}
		}
	} return did_transition;
}

static sc_boolean PUERTAcORREDIZA_ABIERTO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a000504:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state ABIERTO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000506:	460d      	mov	r5, r1
1a000508:	b119      	cbz	r1, 1a000512 <PUERTAcORREDIZA_ABIERTO_react+0xe>
1a00050a:	4604      	mov	r4, r0
	{ 
		if (handle->iface.evNoPresencia_raised == bool_true)
1a00050c:	7a43      	ldrb	r3, [r0, #9]
1a00050e:	b913      	cbnz	r3, 1a000516 <PUERTAcORREDIZA_ABIERTO_react+0x12>
			exseq_PUERTAcORREDIZA_ABIERTO(handle);
			handle->internal.evNoTitilar_raised = bool_true;
			enseq_PUERTAcORREDIZA_CERRANDO_default(handle);
		}  else
		{
			did_transition = bool_false;
1a000510:	461d      	mov	r5, r3
		}
	} return did_transition;
}
1a000512:	4628      	mov	r0, r5
1a000514:	bd38      	pop	{r3, r4, r5, pc}
			exseq_PUERTAcORREDIZA_ABIERTO(handle);
1a000516:	f7ff ff3e 	bl	1a000396 <exseq_PUERTAcORREDIZA_ABIERTO>
			handle->internal.evNoTitilar_raised = bool_true;
1a00051a:	2301      	movs	r3, #1
1a00051c:	7563      	strb	r3, [r4, #21]
			enseq_PUERTAcORREDIZA_CERRANDO_default(handle);
1a00051e:	4620      	mov	r0, r4
1a000520:	f7ff ffe7 	bl	1a0004f2 <enseq_PUERTAcORREDIZA_CERRANDO_default>
1a000524:	e7f5      	b.n	1a000512 <PUERTAcORREDIZA_ABIERTO_react+0xe>

1a000526 <enact_PUERTAcORREDIZA_CERRADO>:
{
1a000526:	b510      	push	{r4, lr}
1a000528:	4604      	mov	r4, r0
	puertaCorredizaIface_opMotor(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_CLOSE, PUERTACORREDIZA_PUERTACORREDIZAIFACE_OFF);
1a00052a:	2200      	movs	r2, #0
1a00052c:	4611      	mov	r1, r2
1a00052e:	f001 fb00 	bl	1a001b32 <puertaCorredizaIface_opMotor>
	puertaCorredizaIface_opLED(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LEDR, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED_ON);
1a000532:	2201      	movs	r2, #1
1a000534:	2100      	movs	r1, #0
1a000536:	4620      	mov	r0, r4
1a000538:	f001 fac6 	bl	1a001ac8 <puertaCorredizaIface_opLED>
	puertaCorredizaIface_opLED(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LEDG, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED_OFF);
1a00053c:	2200      	movs	r2, #0
1a00053e:	2101      	movs	r1, #1
1a000540:	4620      	mov	r0, r4
1a000542:	f001 fac1 	bl	1a001ac8 <puertaCorredizaIface_opLED>
}
1a000546:	bd10      	pop	{r4, pc}

1a000548 <enseq_PUERTAcORREDIZA_CERRADO_default>:
{
1a000548:	b510      	push	{r4, lr}
1a00054a:	4604      	mov	r4, r0
	enact_PUERTAcORREDIZA_CERRADO(handle);
1a00054c:	f7ff ffeb 	bl	1a000526 <enact_PUERTAcORREDIZA_CERRADO>
	handle->stateConfVector[2] = PuertaCorrediza_PUERTAcORREDIZA_CERRADO;
1a000550:	2306      	movs	r3, #6
1a000552:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a000554:	2302      	movs	r3, #2
1a000556:	6063      	str	r3, [r4, #4]
}
1a000558:	bd10      	pop	{r4, pc}

1a00055a <react_PUERTAcORREDIZA__entry_Default>:
{
1a00055a:	b508      	push	{r3, lr}
	enseq_PUERTAcORREDIZA_CERRADO_default(handle);
1a00055c:	f7ff fff4 	bl	1a000548 <enseq_PUERTAcORREDIZA_CERRADO_default>
}
1a000560:	bd08      	pop	{r3, pc}

1a000562 <enseq_PUERTAcORREDIZA_default>:
{
1a000562:	b508      	push	{r3, lr}
	react_PUERTAcORREDIZA__entry_Default(handle);
1a000564:	f7ff fff9 	bl	1a00055a <react_PUERTAcORREDIZA__entry_Default>
}
1a000568:	bd08      	pop	{r3, pc}

1a00056a <PUERTAcORREDIZA_CERRANDO_react>:
static sc_boolean PUERTAcORREDIZA_CERRANDO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a00056a:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a00056c:	460d      	mov	r5, r1
1a00056e:	b129      	cbz	r1, 1a00057c <PUERTAcORREDIZA_CERRANDO_react+0x12>
1a000570:	4604      	mov	r4, r0
		if (handle->iface.evCerro_raised == bool_true)
1a000572:	7ac3      	ldrb	r3, [r0, #11]
1a000574:	b923      	cbnz	r3, 1a000580 <PUERTAcORREDIZA_CERRANDO_react+0x16>
			if (handle->iface.evPresencia_raised == bool_true)
1a000576:	7a03      	ldrb	r3, [r0, #8]
1a000578:	b953      	cbnz	r3, 1a000590 <PUERTAcORREDIZA_CERRANDO_react+0x26>
				did_transition = bool_false;
1a00057a:	461d      	mov	r5, r3
}
1a00057c:	4628      	mov	r0, r5
1a00057e:	bd38      	pop	{r3, r4, r5, pc}
			exseq_PUERTAcORREDIZA_CERRANDO(handle);
1a000580:	f7ff feff 	bl	1a000382 <exseq_PUERTAcORREDIZA_CERRANDO>
			handle->internal.evNoTitilar_raised = bool_true;
1a000584:	2301      	movs	r3, #1
1a000586:	7563      	strb	r3, [r4, #21]
			enseq_PUERTAcORREDIZA_CERRADO_default(handle);
1a000588:	4620      	mov	r0, r4
1a00058a:	f7ff ffdd 	bl	1a000548 <enseq_PUERTAcORREDIZA_CERRADO_default>
1a00058e:	e7f5      	b.n	1a00057c <PUERTAcORREDIZA_CERRANDO_react+0x12>
				exseq_PUERTAcORREDIZA_CERRANDO(handle);
1a000590:	f7ff fef7 	bl	1a000382 <exseq_PUERTAcORREDIZA_CERRANDO>
				handle->internal.evSiTitilar_raised = bool_true;
1a000594:	2301      	movs	r3, #1
1a000596:	7523      	strb	r3, [r4, #20]
				enseq_PUERTAcORREDIZA_ABRIENDO_default(handle);
1a000598:	4620      	mov	r0, r4
1a00059a:	f7ff ff8a 	bl	1a0004b2 <enseq_PUERTAcORREDIZA_ABRIENDO_default>
1a00059e:	e7ed      	b.n	1a00057c <PUERTAcORREDIZA_CERRANDO_react+0x12>

1a0005a0 <enact_LED3_REPOSO>:
{
1a0005a0:	b508      	push	{r3, lr}
	puertaCorredizaIface_opLED(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED3, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED_OFF);
1a0005a2:	2200      	movs	r2, #0
1a0005a4:	2105      	movs	r1, #5
1a0005a6:	f001 fa8f 	bl	1a001ac8 <puertaCorredizaIface_opLED>
}
1a0005aa:	bd08      	pop	{r3, pc}

1a0005ac <enseq_LED3_REPOSO_default>:
{
1a0005ac:	b510      	push	{r4, lr}
1a0005ae:	4604      	mov	r4, r0
	enact_LED3_REPOSO(handle);
1a0005b0:	f7ff fff6 	bl	1a0005a0 <enact_LED3_REPOSO>
	handle->stateConfVector[3] = PuertaCorrediza_LED3_REPOSO;
1a0005b4:	230d      	movs	r3, #13
1a0005b6:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a0005b8:	2303      	movs	r3, #3
1a0005ba:	6063      	str	r3, [r4, #4]
}
1a0005bc:	bd10      	pop	{r4, pc}

1a0005be <react_LED3__entry_Default>:
{
1a0005be:	b508      	push	{r3, lr}
	enseq_LED3_REPOSO_default(handle);
1a0005c0:	f7ff fff4 	bl	1a0005ac <enseq_LED3_REPOSO_default>
}
1a0005c4:	bd08      	pop	{r3, pc}

1a0005c6 <enseq_LED3_default>:
{
1a0005c6:	b508      	push	{r3, lr}
	react_LED3__entry_Default(handle);
1a0005c8:	f7ff fff9 	bl	1a0005be <react_LED3__entry_Default>
}
1a0005cc:	bd08      	pop	{r3, pc}

1a0005ce <enact_PUERTAcORREDIZA_ABIERTO>:
{
1a0005ce:	b510      	push	{r4, lr}
1a0005d0:	4604      	mov	r4, r0
	puertaCorredizaIface_opMotor(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_OPEN, PUERTACORREDIZA_PUERTACORREDIZAIFACE_OFF);
1a0005d2:	2200      	movs	r2, #0
1a0005d4:	2101      	movs	r1, #1
1a0005d6:	f001 faac 	bl	1a001b32 <puertaCorredizaIface_opMotor>
	puertaCorredizaIface_opLED(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LEDG, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED_ON);
1a0005da:	2201      	movs	r2, #1
1a0005dc:	4611      	mov	r1, r2
1a0005de:	4620      	mov	r0, r4
1a0005e0:	f001 fa72 	bl	1a001ac8 <puertaCorredizaIface_opLED>
	puertaCorredizaIface_opLED(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LEDR, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED_OFF);
1a0005e4:	2200      	movs	r2, #0
1a0005e6:	4611      	mov	r1, r2
1a0005e8:	4620      	mov	r0, r4
1a0005ea:	f001 fa6d 	bl	1a001ac8 <puertaCorredizaIface_opLED>
}
1a0005ee:	bd10      	pop	{r4, pc}

1a0005f0 <enseq_PUERTAcORREDIZA_ABIERTO_default>:
{
1a0005f0:	b510      	push	{r4, lr}
1a0005f2:	4604      	mov	r4, r0
	enact_PUERTAcORREDIZA_ABIERTO(handle);
1a0005f4:	f7ff ffeb 	bl	1a0005ce <enact_PUERTAcORREDIZA_ABIERTO>
	handle->stateConfVector[2] = PuertaCorrediza_PUERTAcORREDIZA_ABIERTO;
1a0005f8:	2309      	movs	r3, #9
1a0005fa:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a0005fc:	2302      	movs	r3, #2
1a0005fe:	6063      	str	r3, [r4, #4]
}
1a000600:	bd10      	pop	{r4, pc}

1a000602 <PUERTAcORREDIZA_ABRIENDO_react>:
static sc_boolean PUERTAcORREDIZA_ABRIENDO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a000602:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000604:	460d      	mov	r5, r1
1a000606:	b129      	cbz	r1, 1a000614 <PUERTAcORREDIZA_ABRIENDO_react+0x12>
1a000608:	4604      	mov	r4, r0
		if (handle->iface.evAbrio_raised == bool_true)
1a00060a:	7a83      	ldrb	r3, [r0, #10]
1a00060c:	b923      	cbnz	r3, 1a000618 <PUERTAcORREDIZA_ABRIENDO_react+0x16>
			if (handle->iface.evNoPresencia_raised == bool_true)
1a00060e:	7a43      	ldrb	r3, [r0, #9]
1a000610:	b943      	cbnz	r3, 1a000624 <PUERTAcORREDIZA_ABRIENDO_react+0x22>
				did_transition = bool_false;
1a000612:	461d      	mov	r5, r3
}
1a000614:	4628      	mov	r0, r5
1a000616:	bd38      	pop	{r3, r4, r5, pc}
			exseq_PUERTAcORREDIZA_ABRIENDO(handle);
1a000618:	f7ff feb8 	bl	1a00038c <exseq_PUERTAcORREDIZA_ABRIENDO>
			enseq_PUERTAcORREDIZA_ABIERTO_default(handle);
1a00061c:	4620      	mov	r0, r4
1a00061e:	f7ff ffe7 	bl	1a0005f0 <enseq_PUERTAcORREDIZA_ABIERTO_default>
1a000622:	e7f7      	b.n	1a000614 <PUERTAcORREDIZA_ABRIENDO_react+0x12>
				exseq_PUERTAcORREDIZA_ABRIENDO(handle);
1a000624:	f7ff feb2 	bl	1a00038c <exseq_PUERTAcORREDIZA_ABRIENDO>
				handle->internal.evNoTitilar_raised = bool_true;
1a000628:	2301      	movs	r3, #1
1a00062a:	7563      	strb	r3, [r4, #21]
				enseq_PUERTAcORREDIZA_CERRANDO_default(handle);
1a00062c:	4620      	mov	r0, r4
1a00062e:	f7ff ff60 	bl	1a0004f2 <enseq_PUERTAcORREDIZA_CERRANDO_default>
1a000632:	e7ef      	b.n	1a000614 <PUERTAcORREDIZA_ABRIENDO_react+0x12>

1a000634 <exact_TECX_DEBOUNCE>:
{
1a000634:	b508      	push	{r3, lr}
	puertaCorrediza_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.puertaCorrediza_TECX_DEBOUNCE_tev0_raised) );		
1a000636:	f100 011c 	add.w	r1, r0, #28
1a00063a:	f001 fa5b 	bl	1a001af4 <puertaCorrediza_unsetTimer>
}
1a00063e:	bd08      	pop	{r3, pc}

1a000640 <exseq_TECX_DEBOUNCE>:
{
1a000640:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = PuertaCorrediza_last_state;
1a000642:	2200      	movs	r2, #0
1a000644:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a000646:	6042      	str	r2, [r0, #4]
	exact_TECX_DEBOUNCE(handle);
1a000648:	f7ff fff4 	bl	1a000634 <exact_TECX_DEBOUNCE>
}
1a00064c:	bd08      	pop	{r3, pc}

1a00064e <TECX_DEBOUNCE_react>:
static sc_boolean TECX_DEBOUNCE_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a00064e:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000650:	460d      	mov	r5, r1
1a000652:	b131      	cbz	r1, 1a000662 <TECX_DEBOUNCE_react+0x14>
1a000654:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
1a000656:	f7ff feb8 	bl	1a0003ca <react>
1a00065a:	b910      	cbnz	r0, 1a000662 <TECX_DEBOUNCE_react+0x14>
			if (handle->timeEvents.puertaCorrediza_TECX_DEBOUNCE_tev0_raised == bool_true)
1a00065c:	7f23      	ldrb	r3, [r4, #28]
1a00065e:	b913      	cbnz	r3, 1a000666 <TECX_DEBOUNCE_react+0x18>
				did_transition = bool_false;
1a000660:	461d      	mov	r5, r3
}
1a000662:	4628      	mov	r0, r5
1a000664:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_DEBOUNCE(handle);
1a000666:	4620      	mov	r0, r4
1a000668:	f7ff ffea 	bl	1a000640 <exseq_TECX_DEBOUNCE>
				enseq_TECX_VALIDACION_default(handle);
1a00066c:	4620      	mov	r0, r4
1a00066e:	f7ff fe68 	bl	1a000342 <enseq_TECX_VALIDACION_default>
1a000672:	e7f6      	b.n	1a000662 <TECX_DEBOUNCE_react+0x14>

1a000674 <exact_LED3_TITILA_r1_APAGADO>:
{
1a000674:	b508      	push	{r3, lr}
	puertaCorrediza_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_APAGADO_tev0_raised) );		
1a000676:	f100 011e 	add.w	r1, r0, #30
1a00067a:	f001 fa3b 	bl	1a001af4 <puertaCorrediza_unsetTimer>
}
1a00067e:	bd08      	pop	{r3, pc}

1a000680 <exseq_LED3_TITILA_r1_APAGADO>:
{
1a000680:	b508      	push	{r3, lr}
	handle->stateConfVector[3] = PuertaCorrediza_last_state;
1a000682:	2200      	movs	r2, #0
1a000684:	70c2      	strb	r2, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a000686:	2203      	movs	r2, #3
1a000688:	6042      	str	r2, [r0, #4]
	exact_LED3_TITILA_r1_APAGADO(handle);
1a00068a:	f7ff fff3 	bl	1a000674 <exact_LED3_TITILA_r1_APAGADO>
}
1a00068e:	bd08      	pop	{r3, pc}

1a000690 <exact_LED3_TITILA_r1_ENCENDIDO>:
{
1a000690:	b508      	push	{r3, lr}
	puertaCorrediza_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_ENCENDIDO_tev0_raised) );		
1a000692:	f100 011d 	add.w	r1, r0, #29
1a000696:	f001 fa2d 	bl	1a001af4 <puertaCorrediza_unsetTimer>
}
1a00069a:	bd08      	pop	{r3, pc}

1a00069c <exseq_LED3_TITILA_r1_ENCENDIDO>:
{
1a00069c:	b508      	push	{r3, lr}
	handle->stateConfVector[3] = PuertaCorrediza_last_state;
1a00069e:	2200      	movs	r2, #0
1a0006a0:	70c2      	strb	r2, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0006a2:	2203      	movs	r2, #3
1a0006a4:	6042      	str	r2, [r0, #4]
	exact_LED3_TITILA_r1_ENCENDIDO(handle);
1a0006a6:	f7ff fff3 	bl	1a000690 <exact_LED3_TITILA_r1_ENCENDIDO>
}
1a0006aa:	bd08      	pop	{r3, pc}

1a0006ac <exseq_LED3_TITILA_r1>:
{
1a0006ac:	b508      	push	{r3, lr}
	switch(handle->stateConfVector[ 3 ])
1a0006ae:	78c3      	ldrb	r3, [r0, #3]
1a0006b0:	2b0b      	cmp	r3, #11
1a0006b2:	d002      	beq.n	1a0006ba <exseq_LED3_TITILA_r1+0xe>
1a0006b4:	2b0c      	cmp	r3, #12
1a0006b6:	d003      	beq.n	1a0006c0 <exseq_LED3_TITILA_r1+0x14>
}
1a0006b8:	bd08      	pop	{r3, pc}
			exseq_LED3_TITILA_r1_ENCENDIDO(handle);
1a0006ba:	f7ff ffef 	bl	1a00069c <exseq_LED3_TITILA_r1_ENCENDIDO>
			break;
1a0006be:	e7fb      	b.n	1a0006b8 <exseq_LED3_TITILA_r1+0xc>
			exseq_LED3_TITILA_r1_APAGADO(handle);
1a0006c0:	f7ff ffde 	bl	1a000680 <exseq_LED3_TITILA_r1_APAGADO>
}
1a0006c4:	e7f8      	b.n	1a0006b8 <exseq_LED3_TITILA_r1+0xc>

1a0006c6 <exseq_LED3_TITILA>:
{
1a0006c6:	b508      	push	{r3, lr}
	exseq_LED3_TITILA_r1(handle);
1a0006c8:	f7ff fff0 	bl	1a0006ac <exseq_LED3_TITILA_r1>
}
1a0006cc:	bd08      	pop	{r3, pc}

1a0006ce <LED3_TITILA_react>:

static sc_boolean LED3_TITILA_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a0006ce:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state TITILA. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0006d0:	460d      	mov	r5, r1
1a0006d2:	b119      	cbz	r1, 1a0006dc <LED3_TITILA_react+0xe>
1a0006d4:	4604      	mov	r4, r0
	{ 
		if (handle->internal.evNoTitilar_raised == bool_true)
1a0006d6:	7d43      	ldrb	r3, [r0, #21]
1a0006d8:	b913      	cbnz	r3, 1a0006e0 <LED3_TITILA_react+0x12>
		{ 
			exseq_LED3_TITILA(handle);
			enseq_LED3_REPOSO_default(handle);
		}  else
		{
			did_transition = bool_false;
1a0006da:	461d      	mov	r5, r3
		}
	} return did_transition;
}
1a0006dc:	4628      	mov	r0, r5
1a0006de:	bd38      	pop	{r3, r4, r5, pc}
			exseq_LED3_TITILA(handle);
1a0006e0:	f7ff fff1 	bl	1a0006c6 <exseq_LED3_TITILA>
			enseq_LED3_REPOSO_default(handle);
1a0006e4:	4620      	mov	r0, r4
1a0006e6:	f7ff ff61 	bl	1a0005ac <enseq_LED3_REPOSO_default>
1a0006ea:	e7f7      	b.n	1a0006dc <LED3_TITILA_react+0xe>

1a0006ec <enact_TECX_DEBOUNCE>:
{
1a0006ec:	b508      	push	{r3, lr}
	puertaCorrediza_setTimer(handle, (sc_eventid) &(handle->timeEvents.puertaCorrediza_TECX_DEBOUNCE_tev0_raised) , 100, bool_false);
1a0006ee:	2300      	movs	r3, #0
1a0006f0:	2264      	movs	r2, #100	; 0x64
1a0006f2:	f100 011c 	add.w	r1, r0, #28
1a0006f6:	f001 f9ef 	bl	1a001ad8 <puertaCorrediza_setTimer>
}
1a0006fa:	bd08      	pop	{r3, pc}

1a0006fc <enseq_TECX_DEBOUNCE_default>:
{
1a0006fc:	b510      	push	{r4, lr}
1a0006fe:	4604      	mov	r4, r0
	enact_TECX_DEBOUNCE(handle);
1a000700:	f7ff fff4 	bl	1a0006ec <enact_TECX_DEBOUNCE>
	handle->stateConfVector[0] = PuertaCorrediza_TECX_DEBOUNCE;
1a000704:	2301      	movs	r3, #1
1a000706:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a000708:	2300      	movs	r3, #0
1a00070a:	6063      	str	r3, [r4, #4]
}
1a00070c:	bd10      	pop	{r4, pc}

1a00070e <TECX_NO_OPRIMIDO_react>:
static sc_boolean TECX_NO_OPRIMIDO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a00070e:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a000710:	460d      	mov	r5, r1
1a000712:	b131      	cbz	r1, 1a000722 <TECX_NO_OPRIMIDO_react+0x14>
1a000714:	4604      	mov	r4, r0
		if ((react(handle)) == (bool_false))
1a000716:	f7ff fe58 	bl	1a0003ca <react>
1a00071a:	b910      	cbnz	r0, 1a000722 <TECX_NO_OPRIMIDO_react+0x14>
			if (handle->iface.evTECXOprimido_raised == bool_true)
1a00071c:	7b63      	ldrb	r3, [r4, #13]
1a00071e:	b913      	cbnz	r3, 1a000726 <TECX_NO_OPRIMIDO_react+0x18>
				did_transition = bool_false;
1a000720:	461d      	mov	r5, r3
}
1a000722:	4628      	mov	r0, r5
1a000724:	bd38      	pop	{r3, r4, r5, pc}
				exseq_TECX_NO_OPRIMIDO(handle);
1a000726:	4620      	mov	r0, r4
1a000728:	f7ff fe15 	bl	1a000356 <exseq_TECX_NO_OPRIMIDO>
				enseq_TECX_DEBOUNCE_default(handle);
1a00072c:	4620      	mov	r0, r4
1a00072e:	f7ff ffe5 	bl	1a0006fc <enseq_TECX_DEBOUNCE_default>
1a000732:	e7f6      	b.n	1a000722 <TECX_NO_OPRIMIDO_react+0x14>

1a000734 <enact_LED3_TITILA_r1_APAGADO>:
{
1a000734:	b510      	push	{r4, lr}
1a000736:	4604      	mov	r4, r0
	puertaCorrediza_setTimer(handle, (sc_eventid) &(handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_APAGADO_tev0_raised) , 250, bool_false);
1a000738:	2300      	movs	r3, #0
1a00073a:	22fa      	movs	r2, #250	; 0xfa
1a00073c:	f100 011e 	add.w	r1, r0, #30
1a000740:	f001 f9ca 	bl	1a001ad8 <puertaCorrediza_setTimer>
	puertaCorredizaIface_opLED(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED3, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED_OFF);
1a000744:	2200      	movs	r2, #0
1a000746:	2105      	movs	r1, #5
1a000748:	4620      	mov	r0, r4
1a00074a:	f001 f9bd 	bl	1a001ac8 <puertaCorredizaIface_opLED>
}
1a00074e:	bd10      	pop	{r4, pc}

1a000750 <enseq_LED3_TITILA_r1_APAGADO_default>:
{
1a000750:	b510      	push	{r4, lr}
1a000752:	4604      	mov	r4, r0
	enact_LED3_TITILA_r1_APAGADO(handle);
1a000754:	f7ff ffee 	bl	1a000734 <enact_LED3_TITILA_r1_APAGADO>
	handle->stateConfVector[3] = PuertaCorrediza_LED3_TITILA_r1_APAGADO;
1a000758:	230c      	movs	r3, #12
1a00075a:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a00075c:	2303      	movs	r3, #3
1a00075e:	6063      	str	r3, [r4, #4]
}
1a000760:	bd10      	pop	{r4, pc}

1a000762 <LED3_TITILA_r1_ENCENDIDO_react>:

static sc_boolean LED3_TITILA_r1_ENCENDIDO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a000762:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state ENCENDIDO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a000764:	460d      	mov	r5, r1
1a000766:	b909      	cbnz	r1, 1a00076c <LED3_TITILA_r1_ENCENDIDO_react+0xa>
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}
1a000768:	4628      	mov	r0, r5
1a00076a:	bd38      	pop	{r3, r4, r5, pc}
1a00076c:	4604      	mov	r4, r0
		if ((LED3_TITILA_react(handle, try_transition)) == (bool_false))
1a00076e:	f7ff ffae 	bl	1a0006ce <LED3_TITILA_react>
1a000772:	2800      	cmp	r0, #0
1a000774:	d1f8      	bne.n	1a000768 <LED3_TITILA_r1_ENCENDIDO_react+0x6>
			if (handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_ENCENDIDO_tev0_raised == bool_true)
1a000776:	7f63      	ldrb	r3, [r4, #29]
1a000778:	b90b      	cbnz	r3, 1a00077e <LED3_TITILA_r1_ENCENDIDO_react+0x1c>
				did_transition = bool_false;
1a00077a:	461d      	mov	r5, r3
1a00077c:	e7f4      	b.n	1a000768 <LED3_TITILA_r1_ENCENDIDO_react+0x6>
				exseq_LED3_TITILA_r1_ENCENDIDO(handle);
1a00077e:	4620      	mov	r0, r4
1a000780:	f7ff ff8c 	bl	1a00069c <exseq_LED3_TITILA_r1_ENCENDIDO>
				enseq_LED3_TITILA_r1_APAGADO_default(handle);
1a000784:	4620      	mov	r0, r4
1a000786:	f7ff ffe3 	bl	1a000750 <enseq_LED3_TITILA_r1_APAGADO_default>
1a00078a:	e7ed      	b.n	1a000768 <LED3_TITILA_r1_ENCENDIDO_react+0x6>

1a00078c <react_LED3_TITILA_r1__entry_Default>:
{
1a00078c:	b508      	push	{r3, lr}
	enseq_LED3_TITILA_r1_APAGADO_default(handle);
1a00078e:	f7ff ffdf 	bl	1a000750 <enseq_LED3_TITILA_r1_APAGADO_default>
}
1a000792:	bd08      	pop	{r3, pc}

1a000794 <enseq_LED3_TITILA_r1_default>:
{
1a000794:	b508      	push	{r3, lr}
	react_LED3_TITILA_r1__entry_Default(handle);
1a000796:	f7ff fff9 	bl	1a00078c <react_LED3_TITILA_r1__entry_Default>
}
1a00079a:	bd08      	pop	{r3, pc}

1a00079c <enseq_LED3_TITILA_default>:
{
1a00079c:	b508      	push	{r3, lr}
	enseq_LED3_TITILA_r1_default(handle);
1a00079e:	f7ff fff9 	bl	1a000794 <enseq_LED3_TITILA_r1_default>
}
1a0007a2:	bd08      	pop	{r3, pc}

1a0007a4 <LED3_REPOSO_react>:
			}
		} 
	} return did_transition;
}

static sc_boolean LED3_REPOSO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a0007a4:	b538      	push	{r3, r4, r5, lr}
	/* The reactions of state REPOSO. */
	sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
1a0007a6:	460d      	mov	r5, r1
1a0007a8:	b119      	cbz	r1, 1a0007b2 <LED3_REPOSO_react+0xe>
1a0007aa:	4604      	mov	r4, r0
	{ 
		if (handle->internal.evSiTitilar_raised == bool_true)
1a0007ac:	7d03      	ldrb	r3, [r0, #20]
1a0007ae:	b913      	cbnz	r3, 1a0007b6 <LED3_REPOSO_react+0x12>
		{ 
			exseq_LED3_REPOSO(handle);
			enseq_LED3_TITILA_default(handle);
		}  else
		{
			did_transition = bool_false;
1a0007b0:	461d      	mov	r5, r3
		}
	} return did_transition;
}
1a0007b2:	4628      	mov	r0, r5
1a0007b4:	bd38      	pop	{r3, r4, r5, pc}
			exseq_LED3_REPOSO(handle);
1a0007b6:	f7ff fdf3 	bl	1a0003a0 <exseq_LED3_REPOSO>
			enseq_LED3_TITILA_default(handle);
1a0007ba:	4620      	mov	r0, r4
1a0007bc:	f7ff ffee 	bl	1a00079c <enseq_LED3_TITILA_default>
1a0007c0:	e7f7      	b.n	1a0007b2 <LED3_REPOSO_react+0xe>

1a0007c2 <enact_LED3_TITILA_r1_ENCENDIDO>:
{
1a0007c2:	b510      	push	{r4, lr}
1a0007c4:	4604      	mov	r4, r0
	puertaCorrediza_setTimer(handle, (sc_eventid) &(handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_ENCENDIDO_tev0_raised) , 500, bool_false);
1a0007c6:	2300      	movs	r3, #0
1a0007c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a0007cc:	f100 011d 	add.w	r1, r0, #29
1a0007d0:	f001 f982 	bl	1a001ad8 <puertaCorrediza_setTimer>
	puertaCorredizaIface_opLED(handle, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED3, PUERTACORREDIZA_PUERTACORREDIZAIFACE_LED_ON);
1a0007d4:	2201      	movs	r2, #1
1a0007d6:	2105      	movs	r1, #5
1a0007d8:	4620      	mov	r0, r4
1a0007da:	f001 f975 	bl	1a001ac8 <puertaCorredizaIface_opLED>
}
1a0007de:	bd10      	pop	{r4, pc}

1a0007e0 <enseq_LED3_TITILA_r1_ENCENDIDO_default>:
{
1a0007e0:	b510      	push	{r4, lr}
1a0007e2:	4604      	mov	r4, r0
	enact_LED3_TITILA_r1_ENCENDIDO(handle);
1a0007e4:	f7ff ffed 	bl	1a0007c2 <enact_LED3_TITILA_r1_ENCENDIDO>
	handle->stateConfVector[3] = PuertaCorrediza_LED3_TITILA_r1_ENCENDIDO;
1a0007e8:	230b      	movs	r3, #11
1a0007ea:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a0007ec:	2303      	movs	r3, #3
1a0007ee:	6063      	str	r3, [r4, #4]
}
1a0007f0:	bd10      	pop	{r4, pc}

1a0007f2 <LED3_TITILA_r1_APAGADO_react>:
static sc_boolean LED3_TITILA_r1_APAGADO_react(PuertaCorrediza* handle, const sc_boolean try_transition) {
1a0007f2:	b538      	push	{r3, r4, r5, lr}
	if (try_transition == bool_true)
1a0007f4:	460d      	mov	r5, r1
1a0007f6:	b909      	cbnz	r1, 1a0007fc <LED3_TITILA_r1_APAGADO_react+0xa>
}
1a0007f8:	4628      	mov	r0, r5
1a0007fa:	bd38      	pop	{r3, r4, r5, pc}
1a0007fc:	4604      	mov	r4, r0
		if ((LED3_TITILA_react(handle, try_transition)) == (bool_false))
1a0007fe:	f7ff ff66 	bl	1a0006ce <LED3_TITILA_react>
1a000802:	2800      	cmp	r0, #0
1a000804:	d1f8      	bne.n	1a0007f8 <LED3_TITILA_r1_APAGADO_react+0x6>
			if (handle->timeEvents.puertaCorrediza_LED3_TITILA_r1_APAGADO_tev0_raised == bool_true)
1a000806:	7fa3      	ldrb	r3, [r4, #30]
1a000808:	b90b      	cbnz	r3, 1a00080e <LED3_TITILA_r1_APAGADO_react+0x1c>
				did_transition = bool_false;
1a00080a:	461d      	mov	r5, r3
1a00080c:	e7f4      	b.n	1a0007f8 <LED3_TITILA_r1_APAGADO_react+0x6>
				exseq_LED3_TITILA_r1_APAGADO(handle);
1a00080e:	4620      	mov	r0, r4
1a000810:	f7ff ff36 	bl	1a000680 <exseq_LED3_TITILA_r1_APAGADO>
				enseq_LED3_TITILA_r1_ENCENDIDO_default(handle);
1a000814:	4620      	mov	r0, r4
1a000816:	f7ff ffe3 	bl	1a0007e0 <enseq_LED3_TITILA_r1_ENCENDIDO_default>
1a00081a:	e7ed      	b.n	1a0007f8 <LED3_TITILA_r1_APAGADO_react+0x6>

1a00081c <puertaCorrediza_init>:
{
1a00081c:	b538      	push	{r3, r4, r5, lr}
1a00081e:	4604      	mov	r4, r0
	for (i = 0; i < PUERTACORREDIZA_MAX_ORTHOGONAL_STATES; ++i)
1a000820:	2300      	movs	r3, #0
1a000822:	e002      	b.n	1a00082a <puertaCorrediza_init+0xe>
		handle->stateConfVector[i] = PuertaCorrediza_last_state;
1a000824:	2200      	movs	r2, #0
1a000826:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < PUERTACORREDIZA_MAX_ORTHOGONAL_STATES; ++i)
1a000828:	3301      	adds	r3, #1
1a00082a:	2b03      	cmp	r3, #3
1a00082c:	ddfa      	ble.n	1a000824 <puertaCorrediza_init+0x8>
	handle->stateConfVectorPosition = 0;
1a00082e:	2500      	movs	r5, #0
1a000830:	6065      	str	r5, [r4, #4]
	clearInEvents(handle);
1a000832:	4620      	mov	r0, r4
1a000834:	f7ff fd64 	bl	1a000300 <clearInEvents>
	handle->internal.viTecla = 0;
1a000838:	61a5      	str	r5, [r4, #24]
}
1a00083a:	bd38      	pop	{r3, r4, r5, pc}

1a00083c <puertaCorrediza_enter>:
{
1a00083c:	b510      	push	{r4, lr}
1a00083e:	4604      	mov	r4, r0
	enseq_TECX_default(handle);
1a000840:	f7ff fdb7 	bl	1a0003b2 <enseq_TECX_default>
	enseq_main_region_default(handle);
1a000844:	4620      	mov	r0, r4
1a000846:	f7ff fdbc 	bl	1a0003c2 <enseq_main_region_default>
	enseq_PUERTAcORREDIZA_default(handle);
1a00084a:	4620      	mov	r0, r4
1a00084c:	f7ff fe89 	bl	1a000562 <enseq_PUERTAcORREDIZA_default>
	enseq_LED3_default(handle);
1a000850:	4620      	mov	r0, r4
1a000852:	f7ff feb8 	bl	1a0005c6 <enseq_LED3_default>
}
1a000856:	bd10      	pop	{r4, pc}

1a000858 <puertaCorrediza_runCycle>:
{
1a000858:	b510      	push	{r4, lr}
1a00085a:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a00085c:	2300      	movs	r3, #0
1a00085e:	6043      	str	r3, [r0, #4]
1a000860:	e006      	b.n	1a000870 <puertaCorrediza_runCycle+0x18>
			TECX_DEBOUNCE_react(handle, bool_true);
1a000862:	2101      	movs	r1, #1
1a000864:	4620      	mov	r0, r4
1a000866:	f7ff fef2 	bl	1a00064e <TECX_DEBOUNCE_react>
		handle->stateConfVectorPosition++)
1a00086a:	6863      	ldr	r3, [r4, #4]
1a00086c:	3301      	adds	r3, #1
1a00086e:	6063      	str	r3, [r4, #4]
		handle->stateConfVectorPosition < PUERTACORREDIZA_MAX_ORTHOGONAL_STATES;
1a000870:	6863      	ldr	r3, [r4, #4]
	for (handle->stateConfVectorPosition = 0;
1a000872:	2b03      	cmp	r3, #3
1a000874:	d857      	bhi.n	1a000926 <puertaCorrediza_runCycle+0xce>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a000876:	5ce3      	ldrb	r3, [r4, r3]
1a000878:	3b01      	subs	r3, #1
1a00087a:	2b0c      	cmp	r3, #12
1a00087c:	d8f5      	bhi.n	1a00086a <puertaCorrediza_runCycle+0x12>
1a00087e:	a201      	add	r2, pc, #4	; (adr r2, 1a000884 <puertaCorrediza_runCycle+0x2c>)
1a000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000884:	1a000863 	.word	0x1a000863
1a000888:	1a0008b9 	.word	0x1a0008b9
1a00088c:	1a0008c3 	.word	0x1a0008c3
1a000890:	1a0008cd 	.word	0x1a0008cd
1a000894:	1a0008d7 	.word	0x1a0008d7
1a000898:	1a0008e1 	.word	0x1a0008e1
1a00089c:	1a0008eb 	.word	0x1a0008eb
1a0008a0:	1a0008f5 	.word	0x1a0008f5
1a0008a4:	1a0008ff 	.word	0x1a0008ff
1a0008a8:	1a00086b 	.word	0x1a00086b
1a0008ac:	1a000909 	.word	0x1a000909
1a0008b0:	1a000913 	.word	0x1a000913
1a0008b4:	1a00091d 	.word	0x1a00091d
			TECX_NO_OPRIMIDO_react(handle, bool_true);
1a0008b8:	2101      	movs	r1, #1
1a0008ba:	4620      	mov	r0, r4
1a0008bc:	f7ff ff27 	bl	1a00070e <TECX_NO_OPRIMIDO_react>
			break;
1a0008c0:	e7d3      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			TECX_OPRIMIDO_react(handle, bool_true);
1a0008c2:	2101      	movs	r1, #1
1a0008c4:	4620      	mov	r0, r4
1a0008c6:	f7ff fd82 	bl	1a0003ce <TECX_OPRIMIDO_react>
			break;
1a0008ca:	e7ce      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			TECX_VALIDACION_react(handle, bool_true);
1a0008cc:	2101      	movs	r1, #1
1a0008ce:	4620      	mov	r0, r4
1a0008d0:	f7ff fd90 	bl	1a0003f4 <TECX_VALIDACION_react>
			break;
1a0008d4:	e7c9      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			main_region_ESPERA_react(handle, bool_true);
1a0008d6:	2101      	movs	r1, #1
1a0008d8:	4620      	mov	r0, r4
1a0008da:	f7ff fda7 	bl	1a00042c <main_region_ESPERA_react>
			break;
1a0008de:	e7c4      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			PUERTAcORREDIZA_CERRADO_react(handle, bool_true);
1a0008e0:	2101      	movs	r1, #1
1a0008e2:	4620      	mov	r0, r4
1a0008e4:	f7ff fdee 	bl	1a0004c4 <PUERTAcORREDIZA_CERRADO_react>
			break;
1a0008e8:	e7bf      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			PUERTAcORREDIZA_CERRANDO_react(handle, bool_true);
1a0008ea:	2101      	movs	r1, #1
1a0008ec:	4620      	mov	r0, r4
1a0008ee:	f7ff fe3c 	bl	1a00056a <PUERTAcORREDIZA_CERRANDO_react>
			break;
1a0008f2:	e7ba      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			PUERTAcORREDIZA_ABRIENDO_react(handle, bool_true);
1a0008f4:	2101      	movs	r1, #1
1a0008f6:	4620      	mov	r0, r4
1a0008f8:	f7ff fe83 	bl	1a000602 <PUERTAcORREDIZA_ABRIENDO_react>
			break;
1a0008fc:	e7b5      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			PUERTAcORREDIZA_ABIERTO_react(handle, bool_true);
1a0008fe:	2101      	movs	r1, #1
1a000900:	4620      	mov	r0, r4
1a000902:	f7ff fdff 	bl	1a000504 <PUERTAcORREDIZA_ABIERTO_react>
			break;
1a000906:	e7b0      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			LED3_TITILA_r1_ENCENDIDO_react(handle, bool_true);
1a000908:	2101      	movs	r1, #1
1a00090a:	4620      	mov	r0, r4
1a00090c:	f7ff ff29 	bl	1a000762 <LED3_TITILA_r1_ENCENDIDO_react>
			break;
1a000910:	e7ab      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			LED3_TITILA_r1_APAGADO_react(handle, bool_true);
1a000912:	2101      	movs	r1, #1
1a000914:	4620      	mov	r0, r4
1a000916:	f7ff ff6c 	bl	1a0007f2 <LED3_TITILA_r1_APAGADO_react>
			break;
1a00091a:	e7a6      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
			LED3_REPOSO_react(handle, bool_true);
1a00091c:	2101      	movs	r1, #1
1a00091e:	4620      	mov	r0, r4
1a000920:	f7ff ff40 	bl	1a0007a4 <LED3_REPOSO_react>
			break;
1a000924:	e7a1      	b.n	1a00086a <puertaCorrediza_runCycle+0x12>
	clearInEvents(handle);
1a000926:	4620      	mov	r0, r4
1a000928:	f7ff fcea 	bl	1a000300 <clearInEvents>
}
1a00092c:	bd10      	pop	{r4, pc}
1a00092e:	bf00      	nop

1a000930 <puertaCorrediza_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a000930:	301c      	adds	r0, #28
1a000932:	4288      	cmp	r0, r1
1a000934:	dc04      	bgt.n	1a000940 <puertaCorrediza_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(PuertaCorredizaTimeEvents))
1a000936:	3003      	adds	r0, #3
1a000938:	4288      	cmp	r0, r1
1a00093a:	d901      	bls.n	1a000940 <puertaCorrediza_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a00093c:	2301      	movs	r3, #1
1a00093e:	700b      	strb	r3, [r1, #0]
}
1a000940:	4770      	bx	lr

1a000942 <puertaCorredizaIface_raise_evTECXNoOprimido>:
	handle->iface.evTECXNoOprimido_raised = bool_true;
1a000942:	2301      	movs	r3, #1
1a000944:	7303      	strb	r3, [r0, #12]
}
1a000946:	4770      	bx	lr

1a000948 <puertaCorredizaIface_raise_evTECXOprimido>:
	handle->iface.evTECXOprimido_value = value;
1a000948:	6101      	str	r1, [r0, #16]
	handle->iface.evTECXOprimido_raised = bool_true;
1a00094a:	2301      	movs	r3, #1
1a00094c:	7343      	strb	r3, [r0, #13]
}
1a00094e:	4770      	bx	lr

1a000950 <Board_SetupMuxing>:
1a000950:	2300      	movs	r3, #0
1a000952:	2b1c      	cmp	r3, #28
1a000954:	d812      	bhi.n	1a00097c <Board_SetupMuxing+0x2c>
1a000956:	b410      	push	{r4}
1a000958:	4a09      	ldr	r2, [pc, #36]	; (1a000980 <Board_SetupMuxing+0x30>)
1a00095a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00095e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000962:	784a      	ldrb	r2, [r1, #1]
1a000964:	8848      	ldrh	r0, [r1, #2]
1a000966:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00096a:	4906      	ldr	r1, [pc, #24]	; (1a000984 <Board_SetupMuxing+0x34>)
1a00096c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
1a000970:	3301      	adds	r3, #1
1a000972:	2b1c      	cmp	r3, #28
1a000974:	d9f0      	bls.n	1a000958 <Board_SetupMuxing+0x8>
1a000976:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00097a:	4770      	bx	lr
1a00097c:	4770      	bx	lr
1a00097e:	bf00      	nop
1a000980:	1a00204c 	.word	0x1a00204c
1a000984:	40086000 	.word	0x40086000

1a000988 <Board_SetupClocking>:
1a000988:	b510      	push	{r4, lr}
1a00098a:	4a17      	ldr	r2, [pc, #92]	; (1a0009e8 <Board_SetupClocking+0x60>)
1a00098c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000994:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000998:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
1a00099c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0009a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0009a4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009a8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
1a0009ac:	2201      	movs	r2, #1
1a0009ae:	490f      	ldr	r1, [pc, #60]	; (1a0009ec <Board_SetupClocking+0x64>)
1a0009b0:	2006      	movs	r0, #6
1a0009b2:	f000 fd73 	bl	1a00149c <Chip_SetupCoreClock>
1a0009b6:	2400      	movs	r4, #0
1a0009b8:	b14c      	cbz	r4, 1a0009ce <Board_SetupClocking+0x46>
1a0009ba:	4b0b      	ldr	r3, [pc, #44]	; (1a0009e8 <Board_SetupClocking+0x60>)
1a0009bc:	685a      	ldr	r2, [r3, #4]
1a0009be:	f022 020c 	bic.w	r2, r2, #12
1a0009c2:	605a      	str	r2, [r3, #4]
1a0009c4:	685a      	ldr	r2, [r3, #4]
1a0009c6:	f042 0203 	orr.w	r2, r2, #3
1a0009ca:	605a      	str	r2, [r3, #4]
1a0009cc:	bd10      	pop	{r4, pc}
1a0009ce:	4808      	ldr	r0, [pc, #32]	; (1a0009f0 <Board_SetupClocking+0x68>)
1a0009d0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0009d4:	2301      	movs	r3, #1
1a0009d6:	788a      	ldrb	r2, [r1, #2]
1a0009d8:	7849      	ldrb	r1, [r1, #1]
1a0009da:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0009de:	f000 fb0b 	bl	1a000ff8 <Chip_Clock_SetBaseClock>
1a0009e2:	3401      	adds	r4, #1
1a0009e4:	e7e8      	b.n	1a0009b8 <Board_SetupClocking+0x30>
1a0009e6:	bf00      	nop
1a0009e8:	40043000 	.word	0x40043000
1a0009ec:	0c28cb00 	.word	0x0c28cb00
1a0009f0:	1a002048 	.word	0x1a002048

1a0009f4 <Board_SystemInit>:
1a0009f4:	b508      	push	{r3, lr}
1a0009f6:	f7ff ffab 	bl	1a000950 <Board_SetupMuxing>
1a0009fa:	f7ff ffc5 	bl	1a000988 <Board_SetupClocking>
1a0009fe:	bd08      	pop	{r3, pc}

1a000a00 <Board_LED_Init>:
1a000a00:	2200      	movs	r2, #0
1a000a02:	2a05      	cmp	r2, #5
1a000a04:	d819      	bhi.n	1a000a3a <Board_LED_Init+0x3a>
1a000a06:	b470      	push	{r4, r5, r6}
1a000a08:	490c      	ldr	r1, [pc, #48]	; (1a000a3c <Board_LED_Init+0x3c>)
1a000a0a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000a0e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000a12:	784c      	ldrb	r4, [r1, #1]
1a000a14:	4b0a      	ldr	r3, [pc, #40]	; (1a000a40 <Board_LED_Init+0x40>)
1a000a16:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000a1a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000a1e:	2001      	movs	r0, #1
1a000a20:	40a0      	lsls	r0, r4
1a000a22:	4301      	orrs	r1, r0
1a000a24:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
1a000a28:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000a2c:	2100      	movs	r1, #0
1a000a2e:	5519      	strb	r1, [r3, r4]
1a000a30:	3201      	adds	r2, #1
1a000a32:	2a05      	cmp	r2, #5
1a000a34:	d9e8      	bls.n	1a000a08 <Board_LED_Init+0x8>
1a000a36:	bc70      	pop	{r4, r5, r6}
1a000a38:	4770      	bx	lr
1a000a3a:	4770      	bx	lr
1a000a3c:	1a0020cc 	.word	0x1a0020cc
1a000a40:	400f4000 	.word	0x400f4000

1a000a44 <Board_TEC_Init>:
1a000a44:	2300      	movs	r3, #0
1a000a46:	2b03      	cmp	r3, #3
1a000a48:	d816      	bhi.n	1a000a78 <Board_TEC_Init+0x34>
1a000a4a:	b430      	push	{r4, r5}
1a000a4c:	490b      	ldr	r1, [pc, #44]	; (1a000a7c <Board_TEC_Init+0x38>)
1a000a4e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000a52:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a56:	784d      	ldrb	r5, [r1, #1]
1a000a58:	4c09      	ldr	r4, [pc, #36]	; (1a000a80 <Board_TEC_Init+0x3c>)
1a000a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a5e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000a62:	2001      	movs	r0, #1
1a000a64:	40a8      	lsls	r0, r5
1a000a66:	ea21 0100 	bic.w	r1, r1, r0
1a000a6a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
1a000a6e:	3301      	adds	r3, #1
1a000a70:	2b03      	cmp	r3, #3
1a000a72:	d9eb      	bls.n	1a000a4c <Board_TEC_Init+0x8>
1a000a74:	bc30      	pop	{r4, r5}
1a000a76:	4770      	bx	lr
1a000a78:	4770      	bx	lr
1a000a7a:	bf00      	nop
1a000a7c:	1a0020c4 	.word	0x1a0020c4
1a000a80:	400f4000 	.word	0x400f4000

1a000a84 <Board_GPIO_Init>:
1a000a84:	2300      	movs	r3, #0
1a000a86:	2b08      	cmp	r3, #8
1a000a88:	d816      	bhi.n	1a000ab8 <Board_GPIO_Init+0x34>
1a000a8a:	b430      	push	{r4, r5}
1a000a8c:	490b      	ldr	r1, [pc, #44]	; (1a000abc <Board_GPIO_Init+0x38>)
1a000a8e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000a92:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a96:	784d      	ldrb	r5, [r1, #1]
1a000a98:	4c09      	ldr	r4, [pc, #36]	; (1a000ac0 <Board_GPIO_Init+0x3c>)
1a000a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a9e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000aa2:	2001      	movs	r0, #1
1a000aa4:	40a8      	lsls	r0, r5
1a000aa6:	ea21 0100 	bic.w	r1, r1, r0
1a000aaa:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
1a000aae:	3301      	adds	r3, #1
1a000ab0:	2b08      	cmp	r3, #8
1a000ab2:	d9eb      	bls.n	1a000a8c <Board_GPIO_Init+0x8>
1a000ab4:	bc30      	pop	{r4, r5}
1a000ab6:	4770      	bx	lr
1a000ab8:	4770      	bx	lr
1a000aba:	bf00      	nop
1a000abc:	1a0020d8 	.word	0x1a0020d8
1a000ac0:	400f4000 	.word	0x400f4000

1a000ac4 <Board_ADC_Init>:
1a000ac4:	b510      	push	{r4, lr}
1a000ac6:	b082      	sub	sp, #8
1a000ac8:	4c08      	ldr	r4, [pc, #32]	; (1a000aec <Board_ADC_Init+0x28>)
1a000aca:	4669      	mov	r1, sp
1a000acc:	4620      	mov	r0, r4
1a000ace:	f000 fca5 	bl	1a00141c <Chip_ADC_Init>
1a000ad2:	4a07      	ldr	r2, [pc, #28]	; (1a000af0 <Board_ADC_Init+0x2c>)
1a000ad4:	4669      	mov	r1, sp
1a000ad6:	4620      	mov	r0, r4
1a000ad8:	f000 fcc0 	bl	1a00145c <Chip_ADC_SetSampleRate>
1a000adc:	2200      	movs	r2, #0
1a000ade:	4669      	mov	r1, sp
1a000ae0:	4620      	mov	r0, r4
1a000ae2:	f000 fcd4 	bl	1a00148e <Chip_ADC_SetResolution>
1a000ae6:	b002      	add	sp, #8
1a000ae8:	bd10      	pop	{r4, pc}
1a000aea:	bf00      	nop
1a000aec:	400e3000 	.word	0x400e3000
1a000af0:	00061a80 	.word	0x00061a80

1a000af4 <Board_SPI_Init>:
1a000af4:	b510      	push	{r4, lr}
1a000af6:	4c0b      	ldr	r4, [pc, #44]	; (1a000b24 <Board_SPI_Init+0x30>)
1a000af8:	4620      	mov	r0, r4
1a000afa:	f000 fb5f 	bl	1a0011bc <Chip_SSP_Init>
1a000afe:	6863      	ldr	r3, [r4, #4]
1a000b00:	f023 0304 	bic.w	r3, r3, #4
1a000b04:	6063      	str	r3, [r4, #4]
1a000b06:	6823      	ldr	r3, [r4, #0]
1a000b08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000b0c:	f043 0307 	orr.w	r3, r3, #7
1a000b10:	6023      	str	r3, [r4, #0]
1a000b12:	4905      	ldr	r1, [pc, #20]	; (1a000b28 <Board_SPI_Init+0x34>)
1a000b14:	4620      	mov	r0, r4
1a000b16:	f000 fb32 	bl	1a00117e <Chip_SSP_SetBitRate>
1a000b1a:	6863      	ldr	r3, [r4, #4]
1a000b1c:	f043 0302 	orr.w	r3, r3, #2
1a000b20:	6063      	str	r3, [r4, #4]
1a000b22:	bd10      	pop	{r4, pc}
1a000b24:	400c5000 	.word	0x400c5000
1a000b28:	000186a0 	.word	0x000186a0

1a000b2c <Board_I2C_Init>:
1a000b2c:	b508      	push	{r3, lr}
1a000b2e:	2000      	movs	r0, #0
1a000b30:	f000 fc1e 	bl	1a001370 <Chip_I2C_Init>
1a000b34:	4b04      	ldr	r3, [pc, #16]	; (1a000b48 <Board_I2C_Init+0x1c>)
1a000b36:	f640 0208 	movw	r2, #2056	; 0x808
1a000b3a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
1a000b3e:	4903      	ldr	r1, [pc, #12]	; (1a000b4c <Board_I2C_Init+0x20>)
1a000b40:	2000      	movs	r0, #0
1a000b42:	f000 fc29 	bl	1a001398 <Chip_I2C_SetClockRate>
1a000b46:	bd08      	pop	{r3, pc}
1a000b48:	40086000 	.word	0x40086000
1a000b4c:	000f4240 	.word	0x000f4240

1a000b50 <Board_Debug_Init>:
1a000b50:	b510      	push	{r4, lr}
1a000b52:	4c07      	ldr	r4, [pc, #28]	; (1a000b70 <Board_Debug_Init+0x20>)
1a000b54:	4620      	mov	r0, r4
1a000b56:	f000 fb63 	bl	1a001220 <Chip_UART_Init>
1a000b5a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000b5e:	4620      	mov	r0, r4
1a000b60:	f000 fb88 	bl	1a001274 <Chip_UART_SetBaudFDR>
1a000b64:	2303      	movs	r3, #3
1a000b66:	60e3      	str	r3, [r4, #12]
1a000b68:	2301      	movs	r3, #1
1a000b6a:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000b6c:	bd10      	pop	{r4, pc}
1a000b6e:	bf00      	nop
1a000b70:	400c1000 	.word	0x400c1000

1a000b74 <Board_Init>:
1a000b74:	b508      	push	{r3, lr}
1a000b76:	f7ff ffeb 	bl	1a000b50 <Board_Debug_Init>
1a000b7a:	4809      	ldr	r0, [pc, #36]	; (1a000ba0 <Board_Init+0x2c>)
1a000b7c:	f000 f812 	bl	1a000ba4 <Chip_GPIO_Init>
1a000b80:	f7ff ff80 	bl	1a000a84 <Board_GPIO_Init>
1a000b84:	f7ff ff9e 	bl	1a000ac4 <Board_ADC_Init>
1a000b88:	f7ff ffb4 	bl	1a000af4 <Board_SPI_Init>
1a000b8c:	f7ff ffce 	bl	1a000b2c <Board_I2C_Init>
1a000b90:	f7ff ff36 	bl	1a000a00 <Board_LED_Init>
1a000b94:	f7ff ff56 	bl	1a000a44 <Board_TEC_Init>
1a000b98:	f000 f806 	bl	1a000ba8 <SystemCoreClockUpdate>
1a000b9c:	bd08      	pop	{r3, pc}
1a000b9e:	bf00      	nop
1a000ba0:	400f4000 	.word	0x400f4000

1a000ba4 <Chip_GPIO_Init>:
1a000ba4:	4770      	bx	lr
1a000ba6:	Address 0x1a000ba6 is out of bounds.


1a000ba8 <SystemCoreClockUpdate>:
1a000ba8:	b508      	push	{r3, lr}
1a000baa:	2069      	movs	r0, #105	; 0x69
1a000bac:	f000 faa2 	bl	1a0010f4 <Chip_Clock_GetRate>
1a000bb0:	4b01      	ldr	r3, [pc, #4]	; (1a000bb8 <SystemCoreClockUpdate+0x10>)
1a000bb2:	6018      	str	r0, [r3, #0]
1a000bb4:	bd08      	pop	{r3, pc}
1a000bb6:	bf00      	nop
1a000bb8:	1000008c 	.word	0x1000008c

1a000bbc <pll_calc_divs>:
1a000bbc:	b4f0      	push	{r4, r5, r6, r7}
1a000bbe:	680b      	ldr	r3, [r1, #0]
1a000bc0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000bc4:	d002      	beq.n	1a000bcc <pll_calc_divs+0x10>
1a000bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000bca:	600b      	str	r3, [r1, #0]
1a000bcc:	4607      	mov	r7, r0
1a000bce:	2501      	movs	r5, #1
1a000bd0:	e03a      	b.n	1a000c48 <pll_calc_divs+0x8c>
1a000bd2:	694b      	ldr	r3, [r1, #20]
1a000bd4:	fb03 f302 	mul.w	r3, r3, r2
1a000bd8:	fbb3 f3f5 	udiv	r3, r3, r5
1a000bdc:	e01c      	b.n	1a000c18 <pll_calc_divs+0x5c>
1a000bde:	461c      	mov	r4, r3
1a000be0:	ebb0 0c04 	subs.w	ip, r0, r4
1a000be4:	d427      	bmi.n	1a000c36 <pll_calc_divs+0x7a>
1a000be6:	4567      	cmp	r7, ip
1a000be8:	d906      	bls.n	1a000bf8 <pll_calc_divs+0x3c>
1a000bea:	608d      	str	r5, [r1, #8]
1a000bec:	1c77      	adds	r7, r6, #1
1a000bee:	60cf      	str	r7, [r1, #12]
1a000bf0:	610a      	str	r2, [r1, #16]
1a000bf2:	618c      	str	r4, [r1, #24]
1a000bf4:	61cb      	str	r3, [r1, #28]
1a000bf6:	4667      	mov	r7, ip
1a000bf8:	3201      	adds	r2, #1
1a000bfa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000bfe:	dc1d      	bgt.n	1a000c3c <pll_calc_divs+0x80>
1a000c00:	680c      	ldr	r4, [r1, #0]
1a000c02:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000c06:	d0e4      	beq.n	1a000bd2 <pll_calc_divs+0x16>
1a000c08:	1c73      	adds	r3, r6, #1
1a000c0a:	fa02 fc03 	lsl.w	ip, r2, r3
1a000c0e:	694b      	ldr	r3, [r1, #20]
1a000c10:	fb03 f30c 	mul.w	r3, r3, ip
1a000c14:	fbb3 f3f5 	udiv	r3, r3, r5
1a000c18:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000c54 <pll_calc_divs+0x98>
1a000c1c:	4563      	cmp	r3, ip
1a000c1e:	d9eb      	bls.n	1a000bf8 <pll_calc_divs+0x3c>
1a000c20:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000c58 <pll_calc_divs+0x9c>
1a000c24:	4563      	cmp	r3, ip
1a000c26:	d809      	bhi.n	1a000c3c <pll_calc_divs+0x80>
1a000c28:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000c2c:	d1d7      	bne.n	1a000bde <pll_calc_divs+0x22>
1a000c2e:	1c74      	adds	r4, r6, #1
1a000c30:	fa23 f404 	lsr.w	r4, r3, r4
1a000c34:	e7d4      	b.n	1a000be0 <pll_calc_divs+0x24>
1a000c36:	f1cc 0c00 	rsb	ip, ip, #0
1a000c3a:	e7d4      	b.n	1a000be6 <pll_calc_divs+0x2a>
1a000c3c:	3601      	adds	r6, #1
1a000c3e:	2e03      	cmp	r6, #3
1a000c40:	dc01      	bgt.n	1a000c46 <pll_calc_divs+0x8a>
1a000c42:	2201      	movs	r2, #1
1a000c44:	e7d9      	b.n	1a000bfa <pll_calc_divs+0x3e>
1a000c46:	3501      	adds	r5, #1
1a000c48:	2d04      	cmp	r5, #4
1a000c4a:	dc01      	bgt.n	1a000c50 <pll_calc_divs+0x94>
1a000c4c:	2600      	movs	r6, #0
1a000c4e:	e7f6      	b.n	1a000c3e <pll_calc_divs+0x82>
1a000c50:	bcf0      	pop	{r4, r5, r6, r7}
1a000c52:	4770      	bx	lr
1a000c54:	094c5eff 	.word	0x094c5eff
1a000c58:	1312d000 	.word	0x1312d000

1a000c5c <pll_get_frac>:
1a000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c5e:	b099      	sub	sp, #100	; 0x64
1a000c60:	4605      	mov	r5, r0
1a000c62:	460c      	mov	r4, r1
1a000c64:	225c      	movs	r2, #92	; 0x5c
1a000c66:	2100      	movs	r1, #0
1a000c68:	a801      	add	r0, sp, #4
1a000c6a:	f001 f9e5 	bl	1a002038 <memset>
1a000c6e:	2380      	movs	r3, #128	; 0x80
1a000c70:	9300      	str	r3, [sp, #0]
1a000c72:	6963      	ldr	r3, [r4, #20]
1a000c74:	9305      	str	r3, [sp, #20]
1a000c76:	7923      	ldrb	r3, [r4, #4]
1a000c78:	f88d 3004 	strb.w	r3, [sp, #4]
1a000c7c:	4669      	mov	r1, sp
1a000c7e:	4628      	mov	r0, r5
1a000c80:	f7ff ff9c 	bl	1a000bbc <pll_calc_divs>
1a000c84:	9b06      	ldr	r3, [sp, #24]
1a000c86:	42ab      	cmp	r3, r5
1a000c88:	d027      	beq.n	1a000cda <pll_get_frac+0x7e>
1a000c8a:	1aeb      	subs	r3, r5, r3
1a000c8c:	d42e      	bmi.n	1a000cec <pll_get_frac+0x90>
1a000c8e:	461e      	mov	r6, r3
1a000c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000c96:	9310      	str	r3, [sp, #64]	; 0x40
1a000c98:	6963      	ldr	r3, [r4, #20]
1a000c9a:	9315      	str	r3, [sp, #84]	; 0x54
1a000c9c:	7923      	ldrb	r3, [r4, #4]
1a000c9e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
1a000ca2:	a910      	add	r1, sp, #64	; 0x40
1a000ca4:	4628      	mov	r0, r5
1a000ca6:	f7ff ff89 	bl	1a000bbc <pll_calc_divs>
1a000caa:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000cac:	42ab      	cmp	r3, r5
1a000cae:	d01f      	beq.n	1a000cf0 <pll_get_frac+0x94>
1a000cb0:	1aeb      	subs	r3, r5, r3
1a000cb2:	d425      	bmi.n	1a000d00 <pll_get_frac+0xa4>
1a000cb4:	461f      	mov	r7, r3
1a000cb6:	4b2b      	ldr	r3, [pc, #172]	; (1a000d64 <pll_get_frac+0x108>)
1a000cb8:	429d      	cmp	r5, r3
1a000cba:	d923      	bls.n	1a000d04 <pll_get_frac+0xa8>
1a000cbc:	980e      	ldr	r0, [sp, #56]	; 0x38
1a000cbe:	1a2d      	subs	r5, r5, r0
1a000cc0:	d433      	bmi.n	1a000d2a <pll_get_frac+0xce>
1a000cc2:	42ae      	cmp	r6, r5
1a000cc4:	dc3b      	bgt.n	1a000d3e <pll_get_frac+0xe2>
1a000cc6:	42be      	cmp	r6, r7
1a000cc8:	dc31      	bgt.n	1a000d2e <pll_get_frac+0xd2>
1a000cca:	466d      	mov	r5, sp
1a000ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cd8:	e006      	b.n	1a000ce8 <pll_get_frac+0x8c>
1a000cda:	466d      	mov	r5, sp
1a000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ce0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ce8:	b019      	add	sp, #100	; 0x64
1a000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000cec:	425b      	negs	r3, r3
1a000cee:	e7ce      	b.n	1a000c8e <pll_get_frac+0x32>
1a000cf0:	ad10      	add	r5, sp, #64	; 0x40
1a000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000cf6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000cfe:	e7f3      	b.n	1a000ce8 <pll_get_frac+0x8c>
1a000d00:	425b      	negs	r3, r3
1a000d02:	e7d7      	b.n	1a000cb4 <pll_get_frac+0x58>
1a000d04:	2340      	movs	r3, #64	; 0x40
1a000d06:	9308      	str	r3, [sp, #32]
1a000d08:	6963      	ldr	r3, [r4, #20]
1a000d0a:	930d      	str	r3, [sp, #52]	; 0x34
1a000d0c:	a908      	add	r1, sp, #32
1a000d0e:	4628      	mov	r0, r5
1a000d10:	f7ff ff54 	bl	1a000bbc <pll_calc_divs>
1a000d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000d16:	42ab      	cmp	r3, r5
1a000d18:	d1d0      	bne.n	1a000cbc <pll_get_frac+0x60>
1a000d1a:	ad08      	add	r5, sp, #32
1a000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d28:	e7de      	b.n	1a000ce8 <pll_get_frac+0x8c>
1a000d2a:	426d      	negs	r5, r5
1a000d2c:	e7c9      	b.n	1a000cc2 <pll_get_frac+0x66>
1a000d2e:	ad10      	add	r5, sp, #64	; 0x40
1a000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d3c:	e7d4      	b.n	1a000ce8 <pll_get_frac+0x8c>
1a000d3e:	42af      	cmp	r7, r5
1a000d40:	db07      	blt.n	1a000d52 <pll_get_frac+0xf6>
1a000d42:	ad08      	add	r5, sp, #32
1a000d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d50:	e7ca      	b.n	1a000ce8 <pll_get_frac+0x8c>
1a000d52:	ad10      	add	r5, sp, #64	; 0x40
1a000d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d60:	e7c2      	b.n	1a000ce8 <pll_get_frac+0x8c>
1a000d62:	bf00      	nop
1a000d64:	068e7780 	.word	0x068e7780

1a000d68 <Chip_Clock_FindBaseClock>:
1a000d68:	b430      	push	{r4, r5}
1a000d6a:	4605      	mov	r5, r0
1a000d6c:	2300      	movs	r3, #0
1a000d6e:	201c      	movs	r0, #28
1a000d70:	e000      	b.n	1a000d74 <Chip_Clock_FindBaseClock+0xc>
1a000d72:	3301      	adds	r3, #1
1a000d74:	281c      	cmp	r0, #28
1a000d76:	d117      	bne.n	1a000da8 <Chip_Clock_FindBaseClock+0x40>
1a000d78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d7c:	490b      	ldr	r1, [pc, #44]	; (1a000dac <Chip_Clock_FindBaseClock+0x44>)
1a000d7e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
1a000d82:	7911      	ldrb	r1, [r2, #4]
1a000d84:	4281      	cmp	r1, r0
1a000d86:	d00f      	beq.n	1a000da8 <Chip_Clock_FindBaseClock+0x40>
1a000d88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d8c:	4c07      	ldr	r4, [pc, #28]	; (1a000dac <Chip_Clock_FindBaseClock+0x44>)
1a000d8e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000d92:	42aa      	cmp	r2, r5
1a000d94:	d8ed      	bhi.n	1a000d72 <Chip_Clock_FindBaseClock+0xa>
1a000d96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000d9a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
1a000d9e:	8852      	ldrh	r2, [r2, #2]
1a000da0:	42aa      	cmp	r2, r5
1a000da2:	d3e6      	bcc.n	1a000d72 <Chip_Clock_FindBaseClock+0xa>
1a000da4:	4608      	mov	r0, r1
1a000da6:	e7e5      	b.n	1a000d74 <Chip_Clock_FindBaseClock+0xc>
1a000da8:	bc30      	pop	{r4, r5}
1a000daa:	4770      	bx	lr
1a000dac:	1a0020f8 	.word	0x1a0020f8

1a000db0 <Chip_Clock_EnableCrystal>:
1a000db0:	b082      	sub	sp, #8
1a000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000db6:	9301      	str	r3, [sp, #4]
1a000db8:	4a0d      	ldr	r2, [pc, #52]	; (1a000df0 <Chip_Clock_EnableCrystal+0x40>)
1a000dba:	6993      	ldr	r3, [r2, #24]
1a000dbc:	f023 0102 	bic.w	r1, r3, #2
1a000dc0:	6992      	ldr	r2, [r2, #24]
1a000dc2:	428a      	cmp	r2, r1
1a000dc4:	d001      	beq.n	1a000dca <Chip_Clock_EnableCrystal+0x1a>
1a000dc6:	4a0a      	ldr	r2, [pc, #40]	; (1a000df0 <Chip_Clock_EnableCrystal+0x40>)
1a000dc8:	6191      	str	r1, [r2, #24]
1a000dca:	f023 0303 	bic.w	r3, r3, #3
1a000dce:	4a09      	ldr	r2, [pc, #36]	; (1a000df4 <Chip_Clock_EnableCrystal+0x44>)
1a000dd0:	6811      	ldr	r1, [r2, #0]
1a000dd2:	4a09      	ldr	r2, [pc, #36]	; (1a000df8 <Chip_Clock_EnableCrystal+0x48>)
1a000dd4:	4291      	cmp	r1, r2
1a000dd6:	d901      	bls.n	1a000ddc <Chip_Clock_EnableCrystal+0x2c>
1a000dd8:	f043 0304 	orr.w	r3, r3, #4
1a000ddc:	4a04      	ldr	r2, [pc, #16]	; (1a000df0 <Chip_Clock_EnableCrystal+0x40>)
1a000dde:	6193      	str	r3, [r2, #24]
1a000de0:	9b01      	ldr	r3, [sp, #4]
1a000de2:	1e5a      	subs	r2, r3, #1
1a000de4:	9201      	str	r2, [sp, #4]
1a000de6:	2b00      	cmp	r3, #0
1a000de8:	d1fa      	bne.n	1a000de0 <Chip_Clock_EnableCrystal+0x30>
1a000dea:	b002      	add	sp, #8
1a000dec:	4770      	bx	lr
1a000dee:	bf00      	nop
1a000df0:	40050000 	.word	0x40050000
1a000df4:	1a0020ec 	.word	0x1a0020ec
1a000df8:	01312cff 	.word	0x01312cff

1a000dfc <Chip_Clock_GetDividerSource>:
1a000dfc:	3012      	adds	r0, #18
1a000dfe:	4b05      	ldr	r3, [pc, #20]	; (1a000e14 <Chip_Clock_GetDividerSource+0x18>)
1a000e00:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
1a000e04:	f010 0f01 	tst.w	r0, #1
1a000e08:	d102      	bne.n	1a000e10 <Chip_Clock_GetDividerSource+0x14>
1a000e0a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e0e:	4770      	bx	lr
1a000e10:	2011      	movs	r0, #17
1a000e12:	4770      	bx	lr
1a000e14:	40050000 	.word	0x40050000

1a000e18 <Chip_Clock_GetDividerDivisor>:
1a000e18:	f100 0212 	add.w	r2, r0, #18
1a000e1c:	4b03      	ldr	r3, [pc, #12]	; (1a000e2c <Chip_Clock_GetDividerDivisor+0x14>)
1a000e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000e22:	4b03      	ldr	r3, [pc, #12]	; (1a000e30 <Chip_Clock_GetDividerDivisor+0x18>)
1a000e24:	5c18      	ldrb	r0, [r3, r0]
1a000e26:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000e2a:	4770      	bx	lr
1a000e2c:	40050000 	.word	0x40050000
1a000e30:	1a0020f0 	.word	0x1a0020f0

1a000e34 <Chip_Clock_GetClockInputHz>:
1a000e34:	b508      	push	{r3, lr}
1a000e36:	2810      	cmp	r0, #16
1a000e38:	d80a      	bhi.n	1a000e50 <Chip_Clock_GetClockInputHz+0x1c>
1a000e3a:	e8df f000 	tbb	[pc, r0]
1a000e3e:	0b44      	.short	0x0b44
1a000e40:	0921180d 	.word	0x0921180d
1a000e44:	2d2a2724 	.word	0x2d2a2724
1a000e48:	34300909 	.word	0x34300909
1a000e4c:	3c38      	.short	0x3c38
1a000e4e:	40          	.byte	0x40
1a000e4f:	00          	.byte	0x00
1a000e50:	2000      	movs	r0, #0
1a000e52:	bd08      	pop	{r3, pc}
1a000e54:	481e      	ldr	r0, [pc, #120]	; (1a000ed0 <Chip_Clock_GetClockInputHz+0x9c>)
1a000e56:	e7fc      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e58:	4b1e      	ldr	r3, [pc, #120]	; (1a000ed4 <Chip_Clock_GetClockInputHz+0xa0>)
1a000e5a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000e5e:	f003 0307 	and.w	r3, r3, #7
1a000e62:	2b04      	cmp	r3, #4
1a000e64:	d001      	beq.n	1a000e6a <Chip_Clock_GetClockInputHz+0x36>
1a000e66:	481c      	ldr	r0, [pc, #112]	; (1a000ed8 <Chip_Clock_GetClockInputHz+0xa4>)
1a000e68:	e7f3      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e6a:	2000      	movs	r0, #0
1a000e6c:	e7f1      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e6e:	4b19      	ldr	r3, [pc, #100]	; (1a000ed4 <Chip_Clock_GetClockInputHz+0xa0>)
1a000e70:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000e74:	f003 0307 	and.w	r3, r3, #7
1a000e78:	2b04      	cmp	r3, #4
1a000e7a:	d027      	beq.n	1a000ecc <Chip_Clock_GetClockInputHz+0x98>
1a000e7c:	4816      	ldr	r0, [pc, #88]	; (1a000ed8 <Chip_Clock_GetClockInputHz+0xa4>)
1a000e7e:	e7e8      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e80:	4b16      	ldr	r3, [pc, #88]	; (1a000edc <Chip_Clock_GetClockInputHz+0xa8>)
1a000e82:	6818      	ldr	r0, [r3, #0]
1a000e84:	e7e5      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e86:	4b16      	ldr	r3, [pc, #88]	; (1a000ee0 <Chip_Clock_GetClockInputHz+0xac>)
1a000e88:	6818      	ldr	r0, [r3, #0]
1a000e8a:	e7e2      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e8c:	4b15      	ldr	r3, [pc, #84]	; (1a000ee4 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e8e:	6818      	ldr	r0, [r3, #0]
1a000e90:	e7df      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e92:	4b14      	ldr	r3, [pc, #80]	; (1a000ee4 <Chip_Clock_GetClockInputHz+0xb0>)
1a000e94:	6858      	ldr	r0, [r3, #4]
1a000e96:	e7dc      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e98:	f000 f868 	bl	1a000f6c <Chip_Clock_GetMainPLLHz>
1a000e9c:	e7d9      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000e9e:	2100      	movs	r1, #0
1a000ea0:	f000 f898 	bl	1a000fd4 <Chip_Clock_GetDivRate>
1a000ea4:	e7d5      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000ea6:	2101      	movs	r1, #1
1a000ea8:	f000 f894 	bl	1a000fd4 <Chip_Clock_GetDivRate>
1a000eac:	e7d1      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000eae:	2102      	movs	r1, #2
1a000eb0:	f000 f890 	bl	1a000fd4 <Chip_Clock_GetDivRate>
1a000eb4:	e7cd      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000eb6:	2103      	movs	r1, #3
1a000eb8:	f000 f88c 	bl	1a000fd4 <Chip_Clock_GetDivRate>
1a000ebc:	e7c9      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000ebe:	2104      	movs	r1, #4
1a000ec0:	f000 f888 	bl	1a000fd4 <Chip_Clock_GetDivRate>
1a000ec4:	e7c5      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000ec6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000eca:	e7c2      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000ecc:	4806      	ldr	r0, [pc, #24]	; (1a000ee8 <Chip_Clock_GetClockInputHz+0xb4>)
1a000ece:	e7c0      	b.n	1a000e52 <Chip_Clock_GetClockInputHz+0x1e>
1a000ed0:	00b71b00 	.word	0x00b71b00
1a000ed4:	40043000 	.word	0x40043000
1a000ed8:	017d7840 	.word	0x017d7840
1a000edc:	1a0020c0 	.word	0x1a0020c0
1a000ee0:	1a0020ec 	.word	0x1a0020ec
1a000ee4:	10000048 	.word	0x10000048
1a000ee8:	02faf080 	.word	0x02faf080

1a000eec <Chip_Clock_CalcMainPLLValue>:
1a000eec:	b538      	push	{r3, r4, r5, lr}
1a000eee:	4605      	mov	r5, r0
1a000ef0:	460c      	mov	r4, r1
1a000ef2:	7908      	ldrb	r0, [r1, #4]
1a000ef4:	f7ff ff9e 	bl	1a000e34 <Chip_Clock_GetClockInputHz>
1a000ef8:	6160      	str	r0, [r4, #20]
1a000efa:	4b19      	ldr	r3, [pc, #100]	; (1a000f60 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000efc:	442b      	add	r3, r5
1a000efe:	4a19      	ldr	r2, [pc, #100]	; (1a000f64 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000f00:	4293      	cmp	r3, r2
1a000f02:	d821      	bhi.n	1a000f48 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000f04:	b318      	cbz	r0, 1a000f4e <Chip_Clock_CalcMainPLLValue+0x62>
1a000f06:	2380      	movs	r3, #128	; 0x80
1a000f08:	6023      	str	r3, [r4, #0]
1a000f0a:	2300      	movs	r3, #0
1a000f0c:	60a3      	str	r3, [r4, #8]
1a000f0e:	60e3      	str	r3, [r4, #12]
1a000f10:	fbb5 f3f0 	udiv	r3, r5, r0
1a000f14:	6123      	str	r3, [r4, #16]
1a000f16:	4a14      	ldr	r2, [pc, #80]	; (1a000f68 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000f18:	4295      	cmp	r5, r2
1a000f1a:	d903      	bls.n	1a000f24 <Chip_Clock_CalcMainPLLValue+0x38>
1a000f1c:	fb03 f000 	mul.w	r0, r3, r0
1a000f20:	42a8      	cmp	r0, r5
1a000f22:	d007      	beq.n	1a000f34 <Chip_Clock_CalcMainPLLValue+0x48>
1a000f24:	4621      	mov	r1, r4
1a000f26:	4628      	mov	r0, r5
1a000f28:	f7ff fe98 	bl	1a000c5c <pll_get_frac>
1a000f2c:	68a3      	ldr	r3, [r4, #8]
1a000f2e:	b18b      	cbz	r3, 1a000f54 <Chip_Clock_CalcMainPLLValue+0x68>
1a000f30:	3b01      	subs	r3, #1
1a000f32:	60a3      	str	r3, [r4, #8]
1a000f34:	6923      	ldr	r3, [r4, #16]
1a000f36:	b183      	cbz	r3, 1a000f5a <Chip_Clock_CalcMainPLLValue+0x6e>
1a000f38:	68e2      	ldr	r2, [r4, #12]
1a000f3a:	b10a      	cbz	r2, 1a000f40 <Chip_Clock_CalcMainPLLValue+0x54>
1a000f3c:	3a01      	subs	r2, #1
1a000f3e:	60e2      	str	r2, [r4, #12]
1a000f40:	3b01      	subs	r3, #1
1a000f42:	6123      	str	r3, [r4, #16]
1a000f44:	2000      	movs	r0, #0
1a000f46:	bd38      	pop	{r3, r4, r5, pc}
1a000f48:	f04f 30ff 	mov.w	r0, #4294967295
1a000f4c:	e7fb      	b.n	1a000f46 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f4e:	f04f 30ff 	mov.w	r0, #4294967295
1a000f52:	e7f8      	b.n	1a000f46 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f54:	f04f 30ff 	mov.w	r0, #4294967295
1a000f58:	e7f5      	b.n	1a000f46 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f5a:	f04f 30ff 	mov.w	r0, #4294967295
1a000f5e:	e7f2      	b.n	1a000f46 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000f60:	ff6b3a10 	.word	0xff6b3a10
1a000f64:	0b940510 	.word	0x0b940510
1a000f68:	094c5eff 	.word	0x094c5eff

1a000f6c <Chip_Clock_GetMainPLLHz>:
1a000f6c:	b570      	push	{r4, r5, r6, lr}
1a000f6e:	b082      	sub	sp, #8
1a000f70:	4d16      	ldr	r5, [pc, #88]	; (1a000fcc <Chip_Clock_GetMainPLLHz+0x60>)
1a000f72:	6c6c      	ldr	r4, [r5, #68]	; 0x44
1a000f74:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000f78:	f7ff ff5c 	bl	1a000e34 <Chip_Clock_GetClockInputHz>
1a000f7c:	4606      	mov	r6, r0
1a000f7e:	4a14      	ldr	r2, [pc, #80]	; (1a000fd0 <Chip_Clock_GetMainPLLHz+0x64>)
1a000f80:	9201      	str	r2, [sp, #4]
1a000f82:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000f84:	f010 0001 	ands.w	r0, r0, #1
1a000f88:	d01d      	beq.n	1a000fc6 <Chip_Clock_GetMainPLLHz+0x5a>
1a000f8a:	f3c4 4207 	ubfx	r2, r4, #16, #8
1a000f8e:	f3c4 3101 	ubfx	r1, r4, #12, #2
1a000f92:	f3c4 2501 	ubfx	r5, r4, #8, #2
1a000f96:	f3c4 1080 	ubfx	r0, r4, #6, #1
1a000f9a:	3201      	adds	r2, #1
1a000f9c:	3101      	adds	r1, #1
1a000f9e:	ab02      	add	r3, sp, #8
1a000fa0:	441d      	add	r5, r3
1a000fa2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
1a000fa6:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000faa:	d108      	bne.n	1a000fbe <Chip_Clock_GetMainPLLHz+0x52>
1a000fac:	b938      	cbnz	r0, 1a000fbe <Chip_Clock_GetMainPLLHz+0x52>
1a000fae:	0058      	lsls	r0, r3, #1
1a000fb0:	fbb2 f2f0 	udiv	r2, r2, r0
1a000fb4:	fbb6 f0f1 	udiv	r0, r6, r1
1a000fb8:	fb00 f002 	mul.w	r0, r0, r2
1a000fbc:	e003      	b.n	1a000fc6 <Chip_Clock_GetMainPLLHz+0x5a>
1a000fbe:	fbb6 f0f1 	udiv	r0, r6, r1
1a000fc2:	fb02 f000 	mul.w	r0, r2, r0
1a000fc6:	b002      	add	sp, #8
1a000fc8:	bd70      	pop	{r4, r5, r6, pc}
1a000fca:	bf00      	nop
1a000fcc:	40050000 	.word	0x40050000
1a000fd0:	08040201 	.word	0x08040201

1a000fd4 <Chip_Clock_GetDivRate>:
1a000fd4:	b538      	push	{r3, r4, r5, lr}
1a000fd6:	460c      	mov	r4, r1
1a000fd8:	4608      	mov	r0, r1
1a000fda:	f7ff ff0f 	bl	1a000dfc <Chip_Clock_GetDividerSource>
1a000fde:	4605      	mov	r5, r0
1a000fe0:	4620      	mov	r0, r4
1a000fe2:	f7ff ff19 	bl	1a000e18 <Chip_Clock_GetDividerDivisor>
1a000fe6:	4604      	mov	r4, r0
1a000fe8:	4628      	mov	r0, r5
1a000fea:	f7ff ff23 	bl	1a000e34 <Chip_Clock_GetClockInputHz>
1a000fee:	3401      	adds	r4, #1
1a000ff0:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ff4:	bd38      	pop	{r3, r4, r5, pc}
1a000ff6:	Address 0x1a000ff6 is out of bounds.


1a000ff8 <Chip_Clock_SetBaseClock>:
1a000ff8:	b430      	push	{r4, r5}
1a000ffa:	f100 0416 	add.w	r4, r0, #22
1a000ffe:	00a4      	lsls	r4, r4, #2
1a001000:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001004:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001008:	6864      	ldr	r4, [r4, #4]
1a00100a:	281b      	cmp	r0, #27
1a00100c:	d813      	bhi.n	1a001036 <Chip_Clock_SetBaseClock+0x3e>
1a00100e:	2911      	cmp	r1, #17
1a001010:	d01a      	beq.n	1a001048 <Chip_Clock_SetBaseClock+0x50>
1a001012:	4d0e      	ldr	r5, [pc, #56]	; (1a00104c <Chip_Clock_SetBaseClock+0x54>)
1a001014:	4025      	ands	r5, r4
1a001016:	b10a      	cbz	r2, 1a00101c <Chip_Clock_SetBaseClock+0x24>
1a001018:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
1a00101c:	b10b      	cbz	r3, 1a001022 <Chip_Clock_SetBaseClock+0x2a>
1a00101e:	f045 0501 	orr.w	r5, r5, #1
1a001022:	ea45 6101 	orr.w	r1, r5, r1, lsl #24
1a001026:	3016      	adds	r0, #22
1a001028:	0080      	lsls	r0, r0, #2
1a00102a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00102e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001032:	6041      	str	r1, [r0, #4]
1a001034:	e008      	b.n	1a001048 <Chip_Clock_SetBaseClock+0x50>
1a001036:	f044 0401 	orr.w	r4, r4, #1
1a00103a:	3016      	adds	r0, #22
1a00103c:	0080      	lsls	r0, r0, #2
1a00103e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001042:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001046:	6044      	str	r4, [r0, #4]
1a001048:	bc30      	pop	{r4, r5}
1a00104a:	4770      	bx	lr
1a00104c:	e0fff7fe 	.word	0xe0fff7fe

1a001050 <Chip_Clock_GetBaseClock>:
1a001050:	281b      	cmp	r0, #27
1a001052:	d80d      	bhi.n	1a001070 <Chip_Clock_GetBaseClock+0x20>
1a001054:	f100 0316 	add.w	r3, r0, #22
1a001058:	009b      	lsls	r3, r3, #2
1a00105a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a00105e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a001062:	6858      	ldr	r0, [r3, #4]
1a001064:	f010 0f01 	tst.w	r0, #1
1a001068:	d104      	bne.n	1a001074 <Chip_Clock_GetBaseClock+0x24>
1a00106a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00106e:	4770      	bx	lr
1a001070:	2011      	movs	r0, #17
1a001072:	4770      	bx	lr
1a001074:	2011      	movs	r0, #17
1a001076:	4770      	bx	lr

1a001078 <Chip_Clock_GetBaseClocktHz>:
1a001078:	b508      	push	{r3, lr}
1a00107a:	f7ff ffe9 	bl	1a001050 <Chip_Clock_GetBaseClock>
1a00107e:	f7ff fed9 	bl	1a000e34 <Chip_Clock_GetClockInputHz>
1a001082:	bd08      	pop	{r3, pc}

1a001084 <Chip_Clock_EnableOpts>:
1a001084:	b971      	cbnz	r1, 1a0010a4 <Chip_Clock_EnableOpts+0x20>
1a001086:	2101      	movs	r1, #1
1a001088:	b10a      	cbz	r2, 1a00108e <Chip_Clock_EnableOpts+0xa>
1a00108a:	f041 0104 	orr.w	r1, r1, #4
1a00108e:	2b02      	cmp	r3, #2
1a001090:	d00a      	beq.n	1a0010a8 <Chip_Clock_EnableOpts+0x24>
1a001092:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001096:	d30a      	bcc.n	1a0010ae <Chip_Clock_EnableOpts+0x2a>
1a001098:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00109c:	4b06      	ldr	r3, [pc, #24]	; (1a0010b8 <Chip_Clock_EnableOpts+0x34>)
1a00109e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0010a2:	4770      	bx	lr
1a0010a4:	2103      	movs	r1, #3
1a0010a6:	e7ef      	b.n	1a001088 <Chip_Clock_EnableOpts+0x4>
1a0010a8:	f041 0120 	orr.w	r1, r1, #32
1a0010ac:	e7f1      	b.n	1a001092 <Chip_Clock_EnableOpts+0xe>
1a0010ae:	3020      	adds	r0, #32
1a0010b0:	4b02      	ldr	r3, [pc, #8]	; (1a0010bc <Chip_Clock_EnableOpts+0x38>)
1a0010b2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0010b6:	4770      	bx	lr
1a0010b8:	40052000 	.word	0x40052000
1a0010bc:	40051000 	.word	0x40051000

1a0010c0 <Chip_Clock_Enable>:
1a0010c0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0010c4:	d309      	bcc.n	1a0010da <Chip_Clock_Enable+0x1a>
1a0010c6:	4a09      	ldr	r2, [pc, #36]	; (1a0010ec <Chip_Clock_Enable+0x2c>)
1a0010c8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0010cc:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0010d0:	f043 0301 	orr.w	r3, r3, #1
1a0010d4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0010d8:	4770      	bx	lr
1a0010da:	4a05      	ldr	r2, [pc, #20]	; (1a0010f0 <Chip_Clock_Enable+0x30>)
1a0010dc:	3020      	adds	r0, #32
1a0010de:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0010e2:	f043 0301 	orr.w	r3, r3, #1
1a0010e6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0010ea:	4770      	bx	lr
1a0010ec:	40052000 	.word	0x40052000
1a0010f0:	40051000 	.word	0x40051000

1a0010f4 <Chip_Clock_GetRate>:
1a0010f4:	b510      	push	{r4, lr}
1a0010f6:	4603      	mov	r3, r0
1a0010f8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0010fc:	d308      	bcc.n	1a001110 <Chip_Clock_GetRate+0x1c>
1a0010fe:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a001102:	490d      	ldr	r1, [pc, #52]	; (1a001138 <Chip_Clock_GetRate+0x44>)
1a001104:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a001108:	f014 0001 	ands.w	r0, r4, #1
1a00110c:	d106      	bne.n	1a00111c <Chip_Clock_GetRate+0x28>
1a00110e:	bd10      	pop	{r4, pc}
1a001110:	f100 0220 	add.w	r2, r0, #32
1a001114:	4909      	ldr	r1, [pc, #36]	; (1a00113c <Chip_Clock_GetRate+0x48>)
1a001116:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a00111a:	e7f5      	b.n	1a001108 <Chip_Clock_GetRate+0x14>
1a00111c:	4618      	mov	r0, r3
1a00111e:	f7ff fe23 	bl	1a000d68 <Chip_Clock_FindBaseClock>
1a001122:	f7ff ffa9 	bl	1a001078 <Chip_Clock_GetBaseClocktHz>
1a001126:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00112a:	d103      	bne.n	1a001134 <Chip_Clock_GetRate+0x40>
1a00112c:	2301      	movs	r3, #1
1a00112e:	fbb0 f0f3 	udiv	r0, r0, r3
1a001132:	e7ec      	b.n	1a00110e <Chip_Clock_GetRate+0x1a>
1a001134:	2302      	movs	r3, #2
1a001136:	e7fa      	b.n	1a00112e <Chip_Clock_GetRate+0x3a>
1a001138:	40052000 	.word	0x40052000
1a00113c:	40051000 	.word	0x40051000

1a001140 <Chip_SSP_GetClockIndex>:
1a001140:	4b03      	ldr	r3, [pc, #12]	; (1a001150 <Chip_SSP_GetClockIndex+0x10>)
1a001142:	4298      	cmp	r0, r3
1a001144:	d001      	beq.n	1a00114a <Chip_SSP_GetClockIndex+0xa>
1a001146:	2083      	movs	r0, #131	; 0x83
1a001148:	4770      	bx	lr
1a00114a:	20a5      	movs	r0, #165	; 0xa5
1a00114c:	4770      	bx	lr
1a00114e:	bf00      	nop
1a001150:	400c5000 	.word	0x400c5000

1a001154 <Chip_SSP_GetPeriphClockIndex>:
1a001154:	4b04      	ldr	r3, [pc, #16]	; (1a001168 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001156:	4298      	cmp	r0, r3
1a001158:	d002      	beq.n	1a001160 <Chip_SSP_GetPeriphClockIndex+0xc>
1a00115a:	f240 2002 	movw	r0, #514	; 0x202
1a00115e:	4770      	bx	lr
1a001160:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001164:	4770      	bx	lr
1a001166:	bf00      	nop
1a001168:	400c5000 	.word	0x400c5000

1a00116c <Chip_SSP_SetClockRate>:
1a00116c:	6803      	ldr	r3, [r0, #0]
1a00116e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1a001172:	0209      	lsls	r1, r1, #8
1a001174:	b289      	uxth	r1, r1
1a001176:	4319      	orrs	r1, r3
1a001178:	6001      	str	r1, [r0, #0]
1a00117a:	6102      	str	r2, [r0, #16]
1a00117c:	4770      	bx	lr

1a00117e <Chip_SSP_SetBitRate>:
1a00117e:	b570      	push	{r4, r5, r6, lr}
1a001180:	4606      	mov	r6, r0
1a001182:	460c      	mov	r4, r1
1a001184:	f7ff ffe6 	bl	1a001154 <Chip_SSP_GetPeriphClockIndex>
1a001188:	f7ff ffb4 	bl	1a0010f4 <Chip_Clock_GetRate>
1a00118c:	2202      	movs	r2, #2
1a00118e:	f04f 33ff 	mov.w	r3, #4294967295
1a001192:	2100      	movs	r1, #0
1a001194:	e000      	b.n	1a001198 <Chip_SSP_SetBitRate+0x1a>
1a001196:	4629      	mov	r1, r5
1a001198:	42a3      	cmp	r3, r4
1a00119a:	d90b      	bls.n	1a0011b4 <Chip_SSP_SetBitRate+0x36>
1a00119c:	1c4d      	adds	r5, r1, #1
1a00119e:	fb01 2302 	mla	r3, r1, r2, r2
1a0011a2:	fbb0 f3f3 	udiv	r3, r0, r3
1a0011a6:	429c      	cmp	r4, r3
1a0011a8:	d2f6      	bcs.n	1a001198 <Chip_SSP_SetBitRate+0x1a>
1a0011aa:	2dff      	cmp	r5, #255	; 0xff
1a0011ac:	d9f3      	bls.n	1a001196 <Chip_SSP_SetBitRate+0x18>
1a0011ae:	3202      	adds	r2, #2
1a0011b0:	2100      	movs	r1, #0
1a0011b2:	e7f1      	b.n	1a001198 <Chip_SSP_SetBitRate+0x1a>
1a0011b4:	4630      	mov	r0, r6
1a0011b6:	f7ff ffd9 	bl	1a00116c <Chip_SSP_SetClockRate>
1a0011ba:	bd70      	pop	{r4, r5, r6, pc}

1a0011bc <Chip_SSP_Init>:
1a0011bc:	b510      	push	{r4, lr}
1a0011be:	4604      	mov	r4, r0
1a0011c0:	f7ff ffbe 	bl	1a001140 <Chip_SSP_GetClockIndex>
1a0011c4:	f7ff ff7c 	bl	1a0010c0 <Chip_Clock_Enable>
1a0011c8:	4620      	mov	r0, r4
1a0011ca:	f7ff ffc3 	bl	1a001154 <Chip_SSP_GetPeriphClockIndex>
1a0011ce:	f7ff ff77 	bl	1a0010c0 <Chip_Clock_Enable>
1a0011d2:	6863      	ldr	r3, [r4, #4]
1a0011d4:	f023 0304 	bic.w	r3, r3, #4
1a0011d8:	6063      	str	r3, [r4, #4]
1a0011da:	6823      	ldr	r3, [r4, #0]
1a0011dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0011e0:	f043 0307 	orr.w	r3, r3, #7
1a0011e4:	6023      	str	r3, [r4, #0]
1a0011e6:	4902      	ldr	r1, [pc, #8]	; (1a0011f0 <Chip_SSP_Init+0x34>)
1a0011e8:	4620      	mov	r0, r4
1a0011ea:	f7ff ffc8 	bl	1a00117e <Chip_SSP_SetBitRate>
1a0011ee:	bd10      	pop	{r4, pc}
1a0011f0:	000186a0 	.word	0x000186a0

1a0011f4 <Chip_UART_GetIndex>:
1a0011f4:	4b09      	ldr	r3, [pc, #36]	; (1a00121c <Chip_UART_GetIndex+0x28>)
1a0011f6:	4298      	cmp	r0, r3
1a0011f8:	d00b      	beq.n	1a001212 <Chip_UART_GetIndex+0x1e>
1a0011fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0011fe:	4298      	cmp	r0, r3
1a001200:	d009      	beq.n	1a001216 <Chip_UART_GetIndex+0x22>
1a001202:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001206:	4298      	cmp	r0, r3
1a001208:	d001      	beq.n	1a00120e <Chip_UART_GetIndex+0x1a>
1a00120a:	2000      	movs	r0, #0
1a00120c:	4770      	bx	lr
1a00120e:	2001      	movs	r0, #1
1a001210:	4770      	bx	lr
1a001212:	2002      	movs	r0, #2
1a001214:	4770      	bx	lr
1a001216:	2003      	movs	r0, #3
1a001218:	4770      	bx	lr
1a00121a:	bf00      	nop
1a00121c:	400c1000 	.word	0x400c1000

1a001220 <Chip_UART_Init>:
1a001220:	b530      	push	{r4, r5, lr}
1a001222:	b083      	sub	sp, #12
1a001224:	4604      	mov	r4, r0
1a001226:	f7ff ffe5 	bl	1a0011f4 <Chip_UART_GetIndex>
1a00122a:	2301      	movs	r3, #1
1a00122c:	461a      	mov	r2, r3
1a00122e:	4619      	mov	r1, r3
1a001230:	4d0e      	ldr	r5, [pc, #56]	; (1a00126c <Chip_UART_Init+0x4c>)
1a001232:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001236:	f7ff ff25 	bl	1a001084 <Chip_Clock_EnableOpts>
1a00123a:	2307      	movs	r3, #7
1a00123c:	60a3      	str	r3, [r4, #8]
1a00123e:	2300      	movs	r3, #0
1a001240:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001242:	6063      	str	r3, [r4, #4]
1a001244:	60e3      	str	r3, [r4, #12]
1a001246:	6223      	str	r3, [r4, #32]
1a001248:	64e3      	str	r3, [r4, #76]	; 0x4c
1a00124a:	6563      	str	r3, [r4, #84]	; 0x54
1a00124c:	6523      	str	r3, [r4, #80]	; 0x50
1a00124e:	4b08      	ldr	r3, [pc, #32]	; (1a001270 <Chip_UART_Init+0x50>)
1a001250:	429c      	cmp	r4, r3
1a001252:	d006      	beq.n	1a001262 <Chip_UART_Init+0x42>
1a001254:	2303      	movs	r3, #3
1a001256:	60e3      	str	r3, [r4, #12]
1a001258:	2310      	movs	r3, #16
1a00125a:	62a3      	str	r3, [r4, #40]	; 0x28
1a00125c:	9b01      	ldr	r3, [sp, #4]
1a00125e:	b003      	add	sp, #12
1a001260:	bd30      	pop	{r4, r5, pc}
1a001262:	2300      	movs	r3, #0
1a001264:	6123      	str	r3, [r4, #16]
1a001266:	69a3      	ldr	r3, [r4, #24]
1a001268:	9301      	str	r3, [sp, #4]
1a00126a:	e7f3      	b.n	1a001254 <Chip_UART_Init+0x34>
1a00126c:	1a00216c 	.word	0x1a00216c
1a001270:	40082000 	.word	0x40082000

1a001274 <Chip_UART_SetBaudFDR>:
1a001274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001278:	b083      	sub	sp, #12
1a00127a:	9001      	str	r0, [sp, #4]
1a00127c:	4688      	mov	r8, r1
1a00127e:	f7ff ffb9 	bl	1a0011f4 <Chip_UART_GetIndex>
1a001282:	4b32      	ldr	r3, [pc, #200]	; (1a00134c <Chip_UART_SetBaudFDR+0xd8>)
1a001284:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001288:	f7ff ff34 	bl	1a0010f4 <Chip_Clock_GetRate>
1a00128c:	4606      	mov	r6, r0
1a00128e:	f04f 37ff 	mov.w	r7, #4294967295
1a001292:	2401      	movs	r4, #1
1a001294:	f04f 0b00 	mov.w	fp, #0
1a001298:	46a2      	mov	sl, r4
1a00129a:	46d9      	mov	r9, fp
1a00129c:	e02a      	b.n	1a0012f4 <Chip_UART_SetBaudFDR+0x80>
1a00129e:	4242      	negs	r2, r0
1a0012a0:	1c4b      	adds	r3, r1, #1
1a0012a2:	e017      	b.n	1a0012d4 <Chip_UART_SetBaudFDR+0x60>
1a0012a4:	b30a      	cbz	r2, 1a0012ea <Chip_UART_SetBaudFDR+0x76>
1a0012a6:	4617      	mov	r7, r2
1a0012a8:	46ab      	mov	fp, r5
1a0012aa:	46a2      	mov	sl, r4
1a0012ac:	4699      	mov	r9, r3
1a0012ae:	3501      	adds	r5, #1
1a0012b0:	42ac      	cmp	r4, r5
1a0012b2:	d91e      	bls.n	1a0012f2 <Chip_UART_SetBaudFDR+0x7e>
1a0012b4:	0933      	lsrs	r3, r6, #4
1a0012b6:	0730      	lsls	r0, r6, #28
1a0012b8:	fba4 0100 	umull	r0, r1, r4, r0
1a0012bc:	fb04 1103 	mla	r1, r4, r3, r1
1a0012c0:	1962      	adds	r2, r4, r5
1a0012c2:	fb08 f202 	mul.w	r2, r8, r2
1a0012c6:	2300      	movs	r3, #0
1a0012c8:	f000 fd16 	bl	1a001cf8 <__aeabi_uldivmod>
1a0012cc:	4602      	mov	r2, r0
1a0012ce:	460b      	mov	r3, r1
1a0012d0:	2800      	cmp	r0, #0
1a0012d2:	dbe4      	blt.n	1a00129e <Chip_UART_SetBaudFDR+0x2a>
1a0012d4:	4297      	cmp	r7, r2
1a0012d6:	d3ea      	bcc.n	1a0012ae <Chip_UART_SetBaudFDR+0x3a>
1a0012d8:	2b00      	cmp	r3, #0
1a0012da:	d0e8      	beq.n	1a0012ae <Chip_UART_SetBaudFDR+0x3a>
1a0012dc:	0c19      	lsrs	r1, r3, #16
1a0012de:	d1e6      	bne.n	1a0012ae <Chip_UART_SetBaudFDR+0x3a>
1a0012e0:	2b02      	cmp	r3, #2
1a0012e2:	d8df      	bhi.n	1a0012a4 <Chip_UART_SetBaudFDR+0x30>
1a0012e4:	2d00      	cmp	r5, #0
1a0012e6:	d0dd      	beq.n	1a0012a4 <Chip_UART_SetBaudFDR+0x30>
1a0012e8:	e7e1      	b.n	1a0012ae <Chip_UART_SetBaudFDR+0x3a>
1a0012ea:	4617      	mov	r7, r2
1a0012ec:	46ab      	mov	fp, r5
1a0012ee:	46a2      	mov	sl, r4
1a0012f0:	4699      	mov	r9, r3
1a0012f2:	3401      	adds	r4, #1
1a0012f4:	b11f      	cbz	r7, 1a0012fe <Chip_UART_SetBaudFDR+0x8a>
1a0012f6:	2c0f      	cmp	r4, #15
1a0012f8:	d801      	bhi.n	1a0012fe <Chip_UART_SetBaudFDR+0x8a>
1a0012fa:	2500      	movs	r5, #0
1a0012fc:	e7d8      	b.n	1a0012b0 <Chip_UART_SetBaudFDR+0x3c>
1a0012fe:	f1b9 0f00 	cmp.w	r9, #0
1a001302:	d01e      	beq.n	1a001342 <Chip_UART_SetBaudFDR+0xce>
1a001304:	9a01      	ldr	r2, [sp, #4]
1a001306:	4611      	mov	r1, r2
1a001308:	68d3      	ldr	r3, [r2, #12]
1a00130a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00130e:	60d3      	str	r3, [r2, #12]
1a001310:	fa5f f389 	uxtb.w	r3, r9
1a001314:	6013      	str	r3, [r2, #0]
1a001316:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00131a:	6053      	str	r3, [r2, #4]
1a00131c:	68d3      	ldr	r3, [r2, #12]
1a00131e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001322:	60d3      	str	r3, [r2, #12]
1a001324:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001328:	b2db      	uxtb	r3, r3
1a00132a:	f00b 020f 	and.w	r2, fp, #15
1a00132e:	4313      	orrs	r3, r2
1a001330:	628b      	str	r3, [r1, #40]	; 0x28
1a001332:	0933      	lsrs	r3, r6, #4
1a001334:	fb0a f303 	mul.w	r3, sl, r3
1a001338:	44da      	add	sl, fp
1a00133a:	fb09 f90a 	mul.w	r9, r9, sl
1a00133e:	fbb3 f9f9 	udiv	r9, r3, r9
1a001342:	4648      	mov	r0, r9
1a001344:	b003      	add	sp, #12
1a001346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00134a:	bf00      	nop
1a00134c:	1a002164 	.word	0x1a002164

1a001350 <Chip_I2C_EventHandler>:
1a001350:	2901      	cmp	r1, #1
1a001352:	d109      	bne.n	1a001368 <Chip_I2C_EventHandler+0x18>
1a001354:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001358:	4b04      	ldr	r3, [pc, #16]	; (1a00136c <Chip_I2C_EventHandler+0x1c>)
1a00135a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a00135e:	6902      	ldr	r2, [r0, #16]
1a001360:	7d13      	ldrb	r3, [r2, #20]
1a001362:	b2db      	uxtb	r3, r3
1a001364:	2b04      	cmp	r3, #4
1a001366:	d0fb      	beq.n	1a001360 <Chip_I2C_EventHandler+0x10>
1a001368:	4770      	bx	lr
1a00136a:	bf00      	nop
1a00136c:	10000000 	.word	0x10000000

1a001370 <Chip_I2C_Init>:
1a001370:	b570      	push	{r4, r5, r6, lr}
1a001372:	4604      	mov	r4, r0
1a001374:	4e07      	ldr	r6, [pc, #28]	; (1a001394 <Chip_I2C_Init+0x24>)
1a001376:	00c5      	lsls	r5, r0, #3
1a001378:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a00137c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a001380:	8898      	ldrh	r0, [r3, #4]
1a001382:	f7ff fe9d 	bl	1a0010c0 <Chip_Clock_Enable>
1a001386:	1b2c      	subs	r4, r5, r4
1a001388:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
1a00138c:	226c      	movs	r2, #108	; 0x6c
1a00138e:	619a      	str	r2, [r3, #24]
1a001390:	bd70      	pop	{r4, r5, r6, pc}
1a001392:	bf00      	nop
1a001394:	10000000 	.word	0x10000000

1a001398 <Chip_I2C_SetClockRate>:
1a001398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00139c:	4604      	mov	r4, r0
1a00139e:	4688      	mov	r8, r1
1a0013a0:	4d0b      	ldr	r5, [pc, #44]	; (1a0013d0 <Chip_I2C_SetClockRate+0x38>)
1a0013a2:	00c6      	lsls	r6, r0, #3
1a0013a4:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0013a8:	009f      	lsls	r7, r3, #2
1a0013aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a0013ae:	8898      	ldrh	r0, [r3, #4]
1a0013b0:	f7ff fea0 	bl	1a0010f4 <Chip_Clock_GetRate>
1a0013b4:	fbb0 f1f8 	udiv	r1, r0, r8
1a0013b8:	59eb      	ldr	r3, [r5, r7]
1a0013ba:	084a      	lsrs	r2, r1, #1
1a0013bc:	611a      	str	r2, [r3, #16]
1a0013be:	1b34      	subs	r4, r6, r4
1a0013c0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1a0013c4:	6918      	ldr	r0, [r3, #16]
1a0013c6:	1a09      	subs	r1, r1, r0
1a0013c8:	6159      	str	r1, [r3, #20]
1a0013ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0013ce:	bf00      	nop
1a0013d0:	10000000 	.word	0x10000000

1a0013d4 <Chip_ADC_GetClockIndex>:
1a0013d4:	4b03      	ldr	r3, [pc, #12]	; (1a0013e4 <Chip_ADC_GetClockIndex+0x10>)
1a0013d6:	4298      	cmp	r0, r3
1a0013d8:	d001      	beq.n	1a0013de <Chip_ADC_GetClockIndex+0xa>
1a0013da:	2003      	movs	r0, #3
1a0013dc:	4770      	bx	lr
1a0013de:	2004      	movs	r0, #4
1a0013e0:	4770      	bx	lr
1a0013e2:	bf00      	nop
1a0013e4:	400e4000 	.word	0x400e4000

1a0013e8 <getClkDiv>:
1a0013e8:	b570      	push	{r4, r5, r6, lr}
1a0013ea:	460d      	mov	r5, r1
1a0013ec:	4614      	mov	r4, r2
1a0013ee:	461e      	mov	r6, r3
1a0013f0:	f7ff fff0 	bl	1a0013d4 <Chip_ADC_GetClockIndex>
1a0013f4:	f7ff fe7e 	bl	1a0010f4 <Chip_Clock_GetRate>
1a0013f8:	b155      	cbz	r5, 1a001410 <getClkDiv+0x28>
1a0013fa:	fb04 f406 	mul.w	r4, r4, r6
1a0013fe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001402:	0064      	lsls	r4, r4, #1
1a001404:	fbb0 f0f4 	udiv	r0, r0, r4
1a001408:	b2c0      	uxtb	r0, r0
1a00140a:	3801      	subs	r0, #1
1a00140c:	b2c0      	uxtb	r0, r0
1a00140e:	bd70      	pop	{r4, r5, r6, pc}
1a001410:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001414:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001418:	e7f1      	b.n	1a0013fe <getClkDiv+0x16>
1a00141a:	Address 0x1a00141a is out of bounds.


1a00141c <Chip_ADC_Init>:
1a00141c:	b538      	push	{r3, r4, r5, lr}
1a00141e:	4605      	mov	r5, r0
1a001420:	460c      	mov	r4, r1
1a001422:	f7ff ffd7 	bl	1a0013d4 <Chip_ADC_GetClockIndex>
1a001426:	2301      	movs	r3, #1
1a001428:	461a      	mov	r2, r3
1a00142a:	4619      	mov	r1, r3
1a00142c:	f7ff fe2a 	bl	1a001084 <Chip_Clock_EnableOpts>
1a001430:	2100      	movs	r1, #0
1a001432:	60e9      	str	r1, [r5, #12]
1a001434:	4a08      	ldr	r2, [pc, #32]	; (1a001458 <Chip_ADC_Init+0x3c>)
1a001436:	6022      	str	r2, [r4, #0]
1a001438:	7121      	strb	r1, [r4, #4]
1a00143a:	7161      	strb	r1, [r4, #5]
1a00143c:	230b      	movs	r3, #11
1a00143e:	4628      	mov	r0, r5
1a001440:	f7ff ffd2 	bl	1a0013e8 <getClkDiv>
1a001444:	0200      	lsls	r0, r0, #8
1a001446:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
1a00144a:	7923      	ldrb	r3, [r4, #4]
1a00144c:	045b      	lsls	r3, r3, #17
1a00144e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001452:	4303      	orrs	r3, r0
1a001454:	602b      	str	r3, [r5, #0]
1a001456:	bd38      	pop	{r3, r4, r5, pc}
1a001458:	00061a80 	.word	0x00061a80

1a00145c <Chip_ADC_SetSampleRate>:
1a00145c:	b570      	push	{r4, r5, r6, lr}
1a00145e:	4605      	mov	r5, r0
1a001460:	460e      	mov	r6, r1
1a001462:	6804      	ldr	r4, [r0, #0]
1a001464:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001468:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
1a00146c:	600a      	str	r2, [r1, #0]
1a00146e:	790b      	ldrb	r3, [r1, #4]
1a001470:	f1c3 030b 	rsb	r3, r3, #11
1a001474:	b2db      	uxtb	r3, r3
1a001476:	7949      	ldrb	r1, [r1, #5]
1a001478:	f7ff ffb6 	bl	1a0013e8 <getClkDiv>
1a00147c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
1a001480:	7933      	ldrb	r3, [r6, #4]
1a001482:	045b      	lsls	r3, r3, #17
1a001484:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001488:	4323      	orrs	r3, r4
1a00148a:	602b      	str	r3, [r5, #0]
1a00148c:	bd70      	pop	{r4, r5, r6, pc}

1a00148e <Chip_ADC_SetResolution>:
1a00148e:	b508      	push	{r3, lr}
1a001490:	710a      	strb	r2, [r1, #4]
1a001492:	680a      	ldr	r2, [r1, #0]
1a001494:	f7ff ffe2 	bl	1a00145c <Chip_ADC_SetSampleRate>
1a001498:	bd08      	pop	{r3, pc}
1a00149a:	Address 0x1a00149a is out of bounds.


1a00149c <Chip_SetupCoreClock>:
1a00149c:	b570      	push	{r4, r5, r6, lr}
1a00149e:	b08a      	sub	sp, #40	; 0x28
1a0014a0:	4605      	mov	r5, r0
1a0014a2:	460e      	mov	r6, r1
1a0014a4:	4614      	mov	r4, r2
1a0014a6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0014aa:	9309      	str	r3, [sp, #36]	; 0x24
1a0014ac:	2806      	cmp	r0, #6
1a0014ae:	d018      	beq.n	1a0014e2 <Chip_SetupCoreClock+0x46>
1a0014b0:	2300      	movs	r3, #0
1a0014b2:	2201      	movs	r2, #1
1a0014b4:	4629      	mov	r1, r5
1a0014b6:	2004      	movs	r0, #4
1a0014b8:	f7ff fd9e 	bl	1a000ff8 <Chip_Clock_SetBaseClock>
1a0014bc:	4a4a      	ldr	r2, [pc, #296]	; (1a0015e8 <Chip_SetupCoreClock+0x14c>)
1a0014be:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0014c0:	f043 0301 	orr.w	r3, r3, #1
1a0014c4:	6453      	str	r3, [r2, #68]	; 0x44
1a0014c6:	f88d 5008 	strb.w	r5, [sp, #8]
1a0014ca:	a901      	add	r1, sp, #4
1a0014cc:	4630      	mov	r0, r6
1a0014ce:	f7ff fd0d 	bl	1a000eec <Chip_Clock_CalcMainPLLValue>
1a0014d2:	4b46      	ldr	r3, [pc, #280]	; (1a0015ec <Chip_SetupCoreClock+0x150>)
1a0014d4:	429e      	cmp	r6, r3
1a0014d6:	d916      	bls.n	1a001506 <Chip_SetupCoreClock+0x6a>
1a0014d8:	9b01      	ldr	r3, [sp, #4]
1a0014da:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0014de:	d003      	beq.n	1a0014e8 <Chip_SetupCoreClock+0x4c>
1a0014e0:	e7fe      	b.n	1a0014e0 <Chip_SetupCoreClock+0x44>
1a0014e2:	f7ff fc65 	bl	1a000db0 <Chip_Clock_EnableCrystal>
1a0014e6:	e7e3      	b.n	1a0014b0 <Chip_SetupCoreClock+0x14>
1a0014e8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0014ec:	d005      	beq.n	1a0014fa <Chip_SetupCoreClock+0x5e>
1a0014ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0014f2:	9301      	str	r3, [sp, #4]
1a0014f4:	2500      	movs	r5, #0
1a0014f6:	2601      	movs	r6, #1
1a0014f8:	e007      	b.n	1a00150a <Chip_SetupCoreClock+0x6e>
1a0014fa:	9b04      	ldr	r3, [sp, #16]
1a0014fc:	3301      	adds	r3, #1
1a0014fe:	9304      	str	r3, [sp, #16]
1a001500:	2501      	movs	r5, #1
1a001502:	2600      	movs	r6, #0
1a001504:	e001      	b.n	1a00150a <Chip_SetupCoreClock+0x6e>
1a001506:	2500      	movs	r5, #0
1a001508:	462e      	mov	r6, r5
1a00150a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00150e:	9b01      	ldr	r3, [sp, #4]
1a001510:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001514:	9a05      	ldr	r2, [sp, #20]
1a001516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00151a:	9a03      	ldr	r2, [sp, #12]
1a00151c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001520:	9a04      	ldr	r2, [sp, #16]
1a001522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00152a:	4a2f      	ldr	r2, [pc, #188]	; (1a0015e8 <Chip_SetupCoreClock+0x14c>)
1a00152c:	6453      	str	r3, [r2, #68]	; 0x44
1a00152e:	4b2e      	ldr	r3, [pc, #184]	; (1a0015e8 <Chip_SetupCoreClock+0x14c>)
1a001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001532:	f013 0f01 	tst.w	r3, #1
1a001536:	d0fa      	beq.n	1a00152e <Chip_SetupCoreClock+0x92>
1a001538:	2300      	movs	r3, #0
1a00153a:	2201      	movs	r2, #1
1a00153c:	2109      	movs	r1, #9
1a00153e:	2004      	movs	r0, #4
1a001540:	f7ff fd5a 	bl	1a000ff8 <Chip_Clock_SetBaseClock>
1a001544:	b306      	cbz	r6, 1a001588 <Chip_SetupCoreClock+0xec>
1a001546:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00154a:	9309      	str	r3, [sp, #36]	; 0x24
1a00154c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00154e:	1e5a      	subs	r2, r3, #1
1a001550:	9209      	str	r2, [sp, #36]	; 0x24
1a001552:	2b00      	cmp	r3, #0
1a001554:	d1fa      	bne.n	1a00154c <Chip_SetupCoreClock+0xb0>
1a001556:	9b01      	ldr	r3, [sp, #4]
1a001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00155c:	9301      	str	r3, [sp, #4]
1a00155e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001562:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001566:	9a05      	ldr	r2, [sp, #20]
1a001568:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00156c:	9a03      	ldr	r2, [sp, #12]
1a00156e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001572:	9a04      	ldr	r2, [sp, #16]
1a001574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001578:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00157c:	4a1a      	ldr	r2, [pc, #104]	; (1a0015e8 <Chip_SetupCoreClock+0x14c>)
1a00157e:	6453      	str	r3, [r2, #68]	; 0x44
1a001580:	2c00      	cmp	r4, #0
1a001582:	d12e      	bne.n	1a0015e2 <Chip_SetupCoreClock+0x146>
1a001584:	b00a      	add	sp, #40	; 0x28
1a001586:	bd70      	pop	{r4, r5, r6, pc}
1a001588:	2d00      	cmp	r5, #0
1a00158a:	d0f9      	beq.n	1a001580 <Chip_SetupCoreClock+0xe4>
1a00158c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001590:	9309      	str	r3, [sp, #36]	; 0x24
1a001592:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001594:	1e5a      	subs	r2, r3, #1
1a001596:	9209      	str	r2, [sp, #36]	; 0x24
1a001598:	2b00      	cmp	r3, #0
1a00159a:	d1fa      	bne.n	1a001592 <Chip_SetupCoreClock+0xf6>
1a00159c:	9b04      	ldr	r3, [sp, #16]
1a00159e:	1e5a      	subs	r2, r3, #1
1a0015a0:	9204      	str	r2, [sp, #16]
1a0015a2:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0015a6:	9b01      	ldr	r3, [sp, #4]
1a0015a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0015ac:	9905      	ldr	r1, [sp, #20]
1a0015ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0015b2:	9903      	ldr	r1, [sp, #12]
1a0015b4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0015b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0015bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0015c0:	4a09      	ldr	r2, [pc, #36]	; (1a0015e8 <Chip_SetupCoreClock+0x14c>)
1a0015c2:	6453      	str	r3, [r2, #68]	; 0x44
1a0015c4:	e7dc      	b.n	1a001580 <Chip_SetupCoreClock+0xe4>
1a0015c6:	480a      	ldr	r0, [pc, #40]	; (1a0015f0 <Chip_SetupCoreClock+0x154>)
1a0015c8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0015cc:	78cb      	ldrb	r3, [r1, #3]
1a0015ce:	788a      	ldrb	r2, [r1, #2]
1a0015d0:	7849      	ldrb	r1, [r1, #1]
1a0015d2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0015d6:	f7ff fd0f 	bl	1a000ff8 <Chip_Clock_SetBaseClock>
1a0015da:	3401      	adds	r4, #1
1a0015dc:	2c11      	cmp	r4, #17
1a0015de:	d9f2      	bls.n	1a0015c6 <Chip_SetupCoreClock+0x12a>
1a0015e0:	e7d0      	b.n	1a001584 <Chip_SetupCoreClock+0xe8>
1a0015e2:	2400      	movs	r4, #0
1a0015e4:	e7fa      	b.n	1a0015dc <Chip_SetupCoreClock+0x140>
1a0015e6:	bf00      	nop
1a0015e8:	40050000 	.word	0x40050000
1a0015ec:	068e7780 	.word	0x068e7780
1a0015f0:	1a002174 	.word	0x1a002174

1a0015f4 <SystemInit>:
1a0015f4:	b508      	push	{r3, lr}
1a0015f6:	4a0b      	ldr	r2, [pc, #44]	; (1a001624 <SystemInit+0x30>)
1a0015f8:	4b0b      	ldr	r3, [pc, #44]	; (1a001628 <SystemInit+0x34>)
1a0015fa:	609a      	str	r2, [r3, #8]
1a0015fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001600:	691b      	ldr	r3, [r3, #16]
1a001602:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001606:	2b20      	cmp	r3, #32
1a001608:	d004      	beq.n	1a001614 <SystemInit+0x20>
1a00160a:	f7ff f9f3 	bl	1a0009f4 <Board_SystemInit>
1a00160e:	f7ff fab1 	bl	1a000b74 <Board_Init>
1a001612:	bd08      	pop	{r3, pc}
1a001614:	4a04      	ldr	r2, [pc, #16]	; (1a001628 <SystemInit+0x34>)
1a001616:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00161a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00161e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001622:	e7f2      	b.n	1a00160a <SystemInit+0x16>
1a001624:	1a000000 	.word	0x1a000000
1a001628:	e000ed00 	.word	0xe000ed00

1a00162c <initialise_monitor_handles>:
}
1a00162c:	4770      	bx	lr
1a00162e:	Address 0x1a00162e is out of bounds.


1a001630 <Reset_Handler>:
void Reset_Handler(void) {
1a001630:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001632:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001634:	4b19      	ldr	r3, [pc, #100]	; (1a00169c <Reset_Handler+0x6c>)
1a001636:	4a1a      	ldr	r2, [pc, #104]	; (1a0016a0 <Reset_Handler+0x70>)
1a001638:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00163a:	3304      	adds	r3, #4
1a00163c:	4a19      	ldr	r2, [pc, #100]	; (1a0016a4 <Reset_Handler+0x74>)
1a00163e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001640:	2300      	movs	r3, #0
1a001642:	e005      	b.n	1a001650 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001644:	4a18      	ldr	r2, [pc, #96]	; (1a0016a8 <Reset_Handler+0x78>)
1a001646:	f04f 31ff 	mov.w	r1, #4294967295
1a00164a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00164e:	3301      	adds	r3, #1
1a001650:	2b07      	cmp	r3, #7
1a001652:	d9f7      	bls.n	1a001644 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001654:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a001656:	4b15      	ldr	r3, [pc, #84]	; (1a0016ac <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001658:	e007      	b.n	1a00166a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00165a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00165e:	689a      	ldr	r2, [r3, #8]
1a001660:	6859      	ldr	r1, [r3, #4]
1a001662:	6818      	ldr	r0, [r3, #0]
1a001664:	f7fe fd92 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a001668:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00166a:	4a11      	ldr	r2, [pc, #68]	; (1a0016b0 <Reset_Handler+0x80>)
1a00166c:	4293      	cmp	r3, r2
1a00166e:	d3f4      	bcc.n	1a00165a <Reset_Handler+0x2a>
1a001670:	e006      	b.n	1a001680 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001672:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001674:	6859      	ldr	r1, [r3, #4]
1a001676:	f854 0b08 	ldr.w	r0, [r4], #8
1a00167a:	f7fe fd96 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a00167e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001680:	4a0c      	ldr	r2, [pc, #48]	; (1a0016b4 <Reset_Handler+0x84>)
1a001682:	4293      	cmp	r3, r2
1a001684:	d3f5      	bcc.n	1a001672 <Reset_Handler+0x42>
    SystemInit();
1a001686:	f7ff ffb5 	bl	1a0015f4 <SystemInit>
    __libc_init_array();
1a00168a:	f000 fcb1 	bl	1a001ff0 <__libc_init_array>
    initialise_monitor_handles();
1a00168e:	f7ff ffcd 	bl	1a00162c <initialise_monitor_handles>
    main();
1a001692:	f000 fa4f 	bl	1a001b34 <main>
        __asm__ volatile("wfi");
1a001696:	bf30      	wfi
    while (1) {
1a001698:	e7fd      	b.n	1a001696 <Reset_Handler+0x66>
1a00169a:	bf00      	nop
1a00169c:	40053100 	.word	0x40053100
1a0016a0:	10df1000 	.word	0x10df1000
1a0016a4:	01dff7ff 	.word	0x01dff7ff
1a0016a8:	e000e280 	.word	0xe000e280
1a0016ac:	1a000114 	.word	0x1a000114
1a0016b0:	1a000150 	.word	0x1a000150
1a0016b4:	1a000178 	.word	0x1a000178

1a0016b8 <_fini>:
void _fini(void) {}
1a0016b8:	4770      	bx	lr

1a0016ba <_init>:
void _init(void) {}
1a0016ba:	4770      	bx	lr

1a0016bc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0016bc:	4b04      	ldr	r3, [pc, #16]	; (1a0016d0 <cyclesCounterInit+0x14>)
1a0016be:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0016c0:	4a04      	ldr	r2, [pc, #16]	; (1a0016d4 <cyclesCounterInit+0x18>)
1a0016c2:	6813      	ldr	r3, [r2, #0]
1a0016c4:	f043 0301 	orr.w	r3, r3, #1
1a0016c8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0016ca:	2001      	movs	r0, #1
1a0016cc:	4770      	bx	lr
1a0016ce:	bf00      	nop
1a0016d0:	10000038 	.word	0x10000038
1a0016d4:	e0001000 	.word	0xe0001000

1a0016d8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0016d8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0016da:	4d0b      	ldr	r5, [pc, #44]	; (1a001708 <gpioObtainPinInit+0x30>)
1a0016dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0016e0:	182c      	adds	r4, r5, r0
1a0016e2:	5628      	ldrsb	r0, [r5, r0]
1a0016e4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0016e6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0016ea:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0016ec:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0016f0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0016f2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0016f6:	9b02      	ldr	r3, [sp, #8]
1a0016f8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0016fa:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0016fe:	9b03      	ldr	r3, [sp, #12]
1a001700:	701a      	strb	r2, [r3, #0]
}
1a001702:	bc30      	pop	{r4, r5}
1a001704:	4770      	bx	lr
1a001706:	bf00      	nop
1a001708:	1a0021bc 	.word	0x1a0021bc

1a00170c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00170c:	b570      	push	{r4, r5, r6, lr}
1a00170e:	b084      	sub	sp, #16
1a001710:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001712:	2300      	movs	r3, #0
1a001714:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001718:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00171c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001720:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001724:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001728:	f10d 030b 	add.w	r3, sp, #11
1a00172c:	9301      	str	r3, [sp, #4]
1a00172e:	ab03      	add	r3, sp, #12
1a001730:	9300      	str	r3, [sp, #0]
1a001732:	f10d 030d 	add.w	r3, sp, #13
1a001736:	f10d 020e 	add.w	r2, sp, #14
1a00173a:	f10d 010f 	add.w	r1, sp, #15
1a00173e:	f7ff ffcb 	bl	1a0016d8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001742:	2c05      	cmp	r4, #5
1a001744:	f200 80a5 	bhi.w	1a001892 <gpioInit+0x186>
1a001748:	e8df f004 	tbb	[pc, r4]
1a00174c:	45278109 	.word	0x45278109
1a001750:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001752:	4851      	ldr	r0, [pc, #324]	; (1a001898 <gpioInit+0x18c>)
1a001754:	f7ff fa26 	bl	1a000ba4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001758:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00175a:	b004      	add	sp, #16
1a00175c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00175e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001762:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001766:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00176a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00176e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001772:	494a      	ldr	r1, [pc, #296]	; (1a00189c <gpioInit+0x190>)
1a001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001778:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00177c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001780:	2001      	movs	r0, #1
1a001782:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001786:	4c44      	ldr	r4, [pc, #272]	; (1a001898 <gpioInit+0x18c>)
1a001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00178c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001790:	ea22 0201 	bic.w	r2, r2, r1
1a001794:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001798:	e7df      	b.n	1a00175a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00179a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00179e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017a6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0017aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017ae:	493b      	ldr	r1, [pc, #236]	; (1a00189c <gpioInit+0x190>)
1a0017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0017b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017b8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017bc:	2001      	movs	r0, #1
1a0017be:	fa00 f102 	lsl.w	r1, r0, r2
1a0017c2:	4c35      	ldr	r4, [pc, #212]	; (1a001898 <gpioInit+0x18c>)
1a0017c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0017c8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0017cc:	ea22 0201 	bic.w	r2, r2, r1
1a0017d0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0017d4:	e7c1      	b.n	1a00175a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0017d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017da:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017de:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017e2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0017e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017ea:	492c      	ldr	r1, [pc, #176]	; (1a00189c <gpioInit+0x190>)
1a0017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0017f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017f4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017f8:	2001      	movs	r0, #1
1a0017fa:	fa00 f102 	lsl.w	r1, r0, r2
1a0017fe:	4c26      	ldr	r4, [pc, #152]	; (1a001898 <gpioInit+0x18c>)
1a001800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001804:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001808:	ea22 0201 	bic.w	r2, r2, r1
1a00180c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001810:	e7a3      	b.n	1a00175a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001812:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001816:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00181a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00181e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001822:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001826:	491d      	ldr	r1, [pc, #116]	; (1a00189c <gpioInit+0x190>)
1a001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00182c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001830:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001834:	2001      	movs	r0, #1
1a001836:	fa00 f102 	lsl.w	r1, r0, r2
1a00183a:	4c17      	ldr	r4, [pc, #92]	; (1a001898 <gpioInit+0x18c>)
1a00183c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001840:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001844:	ea22 0201 	bic.w	r2, r2, r1
1a001848:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00184c:	e785      	b.n	1a00175a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00184e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001852:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001856:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00185a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00185e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001862:	490e      	ldr	r1, [pc, #56]	; (1a00189c <gpioInit+0x190>)
1a001864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001868:	f89d 000c 	ldrb.w	r0, [sp, #12]
1a00186c:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a001870:	2201      	movs	r2, #1
1a001872:	408a      	lsls	r2, r1
		pGPIO->DIR[portNum] |= bitValue;
1a001874:	4b08      	ldr	r3, [pc, #32]	; (1a001898 <gpioInit+0x18c>)
1a001876:	f500 6500 	add.w	r5, r0, #2048	; 0x800
1a00187a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00187e:	4332      	orrs	r2, r6
1a001880:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001884:	b2c9      	uxtb	r1, r1
	pGPIO->B[port][pin] = setting;
1a001886:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00188a:	2200      	movs	r2, #0
1a00188c:	545a      	strb	r2, [r3, r1]
   bool_t ret_val     = 1;
1a00188e:	4620      	mov	r0, r4
}
1a001890:	e763      	b.n	1a00175a <gpioInit+0x4e>
   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001892:	2000      	movs	r0, #0
1a001894:	e761      	b.n	1a00175a <gpioInit+0x4e>
1a001896:	bf00      	nop
1a001898:	400f4000 	.word	0x400f4000
1a00189c:	40086000 	.word	0x40086000

1a0018a0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0018a0:	b510      	push	{r4, lr}
1a0018a2:	b084      	sub	sp, #16
1a0018a4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0018a6:	2300      	movs	r3, #0
1a0018a8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0018ac:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0018b0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0018b4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0018b8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0018bc:	f10d 030b 	add.w	r3, sp, #11
1a0018c0:	9301      	str	r3, [sp, #4]
1a0018c2:	ab03      	add	r3, sp, #12
1a0018c4:	9300      	str	r3, [sp, #0]
1a0018c6:	f10d 030d 	add.w	r3, sp, #13
1a0018ca:	f10d 020e 	add.w	r2, sp, #14
1a0018ce:	f10d 010f 	add.w	r1, sp, #15
1a0018d2:	f7ff ff01 	bl	1a0016d8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0018d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0018da:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0018de:	3c00      	subs	r4, #0
1a0018e0:	bf18      	it	ne
1a0018e2:	2401      	movne	r4, #1
	pGPIO->B[port][pin] = setting;
1a0018e4:	015b      	lsls	r3, r3, #5
1a0018e6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0018ea:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0018ee:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0018f0:	2001      	movs	r0, #1
1a0018f2:	b004      	add	sp, #16
1a0018f4:	bd10      	pop	{r4, pc}

1a0018f6 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0018f6:	b500      	push	{lr}
1a0018f8:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0018fa:	2300      	movs	r3, #0
1a0018fc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001900:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001904:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001908:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00190c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001910:	f10d 030b 	add.w	r3, sp, #11
1a001914:	9301      	str	r3, [sp, #4]
1a001916:	ab03      	add	r3, sp, #12
1a001918:	9300      	str	r3, [sp, #0]
1a00191a:	f10d 030d 	add.w	r3, sp, #13
1a00191e:	f10d 020e 	add.w	r2, sp, #14
1a001922:	f10d 010f 	add.w	r1, sp, #15
1a001926:	f7ff fed7 	bl	1a0016d8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00192a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00192e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001932:	015b      	lsls	r3, r3, #5
1a001934:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001938:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00193c:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a00193e:	3800      	subs	r0, #0
1a001940:	bf18      	it	ne
1a001942:	2001      	movne	r0, #1
1a001944:	b005      	add	sp, #20
1a001946:	f85d fb04 	ldr.w	pc, [sp], #4
1a00194a:	Address 0x1a00194a is out of bounds.


1a00194c <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a00194c:	b130      	cbz	r0, 1a00195c <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a00194e:	4a05      	ldr	r2, [pc, #20]	; (1a001964 <tickCallbackSet+0x18>)
1a001950:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a001952:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a001954:	b121      	cbz	r1, 1a001960 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a001956:	4b04      	ldr	r3, [pc, #16]	; (1a001968 <tickCallbackSet+0x1c>)
1a001958:	6019      	str	r1, [r3, #0]
1a00195a:	4770      	bx	lr
         retVal = FALSE;
1a00195c:	2000      	movs	r0, #0
1a00195e:	e7f9      	b.n	1a001954 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a001960:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a001962:	4770      	bx	lr
1a001964:	10000060 	.word	0x10000060
1a001968:	10000050 	.word	0x10000050

1a00196c <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a00196c:	b118      	cbz	r0, 1a001976 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00196e:	4b04      	ldr	r3, [pc, #16]	; (1a001980 <tickPowerSet+0x14>)
1a001970:	2207      	movs	r2, #7
1a001972:	601a      	str	r2, [r3, #0]
1a001974:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001976:	4b02      	ldr	r3, [pc, #8]	; (1a001980 <tickPowerSet+0x14>)
1a001978:	2200      	movs	r2, #0
1a00197a:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a00197c:	4770      	bx	lr
1a00197e:	bf00      	nop
1a001980:	e000e010 	.word	0xe000e010

1a001984 <tickInit>:
{
1a001984:	b538      	push	{r3, r4, r5, lr}
1a001986:	4602      	mov	r2, r0
1a001988:	460b      	mov	r3, r1
      if( tickRateMSvalue == 0 ) {
1a00198a:	ea52 0103 	orrs.w	r1, r2, r3
1a00198e:	d028      	beq.n	1a0019e2 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001990:	f110 34ff 	adds.w	r4, r0, #4294967295
1a001994:	f143 35ff 	adc.w	r5, r3, #4294967295
1a001998:	2d00      	cmp	r5, #0
1a00199a:	bf08      	it	eq
1a00199c:	2c32      	cmpeq	r4, #50	; 0x32
1a00199e:	d225      	bcs.n	1a0019ec <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0019a0:	4913      	ldr	r1, [pc, #76]	; (1a0019f0 <tickInit+0x6c>)
1a0019a2:	e9c1 2300 	strd	r2, r3, [r1]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0019a6:	4913      	ldr	r1, [pc, #76]	; (1a0019f4 <tickInit+0x70>)
1a0019a8:	680c      	ldr	r4, [r1, #0]
1a0019aa:	fba4 0100 	umull	r0, r1, r4, r0
1a0019ae:	fb04 1103 	mla	r1, r4, r3, r1
1a0019b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0019b6:	2300      	movs	r3, #0
1a0019b8:	f000 f99e 	bl	1a001cf8 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0019bc:	3801      	subs	r0, #1
1a0019be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0019c2:	d209      	bcs.n	1a0019d8 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0019c4:	4b0c      	ldr	r3, [pc, #48]	; (1a0019f8 <tickInit+0x74>)
1a0019c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0019c8:	4a0c      	ldr	r2, [pc, #48]	; (1a0019fc <tickInit+0x78>)
1a0019ca:	21e0      	movs	r1, #224	; 0xe0
1a0019cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0019d0:	2200      	movs	r2, #0
1a0019d2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0019d4:	2207      	movs	r2, #7
1a0019d6:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0019d8:	2001      	movs	r0, #1
1a0019da:	f7ff ffc7 	bl	1a00196c <tickPowerSet>
      bool_t ret_val = 1;
1a0019de:	2001      	movs	r0, #1
1a0019e0:	e005      	b.n	1a0019ee <tickInit+0x6a>
         tickPowerSet( OFF );
1a0019e2:	2000      	movs	r0, #0
1a0019e4:	f7ff ffc2 	bl	1a00196c <tickPowerSet>
         ret_val = 0;
1a0019e8:	2000      	movs	r0, #0
1a0019ea:	e000      	b.n	1a0019ee <tickInit+0x6a>
            ret_val = 0;
1a0019ec:	2000      	movs	r0, #0
}
1a0019ee:	bd38      	pop	{r3, r4, r5, pc}
1a0019f0:	10000040 	.word	0x10000040
1a0019f4:	1000008c 	.word	0x1000008c
1a0019f8:	e000e010 	.word	0xe000e010
1a0019fc:	e000ed00 	.word	0xe000ed00

1a001a00 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001a00:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001a02:	4a07      	ldr	r2, [pc, #28]	; (1a001a20 <SysTick_Handler+0x20>)
1a001a04:	6813      	ldr	r3, [r2, #0]
1a001a06:	6851      	ldr	r1, [r2, #4]
1a001a08:	3301      	adds	r3, #1
1a001a0a:	f141 0100 	adc.w	r1, r1, #0
1a001a0e:	6013      	str	r3, [r2, #0]
1a001a10:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001a12:	4b04      	ldr	r3, [pc, #16]	; (1a001a24 <SysTick_Handler+0x24>)
1a001a14:	681b      	ldr	r3, [r3, #0]
1a001a16:	b113      	cbz	r3, 1a001a1e <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001a18:	4a03      	ldr	r2, [pc, #12]	; (1a001a28 <SysTick_Handler+0x28>)
1a001a1a:	6810      	ldr	r0, [r2, #0]
1a001a1c:	4798      	blx	r3
   }
}
1a001a1e:	bd08      	pop	{r3, pc}
1a001a20:	10000058 	.word	0x10000058
1a001a24:	10000060 	.word	0x10000060
1a001a28:	10000050 	.word	0x10000050

1a001a2c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001a2c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001a2e:	4b04      	ldr	r3, [pc, #16]	; (1a001a40 <USB0_IRQHandler+0x14>)
1a001a30:	681b      	ldr	r3, [r3, #0]
1a001a32:	681b      	ldr	r3, [r3, #0]
1a001a34:	68db      	ldr	r3, [r3, #12]
1a001a36:	4a03      	ldr	r2, [pc, #12]	; (1a001a44 <USB0_IRQHandler+0x18>)
1a001a38:	6810      	ldr	r0, [r2, #0]
1a001a3a:	4798      	blx	r3
}
1a001a3c:	bd08      	pop	{r3, pc}
1a001a3e:	bf00      	nop
1a001a40:	10000090 	.word	0x10000090
1a001a44:	10000064 	.word	0x10000064

1a001a48 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001a48:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001a4a:	f7ff f8ad 	bl	1a000ba8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001a4e:	4b1a      	ldr	r3, [pc, #104]	; (1a001ab8 <boardInit+0x70>)
1a001a50:	6818      	ldr	r0, [r3, #0]
1a001a52:	f7ff fe33 	bl	1a0016bc <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001a56:	2001      	movs	r0, #1
1a001a58:	2100      	movs	r1, #0
1a001a5a:	f7ff ff93 	bl	1a001984 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001a5e:	2105      	movs	r1, #5
1a001a60:	2000      	movs	r0, #0
1a001a62:	f7ff fe53 	bl	1a00170c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001a66:	2100      	movs	r1, #0
1a001a68:	2024      	movs	r0, #36	; 0x24
1a001a6a:	f7ff fe4f 	bl	1a00170c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001a6e:	2100      	movs	r1, #0
1a001a70:	2025      	movs	r0, #37	; 0x25
1a001a72:	f7ff fe4b 	bl	1a00170c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001a76:	2100      	movs	r1, #0
1a001a78:	2026      	movs	r0, #38	; 0x26
1a001a7a:	f7ff fe47 	bl	1a00170c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001a7e:	2100      	movs	r1, #0
1a001a80:	2027      	movs	r0, #39	; 0x27
1a001a82:	f7ff fe43 	bl	1a00170c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001a86:	2101      	movs	r1, #1
1a001a88:	2028      	movs	r0, #40	; 0x28
1a001a8a:	f7ff fe3f 	bl	1a00170c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001a8e:	2101      	movs	r1, #1
1a001a90:	2029      	movs	r0, #41	; 0x29
1a001a92:	f7ff fe3b 	bl	1a00170c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001a96:	2101      	movs	r1, #1
1a001a98:	202a      	movs	r0, #42	; 0x2a
1a001a9a:	f7ff fe37 	bl	1a00170c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001a9e:	2101      	movs	r1, #1
1a001aa0:	202b      	movs	r0, #43	; 0x2b
1a001aa2:	f7ff fe33 	bl	1a00170c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001aa6:	2101      	movs	r1, #1
1a001aa8:	202c      	movs	r0, #44	; 0x2c
1a001aaa:	f7ff fe2f 	bl	1a00170c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001aae:	2101      	movs	r1, #1
1a001ab0:	202d      	movs	r0, #45	; 0x2d
1a001ab2:	f7ff fe2b 	bl	1a00170c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001ab6:	bd08      	pop	{r3, pc}
1a001ab8:	1000008c 	.word	0x1000008c

1a001abc <myTickHook>:
 * @return	Nothing
 */
void myTickHook( void *ptr ){

	/* The sysTick Interrupt Handler only set a Flag */
	SysTick_Time_Flag = true;
1a001abc:	4b01      	ldr	r3, [pc, #4]	; (1a001ac4 <myTickHook+0x8>)
1a001abe:	2201      	movs	r2, #1
1a001ac0:	701a      	strb	r2, [r3, #0]
}
1a001ac2:	4770      	bx	lr
1a001ac4:	10000068 	.word	0x10000068

1a001ac8 <puertaCorredizaIface_opLED>:
{
1a001ac8:	b508      	push	{r3, lr}
	gpioWrite( (LEDR + LEDNumber), State );
1a001aca:	b2c8      	uxtb	r0, r1
1a001acc:	3028      	adds	r0, #40	; 0x28
1a001ace:	4611      	mov	r1, r2
1a001ad0:	b2c0      	uxtb	r0, r0
1a001ad2:	f7ff fee5 	bl	1a0018a0 <gpioWrite>
}
1a001ad6:	bd08      	pop	{r3, pc}

1a001ad8 <puertaCorrediza_setTimer>:
{
1a001ad8:	b500      	push	{lr}
1a001ada:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a001adc:	9300      	str	r3, [sp, #0]
1a001ade:	4613      	mov	r3, r2
1a001ae0:	460a      	mov	r2, r1
1a001ae2:	2103      	movs	r1, #3
1a001ae4:	4802      	ldr	r0, [pc, #8]	; (1a001af0 <puertaCorrediza_setTimer+0x18>)
1a001ae6:	f000 f889 	bl	1a001bfc <SetNewTimerTick>
}
1a001aea:	b003      	add	sp, #12
1a001aec:	f85d fb04 	ldr.w	pc, [sp], #4
1a001af0:	10000094 	.word	0x10000094

1a001af4 <puertaCorrediza_unsetTimer>:
{
1a001af4:	b508      	push	{r3, lr}
1a001af6:	460a      	mov	r2, r1
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a001af8:	2103      	movs	r1, #3
1a001afa:	4802      	ldr	r0, [pc, #8]	; (1a001b04 <puertaCorrediza_unsetTimer+0x10>)
1a001afc:	f000 f898 	bl	1a001c30 <UnsetTimerTick>
}
1a001b00:	bd08      	pop	{r3, pc}
1a001b02:	bf00      	nop
1a001b04:	10000094 	.word	0x10000094

1a001b08 <Buttons_GetStatus_>:

/*! This function scan all EDU-CIAA-NXP buttons (TEC1, TEC2, TEC3 and TEC4),
 *  and return ID of pressed button (TEC1 or TEC2 or TEC3 or TEC4)
 *  or false if no button was pressed.
 */
uint32_t Buttons_GetStatus_(void) {
1a001b08:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = false;
	uint32_t idx;

	for (idx = 0; idx < 4; ++idx) {
1a001b0a:	2400      	movs	r4, #0
	uint8_t ret = false;
1a001b0c:	4625      	mov	r5, r4
	for (idx = 0; idx < 4; ++idx) {
1a001b0e:	e000      	b.n	1a001b12 <Buttons_GetStatus_+0xa>
1a001b10:	3401      	adds	r4, #1
1a001b12:	2c03      	cmp	r4, #3
1a001b14:	d80b      	bhi.n	1a001b2e <Buttons_GetStatus_+0x26>
		if (gpioRead( TEC1 + idx ) == 0)
1a001b16:	b2e0      	uxtb	r0, r4
1a001b18:	3024      	adds	r0, #36	; 0x24
1a001b1a:	b2c0      	uxtb	r0, r0
1a001b1c:	f7ff feeb 	bl	1a0018f6 <gpioRead>
1a001b20:	2800      	cmp	r0, #0
1a001b22:	d1f5      	bne.n	1a001b10 <Buttons_GetStatus_+0x8>
			ret |= 1 << idx;
1a001b24:	2301      	movs	r3, #1
1a001b26:	40a3      	lsls	r3, r4
1a001b28:	431d      	orrs	r5, r3
1a001b2a:	b2ed      	uxtb	r5, r5
1a001b2c:	e7f0      	b.n	1a001b10 <Buttons_GetStatus_+0x8>
	}
	return ret;
}
1a001b2e:	4628      	mov	r0, r5
1a001b30:	bd38      	pop	{r3, r4, r5, pc}

1a001b32 <puertaCorredizaIface_opMotor>:

void puertaCorredizaIface_opMotor(PuertaCorrediza* handle,sc_integer Action )
{
	return;
}
1a001b32:	4770      	bx	lr

1a001b34 <main>:
/**
 * @brief	main routine for statechart example: EDU-CIAA-NXP - Application
 * @return	Function should not exit.
 */
int main(void)
{
1a001b34:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;

	uint32_t BUTTON_Status;

	/* Generic Initialization */
	boardConfig();
1a001b36:	f7ff ff87 	bl	1a001a48 <boardInit>

	/* Init Ticks counter => TICKRATE_MS */
	tickConfig( TICKRATE_MS );
1a001b3a:	2001      	movs	r0, #1
1a001b3c:	2100      	movs	r1, #0
1a001b3e:	f7ff ff21 	bl	1a001984 <tickInit>

	/* Add Tick Hook */
	tickCallbackSet( myTickHook, (void*)NULL );
1a001b42:	2100      	movs	r1, #0
1a001b44:	4820      	ldr	r0, [pc, #128]	; (1a001bc8 <main+0x94>)
1a001b46:	f7ff ff01 	bl	1a00194c <tickCallbackSet>

	/* Init Timer Ticks */
	InitTimerTicks( ticks, NOF_TIMERS );
1a001b4a:	2103      	movs	r1, #3
1a001b4c:	481f      	ldr	r0, [pc, #124]	; (1a001bcc <main+0x98>)
1a001b4e:	f000 f843 	bl	1a001bd8 <InitTimerTicks>

	/* Statechart Initialization */
	puertaCorrediza_init( &statechart );
1a001b52:	4c1f      	ldr	r4, [pc, #124]	; (1a001bd0 <main+0x9c>)
1a001b54:	4620      	mov	r0, r4
1a001b56:	f7fe fe61 	bl	1a00081c <puertaCorrediza_init>
	puertaCorrediza_enter( &statechart );
1a001b5a:	4620      	mov	r0, r4
1a001b5c:	f7fe fe6e 	bl	1a00083c <puertaCorrediza_enter>
1a001b60:	e020      	b.n	1a001ba4 <main+0x70>

				/* Then if there are pending events */
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {

					/* Then Raise an Event -> Ticks.evid => OK */
					puertaCorrediza_raiseTimeEvent( &statechart, ticks[i].evid );
1a001b62:	4d1a      	ldr	r5, [pc, #104]	; (1a001bcc <main+0x98>)
1a001b64:	0126      	lsls	r6, r4, #4
1a001b66:	59a9      	ldr	r1, [r5, r6]
1a001b68:	4819      	ldr	r0, [pc, #100]	; (1a001bd0 <main+0x9c>)
1a001b6a:	f7fe fee1 	bl	1a000930 <puertaCorrediza_raiseTimeEvent>

					/* Then Mark as Attached -> Ticks.evid => OK */
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a001b6e:	59aa      	ldr	r2, [r5, r6]
1a001b70:	2103      	movs	r1, #3
1a001b72:	4628      	mov	r0, r5
1a001b74:	f000 f88b 	bl	1a001c8e <MarkAsAttEvent>
			for (i = 0; i < NOF_TIMERS; i++) {
1a001b78:	3401      	adds	r4, #1
1a001b7a:	2c02      	cmp	r4, #2
1a001b7c:	d808      	bhi.n	1a001b90 <main+0x5c>
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a001b7e:	4813      	ldr	r0, [pc, #76]	; (1a001bcc <main+0x98>)
1a001b80:	0123      	lsls	r3, r4, #4
1a001b82:	58c2      	ldr	r2, [r0, r3]
1a001b84:	2103      	movs	r1, #3
1a001b86:	f000 f86e 	bl	1a001c66 <IsPendEvent>
1a001b8a:	2800      	cmp	r0, #0
1a001b8c:	d0f4      	beq.n	1a001b78 <main+0x44>
1a001b8e:	e7e8      	b.n	1a001b62 <main+0x2e>
				}
			}

			/* Then Get status of buttons */
			BUTTON_Status = Buttons_GetStatus_();
1a001b90:	f7ff ffba 	bl	1a001b08 <Buttons_GetStatus_>

			/* Then if there are a pressed button */
			if (BUTTON_Status != 0)
1a001b94:	4601      	mov	r1, r0
1a001b96:	b190      	cbz	r0, 1a001bbe <main+0x8a>

				/* Then Raise an Event -> evTECXOprimodo => OK,
				 * and Value of pressed button -> viTecla */
				puertaCorredizaIface_raise_evTECXOprimido(&statechart, BUTTON_Status);
1a001b98:	480d      	ldr	r0, [pc, #52]	; (1a001bd0 <main+0x9c>)
1a001b9a:	f7fe fed5 	bl	1a000948 <puertaCorredizaIface_raise_evTECXOprimido>
			else
				/* Then else Raise an Event -> evTECXNoOprimido => OK */
				puertaCorredizaIface_raise_evTECXNoOprimido(&statechart);

			/* Then Run an Cycle of Statechart */
			puertaCorrediza_runCycle(&statechart);		// Run Cycle of Statechart
1a001b9e:	480c      	ldr	r0, [pc, #48]	; (1a001bd0 <main+0x9c>)
1a001ba0:	f7fe fe5a 	bl	1a000858 <puertaCorrediza_runCycle>
		__WFI();
1a001ba4:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a001ba6:	4b0b      	ldr	r3, [pc, #44]	; (1a001bd4 <main+0xa0>)
1a001ba8:	781b      	ldrb	r3, [r3, #0]
1a001baa:	2b00      	cmp	r3, #0
1a001bac:	d0fa      	beq.n	1a001ba4 <main+0x70>
			SysTick_Time_Flag = false;
1a001bae:	2400      	movs	r4, #0
1a001bb0:	4b08      	ldr	r3, [pc, #32]	; (1a001bd4 <main+0xa0>)
1a001bb2:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a001bb4:	2103      	movs	r1, #3
1a001bb6:	4805      	ldr	r0, [pc, #20]	; (1a001bcc <main+0x98>)
1a001bb8:	f000 f87c 	bl	1a001cb4 <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a001bbc:	e7dd      	b.n	1a001b7a <main+0x46>
				puertaCorredizaIface_raise_evTECXNoOprimido(&statechart);
1a001bbe:	4804      	ldr	r0, [pc, #16]	; (1a001bd0 <main+0x9c>)
1a001bc0:	f7fe febf 	bl	1a000942 <puertaCorredizaIface_raise_evTECXNoOprimido>
1a001bc4:	e7eb      	b.n	1a001b9e <main+0x6a>
1a001bc6:	bf00      	nop
1a001bc8:	1a001abd 	.word	0x1a001abd
1a001bcc:	10000094 	.word	0x10000094
1a001bd0:	1000006c 	.word	0x1000006c
1a001bd4:	10000068 	.word	0x10000068

1a001bd8 <InitTimerTicks>:
#include "PuertaCorrediza.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a001bd8:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001bda:	2400      	movs	r4, #0
1a001bdc:	428c      	cmp	r4, r1
1a001bde:	d20b      	bcs.n	1a001bf8 <InitTimerTicks+0x20>
		list[i].evid = (sc_eventid)0;
1a001be0:	0125      	lsls	r5, r4, #4
1a001be2:	eb00 1204 	add.w	r2, r0, r4, lsl #4
1a001be6:	2300      	movs	r3, #0
1a001be8:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a001bea:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a001bec:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a001bee:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a001bf0:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a001bf2:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a001bf4:	3401      	adds	r4, #1
1a001bf6:	e7f1      	b.n	1a001bdc <InitTimerTicks+0x4>
	}
}
1a001bf8:	bc30      	pop	{r4, r5}
1a001bfa:	4770      	bx	lr

1a001bfc <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a001bfc:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a001bfe:	2400      	movs	r4, #0
1a001c00:	428c      	cmp	r4, r1
1a001c02:	d212      	bcs.n	1a001c2a <SetNewTimerTick+0x2e>
		if(!list[i].evid) {
1a001c04:	0125      	lsls	r5, r4, #4
1a001c06:	eb00 1604 	add.w	r6, r0, r4, lsl #4
1a001c0a:	5945      	ldr	r5, [r0, r5]
1a001c0c:	b10d      	cbz	r5, 1a001c12 <SetNewTimerTick+0x16>
	for(i = 0; i < len; i++) {
1a001c0e:	3401      	adds	r4, #1
1a001c10:	e7f6      	b.n	1a001c00 <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a001c12:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a001c14:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a001c16:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a001c18:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c1c:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a001c1e:	2301      	movs	r3, #1
1a001c20:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a001c22:	2300      	movs	r3, #0
1a001c24:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a001c26:	4610      	mov	r0, r2
			break;
1a001c28:	e000      	b.n	1a001c2c <SetNewTimerTick+0x30>
	sc_eventid ret = (sc_eventid)0;
1a001c2a:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a001c2c:	bc70      	pop	{r4, r5, r6}
1a001c2e:	4770      	bx	lr

1a001c30 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a001c30:	2300      	movs	r3, #0
1a001c32:	428b      	cmp	r3, r1
1a001c34:	d215      	bcs.n	1a001c62 <UnsetTimerTick+0x32>
{
1a001c36:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001c38:	011c      	lsls	r4, r3, #4
1a001c3a:	eb00 1503 	add.w	r5, r0, r3, lsl #4
1a001c3e:	5904      	ldr	r4, [r0, r4]
1a001c40:	4294      	cmp	r4, r2
1a001c42:	d004      	beq.n	1a001c4e <UnsetTimerTick+0x1e>
	for(i = 0; i < len; i++) {
1a001c44:	3301      	adds	r3, #1
1a001c46:	428b      	cmp	r3, r1
1a001c48:	d3f6      	bcc.n	1a001c38 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a001c4a:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a001c4c:	e007      	b.n	1a001c5e <UnsetTimerTick+0x2e>
			list[i].evid = (sc_eventid)0;
1a001c4e:	2300      	movs	r3, #0
1a001c50:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a001c52:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a001c54:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a001c56:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a001c58:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a001c5a:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a001c5c:	4610      	mov	r0, r2
}
1a001c5e:	bc30      	pop	{r4, r5}
1a001c60:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a001c62:	2000      	movs	r0, #0
}
1a001c64:	4770      	bx	lr

1a001c66 <IsPendEvent>:


sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
1a001c66:	b470      	push	{r4, r5, r6}
1a001c68:	4605      	mov	r5, r0
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a001c6a:	2300      	movs	r3, #0
1a001c6c:	e000      	b.n	1a001c70 <IsPendEvent+0xa>
1a001c6e:	3301      	adds	r3, #1
1a001c70:	428b      	cmp	r3, r1
1a001c72:	d209      	bcs.n	1a001c88 <IsPendEvent+0x22>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a001c74:	011c      	lsls	r4, r3, #4
1a001c76:	eb05 1603 	add.w	r6, r5, r3, lsl #4
1a001c7a:	5928      	ldr	r0, [r5, r4]
1a001c7c:	4290      	cmp	r0, r2
1a001c7e:	d1f6      	bne.n	1a001c6e <IsPendEvent+0x8>
1a001c80:	7bb0      	ldrb	r0, [r6, #14]
1a001c82:	2800      	cmp	r0, #0
1a001c84:	d0f3      	beq.n	1a001c6e <IsPendEvent+0x8>
1a001c86:	e000      	b.n	1a001c8a <IsPendEvent+0x24>
	sc_boolean ret = false;
1a001c88:	2000      	movs	r0, #0
			ret = true;
			break;
		}
	}
	return ret;
}
1a001c8a:	bc70      	pop	{r4, r5, r6}
1a001c8c:	4770      	bx	lr

1a001c8e <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001c8e:	2300      	movs	r3, #0
1a001c90:	428b      	cmp	r3, r1
1a001c92:	d20e      	bcs.n	1a001cb2 <MarkAsAttEvent+0x24>
{
1a001c94:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a001c96:	011c      	lsls	r4, r3, #4
1a001c98:	eb00 1503 	add.w	r5, r0, r3, lsl #4
1a001c9c:	5904      	ldr	r4, [r0, r4]
1a001c9e:	4294      	cmp	r4, r2
1a001ca0:	d003      	beq.n	1a001caa <MarkAsAttEvent+0x1c>
	for(i = 0; i < len; i++) {
1a001ca2:	3301      	adds	r3, #1
1a001ca4:	428b      	cmp	r3, r1
1a001ca6:	d3f6      	bcc.n	1a001c96 <MarkAsAttEvent+0x8>
1a001ca8:	e001      	b.n	1a001cae <MarkAsAttEvent+0x20>
			list[i].evPending = false;
1a001caa:	2300      	movs	r3, #0
1a001cac:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a001cae:	bc30      	pop	{r4, r5}
1a001cb0:	4770      	bx	lr
1a001cb2:	4770      	bx	lr

1a001cb4 <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a001cb4:	2300      	movs	r3, #0
1a001cb6:	428b      	cmp	r3, r1
1a001cb8:	d21d      	bcs.n	1a001cf6 <UpdateTimers+0x42>
{
1a001cba:	b410      	push	{r4}
1a001cbc:	e006      	b.n	1a001ccc <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a001cbe:	2400      	movs	r4, #0
1a001cc0:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a001cc2:	2401      	movs	r4, #1
1a001cc4:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a001cc6:	3301      	adds	r3, #1
1a001cc8:	428b      	cmp	r3, r1
1a001cca:	d211      	bcs.n	1a001cf0 <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a001ccc:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a001cd0:	7b54      	ldrb	r4, [r2, #13]
1a001cd2:	2c00      	cmp	r4, #0
1a001cd4:	d0f7      	beq.n	1a001cc6 <UpdateTimers+0x12>
			if(list[i].count)
1a001cd6:	6894      	ldr	r4, [r2, #8]
1a001cd8:	b10c      	cbz	r4, 1a001cde <UpdateTimers+0x2a>
				list[i].count--;
1a001cda:	3c01      	subs	r4, #1
1a001cdc:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a001cde:	6894      	ldr	r4, [r2, #8]
1a001ce0:	2c00      	cmp	r4, #0
1a001ce2:	d1f0      	bne.n	1a001cc6 <UpdateTimers+0x12>
				if(list[i].periodic)
1a001ce4:	7b14      	ldrb	r4, [r2, #12]
1a001ce6:	2c00      	cmp	r4, #0
1a001ce8:	d0e9      	beq.n	1a001cbe <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a001cea:	6854      	ldr	r4, [r2, #4]
1a001cec:	6094      	str	r4, [r2, #8]
1a001cee:	e7e8      	b.n	1a001cc2 <UpdateTimers+0xe>
			}
		}
	}
}
1a001cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001cf4:	4770      	bx	lr
1a001cf6:	4770      	bx	lr

1a001cf8 <__aeabi_uldivmod>:
1a001cf8:	b953      	cbnz	r3, 1a001d10 <__aeabi_uldivmod+0x18>
1a001cfa:	b94a      	cbnz	r2, 1a001d10 <__aeabi_uldivmod+0x18>
1a001cfc:	2900      	cmp	r1, #0
1a001cfe:	bf08      	it	eq
1a001d00:	2800      	cmpeq	r0, #0
1a001d02:	bf1c      	itt	ne
1a001d04:	f04f 31ff 	movne.w	r1, #4294967295
1a001d08:	f04f 30ff 	movne.w	r0, #4294967295
1a001d0c:	f000 b96e 	b.w	1a001fec <__aeabi_idiv0>
1a001d10:	f1ad 0c08 	sub.w	ip, sp, #8
1a001d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001d18:	f000 f806 	bl	1a001d28 <__udivmoddi4>
1a001d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001d24:	b004      	add	sp, #16
1a001d26:	4770      	bx	lr

1a001d28 <__udivmoddi4>:
1a001d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001d2c:	9d08      	ldr	r5, [sp, #32]
1a001d2e:	4604      	mov	r4, r0
1a001d30:	468c      	mov	ip, r1
1a001d32:	2b00      	cmp	r3, #0
1a001d34:	f040 8083 	bne.w	1a001e3e <__udivmoddi4+0x116>
1a001d38:	428a      	cmp	r2, r1
1a001d3a:	4617      	mov	r7, r2
1a001d3c:	d947      	bls.n	1a001dce <__udivmoddi4+0xa6>
1a001d3e:	fab2 f282 	clz	r2, r2
1a001d42:	b142      	cbz	r2, 1a001d56 <__udivmoddi4+0x2e>
1a001d44:	f1c2 0020 	rsb	r0, r2, #32
1a001d48:	fa24 f000 	lsr.w	r0, r4, r0
1a001d4c:	4091      	lsls	r1, r2
1a001d4e:	4097      	lsls	r7, r2
1a001d50:	ea40 0c01 	orr.w	ip, r0, r1
1a001d54:	4094      	lsls	r4, r2
1a001d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a001d5a:	0c23      	lsrs	r3, r4, #16
1a001d5c:	fbbc f6f8 	udiv	r6, ip, r8
1a001d60:	fa1f fe87 	uxth.w	lr, r7
1a001d64:	fb08 c116 	mls	r1, r8, r6, ip
1a001d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001d6c:	fb06 f10e 	mul.w	r1, r6, lr
1a001d70:	4299      	cmp	r1, r3
1a001d72:	d909      	bls.n	1a001d88 <__udivmoddi4+0x60>
1a001d74:	18fb      	adds	r3, r7, r3
1a001d76:	f106 30ff 	add.w	r0, r6, #4294967295
1a001d7a:	f080 8119 	bcs.w	1a001fb0 <__udivmoddi4+0x288>
1a001d7e:	4299      	cmp	r1, r3
1a001d80:	f240 8116 	bls.w	1a001fb0 <__udivmoddi4+0x288>
1a001d84:	3e02      	subs	r6, #2
1a001d86:	443b      	add	r3, r7
1a001d88:	1a5b      	subs	r3, r3, r1
1a001d8a:	b2a4      	uxth	r4, r4
1a001d8c:	fbb3 f0f8 	udiv	r0, r3, r8
1a001d90:	fb08 3310 	mls	r3, r8, r0, r3
1a001d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001d98:	fb00 fe0e 	mul.w	lr, r0, lr
1a001d9c:	45a6      	cmp	lr, r4
1a001d9e:	d909      	bls.n	1a001db4 <__udivmoddi4+0x8c>
1a001da0:	193c      	adds	r4, r7, r4
1a001da2:	f100 33ff 	add.w	r3, r0, #4294967295
1a001da6:	f080 8105 	bcs.w	1a001fb4 <__udivmoddi4+0x28c>
1a001daa:	45a6      	cmp	lr, r4
1a001dac:	f240 8102 	bls.w	1a001fb4 <__udivmoddi4+0x28c>
1a001db0:	3802      	subs	r0, #2
1a001db2:	443c      	add	r4, r7
1a001db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1a001db8:	eba4 040e 	sub.w	r4, r4, lr
1a001dbc:	2600      	movs	r6, #0
1a001dbe:	b11d      	cbz	r5, 1a001dc8 <__udivmoddi4+0xa0>
1a001dc0:	40d4      	lsrs	r4, r2
1a001dc2:	2300      	movs	r3, #0
1a001dc4:	e9c5 4300 	strd	r4, r3, [r5]
1a001dc8:	4631      	mov	r1, r6
1a001dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001dce:	b902      	cbnz	r2, 1a001dd2 <__udivmoddi4+0xaa>
1a001dd0:	deff      	udf	#255	; 0xff
1a001dd2:	fab2 f282 	clz	r2, r2
1a001dd6:	2a00      	cmp	r2, #0
1a001dd8:	d150      	bne.n	1a001e7c <__udivmoddi4+0x154>
1a001dda:	1bcb      	subs	r3, r1, r7
1a001ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a001de0:	fa1f f887 	uxth.w	r8, r7
1a001de4:	2601      	movs	r6, #1
1a001de6:	fbb3 fcfe 	udiv	ip, r3, lr
1a001dea:	0c21      	lsrs	r1, r4, #16
1a001dec:	fb0e 331c 	mls	r3, lr, ip, r3
1a001df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001df4:	fb08 f30c 	mul.w	r3, r8, ip
1a001df8:	428b      	cmp	r3, r1
1a001dfa:	d907      	bls.n	1a001e0c <__udivmoddi4+0xe4>
1a001dfc:	1879      	adds	r1, r7, r1
1a001dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001e02:	d202      	bcs.n	1a001e0a <__udivmoddi4+0xe2>
1a001e04:	428b      	cmp	r3, r1
1a001e06:	f200 80e9 	bhi.w	1a001fdc <__udivmoddi4+0x2b4>
1a001e0a:	4684      	mov	ip, r0
1a001e0c:	1ac9      	subs	r1, r1, r3
1a001e0e:	b2a3      	uxth	r3, r4
1a001e10:	fbb1 f0fe 	udiv	r0, r1, lr
1a001e14:	fb0e 1110 	mls	r1, lr, r0, r1
1a001e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
1a001e1c:	fb08 f800 	mul.w	r8, r8, r0
1a001e20:	45a0      	cmp	r8, r4
1a001e22:	d907      	bls.n	1a001e34 <__udivmoddi4+0x10c>
1a001e24:	193c      	adds	r4, r7, r4
1a001e26:	f100 33ff 	add.w	r3, r0, #4294967295
1a001e2a:	d202      	bcs.n	1a001e32 <__udivmoddi4+0x10a>
1a001e2c:	45a0      	cmp	r8, r4
1a001e2e:	f200 80d9 	bhi.w	1a001fe4 <__udivmoddi4+0x2bc>
1a001e32:	4618      	mov	r0, r3
1a001e34:	eba4 0408 	sub.w	r4, r4, r8
1a001e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001e3c:	e7bf      	b.n	1a001dbe <__udivmoddi4+0x96>
1a001e3e:	428b      	cmp	r3, r1
1a001e40:	d909      	bls.n	1a001e56 <__udivmoddi4+0x12e>
1a001e42:	2d00      	cmp	r5, #0
1a001e44:	f000 80b1 	beq.w	1a001faa <__udivmoddi4+0x282>
1a001e48:	2600      	movs	r6, #0
1a001e4a:	e9c5 0100 	strd	r0, r1, [r5]
1a001e4e:	4630      	mov	r0, r6
1a001e50:	4631      	mov	r1, r6
1a001e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e56:	fab3 f683 	clz	r6, r3
1a001e5a:	2e00      	cmp	r6, #0
1a001e5c:	d14a      	bne.n	1a001ef4 <__udivmoddi4+0x1cc>
1a001e5e:	428b      	cmp	r3, r1
1a001e60:	d302      	bcc.n	1a001e68 <__udivmoddi4+0x140>
1a001e62:	4282      	cmp	r2, r0
1a001e64:	f200 80b8 	bhi.w	1a001fd8 <__udivmoddi4+0x2b0>
1a001e68:	1a84      	subs	r4, r0, r2
1a001e6a:	eb61 0103 	sbc.w	r1, r1, r3
1a001e6e:	2001      	movs	r0, #1
1a001e70:	468c      	mov	ip, r1
1a001e72:	2d00      	cmp	r5, #0
1a001e74:	d0a8      	beq.n	1a001dc8 <__udivmoddi4+0xa0>
1a001e76:	e9c5 4c00 	strd	r4, ip, [r5]
1a001e7a:	e7a5      	b.n	1a001dc8 <__udivmoddi4+0xa0>
1a001e7c:	f1c2 0320 	rsb	r3, r2, #32
1a001e80:	fa20 f603 	lsr.w	r6, r0, r3
1a001e84:	4097      	lsls	r7, r2
1a001e86:	fa01 f002 	lsl.w	r0, r1, r2
1a001e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a001e8e:	40d9      	lsrs	r1, r3
1a001e90:	4330      	orrs	r0, r6
1a001e92:	0c03      	lsrs	r3, r0, #16
1a001e94:	fbb1 f6fe 	udiv	r6, r1, lr
1a001e98:	fa1f f887 	uxth.w	r8, r7
1a001e9c:	fb0e 1116 	mls	r1, lr, r6, r1
1a001ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001ea4:	fb06 f108 	mul.w	r1, r6, r8
1a001ea8:	4299      	cmp	r1, r3
1a001eaa:	fa04 f402 	lsl.w	r4, r4, r2
1a001eae:	d909      	bls.n	1a001ec4 <__udivmoddi4+0x19c>
1a001eb0:	18fb      	adds	r3, r7, r3
1a001eb2:	f106 3cff 	add.w	ip, r6, #4294967295
1a001eb6:	f080 808d 	bcs.w	1a001fd4 <__udivmoddi4+0x2ac>
1a001eba:	4299      	cmp	r1, r3
1a001ebc:	f240 808a 	bls.w	1a001fd4 <__udivmoddi4+0x2ac>
1a001ec0:	3e02      	subs	r6, #2
1a001ec2:	443b      	add	r3, r7
1a001ec4:	1a5b      	subs	r3, r3, r1
1a001ec6:	b281      	uxth	r1, r0
1a001ec8:	fbb3 f0fe 	udiv	r0, r3, lr
1a001ecc:	fb0e 3310 	mls	r3, lr, r0, r3
1a001ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001ed4:	fb00 f308 	mul.w	r3, r0, r8
1a001ed8:	428b      	cmp	r3, r1
1a001eda:	d907      	bls.n	1a001eec <__udivmoddi4+0x1c4>
1a001edc:	1879      	adds	r1, r7, r1
1a001ede:	f100 3cff 	add.w	ip, r0, #4294967295
1a001ee2:	d273      	bcs.n	1a001fcc <__udivmoddi4+0x2a4>
1a001ee4:	428b      	cmp	r3, r1
1a001ee6:	d971      	bls.n	1a001fcc <__udivmoddi4+0x2a4>
1a001ee8:	3802      	subs	r0, #2
1a001eea:	4439      	add	r1, r7
1a001eec:	1acb      	subs	r3, r1, r3
1a001eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a001ef2:	e778      	b.n	1a001de6 <__udivmoddi4+0xbe>
1a001ef4:	f1c6 0c20 	rsb	ip, r6, #32
1a001ef8:	fa03 f406 	lsl.w	r4, r3, r6
1a001efc:	fa22 f30c 	lsr.w	r3, r2, ip
1a001f00:	431c      	orrs	r4, r3
1a001f02:	fa20 f70c 	lsr.w	r7, r0, ip
1a001f06:	fa01 f306 	lsl.w	r3, r1, r6
1a001f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
1a001f0e:	fa21 f10c 	lsr.w	r1, r1, ip
1a001f12:	431f      	orrs	r7, r3
1a001f14:	0c3b      	lsrs	r3, r7, #16
1a001f16:	fbb1 f9fe 	udiv	r9, r1, lr
1a001f1a:	fa1f f884 	uxth.w	r8, r4
1a001f1e:	fb0e 1119 	mls	r1, lr, r9, r1
1a001f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001f26:	fb09 fa08 	mul.w	sl, r9, r8
1a001f2a:	458a      	cmp	sl, r1
1a001f2c:	fa02 f206 	lsl.w	r2, r2, r6
1a001f30:	fa00 f306 	lsl.w	r3, r0, r6
1a001f34:	d908      	bls.n	1a001f48 <__udivmoddi4+0x220>
1a001f36:	1861      	adds	r1, r4, r1
1a001f38:	f109 30ff 	add.w	r0, r9, #4294967295
1a001f3c:	d248      	bcs.n	1a001fd0 <__udivmoddi4+0x2a8>
1a001f3e:	458a      	cmp	sl, r1
1a001f40:	d946      	bls.n	1a001fd0 <__udivmoddi4+0x2a8>
1a001f42:	f1a9 0902 	sub.w	r9, r9, #2
1a001f46:	4421      	add	r1, r4
1a001f48:	eba1 010a 	sub.w	r1, r1, sl
1a001f4c:	b2bf      	uxth	r7, r7
1a001f4e:	fbb1 f0fe 	udiv	r0, r1, lr
1a001f52:	fb0e 1110 	mls	r1, lr, r0, r1
1a001f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
1a001f5a:	fb00 f808 	mul.w	r8, r0, r8
1a001f5e:	45b8      	cmp	r8, r7
1a001f60:	d907      	bls.n	1a001f72 <__udivmoddi4+0x24a>
1a001f62:	19e7      	adds	r7, r4, r7
1a001f64:	f100 31ff 	add.w	r1, r0, #4294967295
1a001f68:	d22e      	bcs.n	1a001fc8 <__udivmoddi4+0x2a0>
1a001f6a:	45b8      	cmp	r8, r7
1a001f6c:	d92c      	bls.n	1a001fc8 <__udivmoddi4+0x2a0>
1a001f6e:	3802      	subs	r0, #2
1a001f70:	4427      	add	r7, r4
1a001f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001f76:	eba7 0708 	sub.w	r7, r7, r8
1a001f7a:	fba0 8902 	umull	r8, r9, r0, r2
1a001f7e:	454f      	cmp	r7, r9
1a001f80:	46c6      	mov	lr, r8
1a001f82:	4649      	mov	r1, r9
1a001f84:	d31a      	bcc.n	1a001fbc <__udivmoddi4+0x294>
1a001f86:	d017      	beq.n	1a001fb8 <__udivmoddi4+0x290>
1a001f88:	b15d      	cbz	r5, 1a001fa2 <__udivmoddi4+0x27a>
1a001f8a:	ebb3 020e 	subs.w	r2, r3, lr
1a001f8e:	eb67 0701 	sbc.w	r7, r7, r1
1a001f92:	fa07 fc0c 	lsl.w	ip, r7, ip
1a001f96:	40f2      	lsrs	r2, r6
1a001f98:	ea4c 0202 	orr.w	r2, ip, r2
1a001f9c:	40f7      	lsrs	r7, r6
1a001f9e:	e9c5 2700 	strd	r2, r7, [r5]
1a001fa2:	2600      	movs	r6, #0
1a001fa4:	4631      	mov	r1, r6
1a001fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001faa:	462e      	mov	r6, r5
1a001fac:	4628      	mov	r0, r5
1a001fae:	e70b      	b.n	1a001dc8 <__udivmoddi4+0xa0>
1a001fb0:	4606      	mov	r6, r0
1a001fb2:	e6e9      	b.n	1a001d88 <__udivmoddi4+0x60>
1a001fb4:	4618      	mov	r0, r3
1a001fb6:	e6fd      	b.n	1a001db4 <__udivmoddi4+0x8c>
1a001fb8:	4543      	cmp	r3, r8
1a001fba:	d2e5      	bcs.n	1a001f88 <__udivmoddi4+0x260>
1a001fbc:	ebb8 0e02 	subs.w	lr, r8, r2
1a001fc0:	eb69 0104 	sbc.w	r1, r9, r4
1a001fc4:	3801      	subs	r0, #1
1a001fc6:	e7df      	b.n	1a001f88 <__udivmoddi4+0x260>
1a001fc8:	4608      	mov	r0, r1
1a001fca:	e7d2      	b.n	1a001f72 <__udivmoddi4+0x24a>
1a001fcc:	4660      	mov	r0, ip
1a001fce:	e78d      	b.n	1a001eec <__udivmoddi4+0x1c4>
1a001fd0:	4681      	mov	r9, r0
1a001fd2:	e7b9      	b.n	1a001f48 <__udivmoddi4+0x220>
1a001fd4:	4666      	mov	r6, ip
1a001fd6:	e775      	b.n	1a001ec4 <__udivmoddi4+0x19c>
1a001fd8:	4630      	mov	r0, r6
1a001fda:	e74a      	b.n	1a001e72 <__udivmoddi4+0x14a>
1a001fdc:	f1ac 0c02 	sub.w	ip, ip, #2
1a001fe0:	4439      	add	r1, r7
1a001fe2:	e713      	b.n	1a001e0c <__udivmoddi4+0xe4>
1a001fe4:	3802      	subs	r0, #2
1a001fe6:	443c      	add	r4, r7
1a001fe8:	e724      	b.n	1a001e34 <__udivmoddi4+0x10c>
1a001fea:	bf00      	nop

1a001fec <__aeabi_idiv0>:
1a001fec:	4770      	bx	lr
1a001fee:	bf00      	nop

1a001ff0 <__libc_init_array>:
1a001ff0:	b570      	push	{r4, r5, r6, lr}
1a001ff2:	4d0d      	ldr	r5, [pc, #52]	; (1a002028 <__libc_init_array+0x38>)
1a001ff4:	4c0d      	ldr	r4, [pc, #52]	; (1a00202c <__libc_init_array+0x3c>)
1a001ff6:	1b64      	subs	r4, r4, r5
1a001ff8:	10a4      	asrs	r4, r4, #2
1a001ffa:	2600      	movs	r6, #0
1a001ffc:	42a6      	cmp	r6, r4
1a001ffe:	d109      	bne.n	1a002014 <__libc_init_array+0x24>
1a002000:	4d0b      	ldr	r5, [pc, #44]	; (1a002030 <__libc_init_array+0x40>)
1a002002:	4c0c      	ldr	r4, [pc, #48]	; (1a002034 <__libc_init_array+0x44>)
1a002004:	f7ff fb59 	bl	1a0016ba <_init>
1a002008:	1b64      	subs	r4, r4, r5
1a00200a:	10a4      	asrs	r4, r4, #2
1a00200c:	2600      	movs	r6, #0
1a00200e:	42a6      	cmp	r6, r4
1a002010:	d105      	bne.n	1a00201e <__libc_init_array+0x2e>
1a002012:	bd70      	pop	{r4, r5, r6, pc}
1a002014:	f855 3b04 	ldr.w	r3, [r5], #4
1a002018:	4798      	blx	r3
1a00201a:	3601      	adds	r6, #1
1a00201c:	e7ee      	b.n	1a001ffc <__libc_init_array+0xc>
1a00201e:	f855 3b04 	ldr.w	r3, [r5], #4
1a002022:	4798      	blx	r3
1a002024:	3601      	adds	r6, #1
1a002026:	e7f2      	b.n	1a00200e <__libc_init_array+0x1e>
1a002028:	1a0022a4 	.word	0x1a0022a4
1a00202c:	1a0022a4 	.word	0x1a0022a4
1a002030:	1a0022a4 	.word	0x1a0022a4
1a002034:	1a0022a4 	.word	0x1a0022a4

1a002038 <memset>:
1a002038:	4402      	add	r2, r0
1a00203a:	4603      	mov	r3, r0
1a00203c:	4293      	cmp	r3, r2
1a00203e:	d100      	bne.n	1a002042 <memset+0xa>
1a002040:	4770      	bx	lr
1a002042:	f803 1b01 	strb.w	r1, [r3], #1
1a002046:	e7f9      	b.n	1a00203c <memset+0x4>

1a002048 <InitClkStates>:
1a002048:	0f01 0101                                   ....

1a00204c <pinmuxing>:
1a00204c:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a00205c:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a00206c:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a00207c:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a00208c:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a00209c:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a0020ac:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a0020bc:	0206 0057                                   ..W.

1a0020c0 <ExtRateIn>:
1a0020c0:	0000 0000                                   ....

1a0020c4 <GpioButtons>:
1a0020c4:	0400 0800 0900 0901                         ........

1a0020cc <GpioLeds>:
1a0020cc:	0005 0105 0205 0e00 0b01 0c01               ............

1a0020d8 <GpioPorts>:
1a0020d8:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0020e8:	0802 ffff                                   ....

1a0020ec <OscRateIn>:
1a0020ec:	1b00 00b7 0f03 0f0f 00ff ffff               ............

1a0020f8 <periph_to_base>:
1a0020f8:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002108:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a002118:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a002128:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a002138:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a002148:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a002158:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a002164 <UART_BClock>:
1a002164:	01c2 01a2 0182 0162                         ......b.

1a00216c <UART_PClock>:
1a00216c:	0081 0082 00a1 00a2                         ........

1a002174 <InitClkStates>:
1a002174:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a002184:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a002194:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0021a4:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a0021b4:	111a 0001 111b 0001                         ........

1a0021bc <gpioPinsInit>:
1a0021bc:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a0021cc:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a0021dc:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a0021ec:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a0021fc:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a00220c:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a00221c:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a00222c:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a00223c:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a00224c:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a00225c:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a00226c:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a00227c:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a00228c:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a00229c:	020b 000c 0c01 ffff                         ........
