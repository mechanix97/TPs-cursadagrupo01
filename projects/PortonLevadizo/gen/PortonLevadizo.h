/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef PORTONLEVADIZO_H_
#define PORTONLEVADIZO_H_

#include "../inc/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'PortonLevadizo'.
*/

/*! Define number of states in the state enum */

#define PORTONLEVADIZO_STATE_COUNT 17

/*! Define dimension of the state configuration vector for orthogonal states. */
#define PORTONLEVADIZO_MAX_ORTHOGONAL_STATES 6

/*! Define maximum number of time events that can be active at once */
#define PORTONLEVADIZO_MAX_PARALLEL_TIME_EVENTS 4

/*! Define indices of states in the StateConfVector */
#define SCVI_PORTONLEVADIZO_TECX_DEBOUNCE 0
#define SCVI_PORTONLEVADIZO_TECX_NO_OPRIMIDO 0
#define SCVI_PORTONLEVADIZO_TECX_OPRIMIDO 0
#define SCVI_PORTONLEVADIZO_TECX_VALIDACION 0
#define SCVI_PORTONLEVADIZO_MAIN_REGION_ESPERA 1
#define SCVI_PORTONLEVADIZO_PORTONLEVADIZO_CERRADO 2
#define SCVI_PORTONLEVADIZO_PORTONLEVADIZO_CERRANDO 2
#define SCVI_PORTONLEVADIZO_PORTONLEVADIZO_ABRIENDO 2
#define SCVI_PORTONLEVADIZO_PORTONLEVADIZO_ABIERTO 2
#define SCVI_PORTONLEVADIZO_LUZROJA_APAGADA 3
#define SCVI_PORTONLEVADIZO_LUZROJA_TITILAR 3
#define SCVI_PORTONLEVADIZO_LUZVERDE_APAGADA 4
#define SCVI_PORTONLEVADIZO_LUZVERDE_ENCENDIDA 4
#define SCVI_PORTONLEVADIZO_LED3_TITILA 5
#define SCVI_PORTONLEVADIZO_LED3_TITILA_R1_ENCENDIDO 5
#define SCVI_PORTONLEVADIZO_LED3_TITILA_R1_APAGADO 5
#define SCVI_PORTONLEVADIZO_LED3_REPOSO 5

/*! Enumeration of all states */ 
typedef enum
{
	PortonLevadizo_last_state,
	PortonLevadizo_TECX_DEBOUNCE,
	PortonLevadizo_TECX_NO_OPRIMIDO,
	PortonLevadizo_TECX_OPRIMIDO,
	PortonLevadizo_TECX_VALIDACION,
	PortonLevadizo_main_region_ESPERA,
	PortonLevadizo_PORTONlEVADIZO_CERRADO,
	PortonLevadizo_PORTONlEVADIZO_CERRANDO,
	PortonLevadizo_PORTONlEVADIZO_ABRIENDO,
	PortonLevadizo_PORTONlEVADIZO_ABIERTO,
	PortonLevadizo_LUZrOJA_APAGADA,
	PortonLevadizo_LUZrOJA_Titilar,
	PortonLevadizo_LUZvERDE_APAGADA,
	PortonLevadizo_LUZvERDE_ENCENDIDA,
	PortonLevadizo_LED3_TITILA,
	PortonLevadizo_LED3_TITILA_r1_ENCENDIDO,
	PortonLevadizo_LED3_TITILA_r1_APAGADO,
	PortonLevadizo_LED3_REPOSO
} PortonLevadizoStates;

/*! Type definition of the data structure for the PortonLevadizoIface interface scope. */
typedef struct
{
	sc_boolean evRemoto_raised;
	sc_boolean evAbrio_raised;
	sc_boolean evCerro_raised;
	sc_boolean evTECXNoOprimido_raised;
	sc_boolean evTECXOprimido_raised;
	sc_integer evTECXOprimido_value;
} PortonLevadizoIface;


/* Declaration of constants for scope PortonLevadizoIface. */
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_OPEN;
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_CLOSE;
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_ON;
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_OFF;
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_ONOFF;
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_TOGGLE;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_LEDR;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_LEDG;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_LEDB;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED1;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED2;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED3;
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_ON;
extern const sc_boolean PORTONLEVADIZO_PORTONLEVADIZOIFACE_LED_OFF;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_TEC1;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_TEC2;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_TEC3;
extern const sc_integer PORTONLEVADIZO_PORTONLEVADIZOIFACE_TEC4;


/*! Type definition of the data structure for the PortonLevadizoInternal interface scope. */
typedef struct
{
	sc_boolean siTitilar_raised;
	sc_boolean siNoTitilar_raised;
	sc_boolean evRoja_raised;
	sc_boolean evVerde_raised;
	sc_boolean siTECXOK_raised;
	sc_integer viTecla;
} PortonLevadizoInternal;



/*! Type definition of the data structure for the PortonLevadizoTimeEvents interface scope. */
typedef struct
{
	sc_boolean portonLevadizo_TECX_DEBOUNCE_tev0_raised;
	sc_boolean portonLevadizo_LUZrOJA_Titilar_tev0_raised;
	sc_boolean portonLevadizo_LUZvERDE_ENCENDIDA_tev0_raised;
	sc_boolean portonLevadizo_LED3_TITILA_r1_ENCENDIDO_tev0_raised;
	sc_boolean portonLevadizo_LED3_TITILA_r1_APAGADO_tev0_raised;
} PortonLevadizoTimeEvents;




/*! 
 * Type definition of the data structure for the PortonLevadizo state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	PortonLevadizoStates stateConfVector[PORTONLEVADIZO_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	PortonLevadizoIface iface;
	PortonLevadizoInternal internal;
	PortonLevadizoTimeEvents timeEvents;
} PortonLevadizo;



/*! Initializes the PortonLevadizo state machine data structures. Must be called before first usage.*/
extern void portonLevadizo_init(PortonLevadizo* handle);

/*! Activates the state machine */
extern void portonLevadizo_enter(PortonLevadizo* handle);

/*! Deactivates the state machine */
extern void portonLevadizo_exit(PortonLevadizo* handle);

/*! Performs a 'run to completion' step. */
extern void portonLevadizo_runCycle(PortonLevadizo* handle);

/*! Raises a time event. */
extern void portonLevadizo_raiseTimeEvent(PortonLevadizo* handle, sc_eventid evid);

/*! Raises the in event 'evRemoto' that is defined in the default interface scope. */ 
extern void portonLevadizoIface_raise_evRemoto(PortonLevadizo* handle);

/*! Raises the in event 'evAbrio' that is defined in the default interface scope. */ 
extern void portonLevadizoIface_raise_evAbrio(PortonLevadizo* handle);

/*! Raises the in event 'evCerro' that is defined in the default interface scope. */ 
extern void portonLevadizoIface_raise_evCerro(PortonLevadizo* handle);

/*! Raises the in event 'evTECXNoOprimido' that is defined in the default interface scope. */ 
extern void portonLevadizoIface_raise_evTECXNoOprimido(PortonLevadizo* handle);

/*! Raises the in event 'evTECXOprimido' that is defined in the default interface scope. */ 
extern void portonLevadizoIface_raise_evTECXOprimido(PortonLevadizo* handle, sc_integer value);

/*! Gets the value of the variable 'OPEN' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_oPEN(const PortonLevadizo* handle);
/*! Gets the value of the variable 'CLOSE' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_cLOSE(const PortonLevadizo* handle);
/*! Gets the value of the variable 'ON' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_oN(const PortonLevadizo* handle);
/*! Gets the value of the variable 'OFF' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_oFF(const PortonLevadizo* handle);
/*! Gets the value of the variable 'ONoFF' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_oNoFF(const PortonLevadizo* handle);
/*! Gets the value of the variable 'TOGGLE' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_tOGGLE(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LEDR' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_lEDR(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LEDG' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_lEDG(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LEDB' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_lEDB(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LED1' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_lED1(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LED2' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_lED2(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LED3' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_lED3(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LED_ON' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_lED_ON(const PortonLevadizo* handle);
/*! Gets the value of the variable 'LED_OFF' that is defined in the default interface scope. */ 
extern sc_boolean portonLevadizoIface_get_lED_OFF(const PortonLevadizo* handle);
/*! Gets the value of the variable 'TEC1' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_tEC1(const PortonLevadizo* handle);
/*! Gets the value of the variable 'TEC2' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_tEC2(const PortonLevadizo* handle);
/*! Gets the value of the variable 'TEC3' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_tEC3(const PortonLevadizo* handle);
/*! Gets the value of the variable 'TEC4' that is defined in the default interface scope. */ 
extern sc_integer portonLevadizoIface_get_tEC4(const PortonLevadizo* handle);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean portonLevadizo_isActive(const PortonLevadizo* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean portonLevadizo_isFinal(const PortonLevadizo* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean portonLevadizo_isStateActive(const PortonLevadizo* handle, PortonLevadizoStates state);


#ifdef __cplusplus
}
#endif 

#endif /* PORTONLEVADIZO_H_ */
