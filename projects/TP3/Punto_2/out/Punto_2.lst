
projects/TP3/Punto_2/out/Punto_2.elf:     file format elf32-littlearm
projects/TP3/Punto_2/out/Punto_2.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0004c1

Program Header:
0x70000001 off    0x00011ddc vaddr 0x1a001ddc paddr 0x1a001ddc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000048 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001de4 memsz 0x00001de4 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001de4 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dd8  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a001de4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000048  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a001dd8  1a001dd8  00011dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001ddc  1a001ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  10000090  10000090  00020048  2**2
                  CONTENTS
 19 .debug_info   0001c40e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004165  00000000  00000000  0003c456  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007da9  00000000  00000000  000405bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000970  00000000  00000000  00048364  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000aa0  00000000  00000000  00048cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000cb39  00000000  00000000  00049774  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000ffae  00000000  00000000  000562ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00027ec9  00000000  00000000  0006625b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      000000e1  00000000  00000000  0008e124  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0008e205  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000176c  00000000  00000000  0008e238  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001dd8 l    d  .init_array	00000000 .init_array
1a001ddc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000090 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
10000048 l     O .bss	00000008 button1
10000050 l     O .bss	00000008 button2
10000058 l     O .bss	00000008 button3
10000060 l     O .bss	00000008 button4
00000000 l    df *ABS*	00000000 board.c
1a00054c l     F .text	00000044 Board_LED_Init
1a000590 l     F .text	00000040 Board_TEC_Init
1a0005d0 l     F .text	00000040 Board_GPIO_Init
1a000610 l     F .text	00000030 Board_ADC_Init
1a000640 l     F .text	00000038 Board_SPI_Init
1a000678 l     F .text	00000024 Board_I2C_Init
1a001b38 l     O .text	00000008 GpioButtons
1a001b40 l     O .text	0000000c GpioLeds
1a001b4c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001b64 l     O .text	00000004 InitClkStates
1a001b68 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0007a8 l     F .text	0000002c Chip_UART_GetIndex
1a001bdc l     O .text	00000008 UART_BClock
1a001be4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000944 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000958 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000a20 l     F .text	000000a0 pll_calc_divs
1a000ac0 l     F .text	0000010c pll_get_frac
1a000bcc l     F .text	00000048 Chip_Clock_FindBaseClock
1a000e38 l     F .text	00000022 Chip_Clock_GetDivRate
10000068 l     O .bss	00000008 audio_usb_pll_freq
1a001bf4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001c60 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001100 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001114 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001ca8 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000070 l     O .bss	00000004 callBackFuncParams
10000078 l     O .bss	00000008 tickCounter
10000080 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001430 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000084 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001ddc l       .init_array	00000000 __init_array_end
1a001dd8 l       .bss_RAM5	00000000 __preinit_array_end
1a001dd8 l       .init_array	00000000 __init_array_start
1a001dd8 l       .bss_RAM5	00000000 __preinit_array_start
1a000c60 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000130  w    F .text	00000002 DebugMon_Handler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0000c0 g       .text	00000000 __section_table_start
1a000360 g     F .text	00000060 buttonRaised
1a000166  w    F .text	00000002 I2C0_IRQHandler
1a0006f0 g     F .text	00000008 __stdio_init
1a000126  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0009fe g     F .text	0000000c Chip_ADC_SetResolution
1a001404 g     F .text	0000002c SysTick_Handler
1a000828 g     F .text	00000040 Chip_UART_SetBaud
1a000166  w    F .text	00000002 SPIFI_ADCHS_IRQHandler
1a0004bc  w    F .text	00000002 initialise_monitor_handles
1a000166  w    F .text	00000002 SDIO_IRQHandler
1a000132  w    F .text	00000002 PendSV_Handler
1a000124  w    F .text	00000002 NMI_Handler
1a001de4 g       .ARM.exidx	00000000 __exidx_end
1a0000fc g       .text	00000000 __data_section_table_end
1a000166  w    F .text	00000002 UART1_IRQHandler
53ff7572 g       *ABS*	00000000 __valid_user_code_checksum
1a001de4 g       .ARM.exidx	00000000 _etext
1a000166  w    F .text	00000002 USB1_IRQHandler
1a000166  w    F .text	00000002 TIMER3_IRQHandler
1a000edc g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000166  w    F .text	00000002 UART0_IRQHandler
1a000154 g     F .text	00000012 bss_init
1a000166  w    F .text	00000002 SGPIO_IRQHandler
1a0017ac g     F .text	00000000 .hidden __aeabi_uldivmod
10000090 g       .noinit	00000000 _noinit
1a00134e g     F .text	00000016 uartWriteString
10000088 g     O .bss	00000004 SystemCoreClock
1a0007d4 g     F .text	00000054 Chip_UART_Init
1a000166  w    F .text	00000002 ADC0_IRQHandler
1a00012c  w    F .text	00000002 UsageFault_Handler
1a000f58 g     F .text	0000004c Chip_Clock_GetRate
1a000730 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0017dc g     F .text	000002d0 .hidden __udivmoddi4
1a001b34 g     O .text	00000004 ExtRateIn
1a000166  w    F .text	00000002 IntDefaultHandler
1a000166  w    F .text	00000002 SSP0_SSP1_IRQHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001ddc g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001ab0 g     F .text	00000048 __libc_init_array
1a000166  w    F .text	00000002 ADC1_IRQHandler
1a000166  w    F .text	00000002 RIT_WDT_IRQHandler
1a000166  w    F .text	00000002 FLASH_EEPROM_ATIMER_IRQHandler
1a0006c0 g     F .text	00000030 Board_Init
1a0003c0 g     F .text	0000000a InitButton
1a00054a  w    F .text	00000002 _init
1a0000c0 g       .text	00000000 __data_section_table
1a000166  w    F .text	00000002 RTC_IRQHandler
10000090 g       .bss	00000000 _ebss
1a000166  w    F .text	00000002 TIMER0_IRQHandler
1a0004c0 g     F .text	00000088 Reset_Handler
1a001388 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0011fc g     F .text	0000003c Chip_I2C_SetClockRate
1a000166  w    F .text	00000002 LCD_IRQHandler
1a000c14 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000166  w    F .text	00000002 M4_IRQHandler
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000136 g     F .text	0000001e data_init
1a0011d4 g     F .text	00000028 Chip_I2C_Init
1a000dd0 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a001cf0 g     O .text	000000e6 gpioPinsInit
1a001334 g     F .text	0000001a uartWriteByte
1a00112c g     F .text	00000012 Chip_SSP_SetClockRate
1a000eb4 g     F .text	00000028 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a0009cc g     F .text	00000032 Chip_ADC_SetSampleRate
1a0003ca g     F .text	0000006e buttonUpdate
1a00113e g     F .text	0000003e Chip_SSP_SetBitRate
1a000166  w    F .text	00000002 I2S0_I2S1_QEI_IRQHandler
1a0010fc g     F .text	00000002 Chip_GPIO_Init
1a001b60 g     O .text	00000004 OscRateIn
1a0012b8 g     F .text	0000007c uartInit
10000090 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000124 g       .text	00000000 __bss_section_table_end
1a001464 g     F .text	000001ac gpioInit
1a001aac  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0016e4 g     F .text	0000001c USB0_IRQHandler
1a000166  w    F .text	00000002 SCT_IRQHandler
1a000c7c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001af8 g     F .text	00000010 memset
1a000128  w    F .text	00000002 MemManage_Handler
1a000438 g     F .text	00000084 main
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00012e  w    F .text	00000002 SVC_Handler
1a00128c g     F .text	00000018 uartTxReady
1a000ee8 g     F .text	0000003c Chip_Clock_EnableOpts
1a000300 g     F .text	00000060 buttonFalled
1a000c98 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000d50 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001238 g     F .text	00000038 SystemInit
1a001774 g     F .text	00000038 delay
1a0000fc g       .text	00000000 __bss_section_table
1a001610 g     F .text	0000006a gpioWrite
1a000548  w    F .text	00000002 _fini
1a00098c g     F .text	00000040 Chip_ADC_Init
1000008c g     O .bss	00000004 g_pUsbApi
1a0006f8 g     F .text	00000038 Board_SetupMuxing
1a000868 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001364 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a000166  w    F .text	00000002 SPI_DAC_IRQHandler
1a000166  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0012a4 g     F .text	00000014 uartTxWrite
1a000166  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000090 g       .bss	00000000 _pvHeapStart
1a000166  w    F .text	00000002 UART2_CAN1_IRQHandler
1a000124 g       .text	00000000 __section_table_end
1a00117c g     F .text	00000038 Chip_SSP_Init
1a00069c g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a0011b4 g     F .text	00000020 Chip_I2C_EventHandler
1a000166  w    F .text	00000002 M0SUB_IRQHandler
1a000fa4 g     F .text	00000158 Chip_SetupCoreClock
1a000000 g     O .text	00000040 g_pfnVectors
1a000a0c g     F .text	00000014 SystemCoreClockUpdate
1a000166  w    F .text	00000002 DMA_IRQHandler
1a000166  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001aac  w    F .text	00000002 .hidden __aeabi_idiv0
1a00012a  w    F .text	00000002 BusFault_Handler
1a000f24 g     F .text	00000034 Chip_Clock_Enable
1a000166  w    F .text	00000002 UART3_IRQHandler
1a000166  w    F .text	00000002 MCPWM_IRQHandler
1a00167a g     F .text	00000068 gpioRead
1a001700 g     F .text	00000074 boardInit
1a000040 g     O .text	00000080 g_pfnVendorVectors
1a000166  w    F .text	00000002 GINT1_IRQHandler
1a001370 g     F .text	00000018 tickPowerSet
1a000e5c g     F .text	00000058 Chip_Clock_SetBaseClock
1a001270 g     F .text	0000001c cyclesCounterInit
1a000166  w    F .text	00000002 GPIO4_IRQHandler
1a00079c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c1 04 00 1a 25 01 00 1a 27 01 00 1a     ........%...'...
1a000010:	29 01 00 1a 2b 01 00 1a 2d 01 00 1a 72 75 ff 53     )...+...-...ru.S
	...
1a00002c:	2f 01 00 1a 31 01 00 1a 00 00 00 00 33 01 00 1a     /...1.......3...
1a00003c:	05 14 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	67 01 00 1a 67 01 00 1a 67 01 00 1a 00 00 00 00     g...g...g.......
1a000050:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000060:	e5 16 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     ....g...g...g...
1a000070:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000080:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000090:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000a0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000b0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...

1a0000c0 <__data_section_table>:
1a0000c0:	1a001de4 	.word	0x1a001de4
1a0000c4:	10000000 	.word	0x10000000
1a0000c8:	00000048 	.word	0x00000048
1a0000cc:	1a001de4 	.word	0x1a001de4
1a0000d0:	10080000 	.word	0x10080000
1a0000d4:	00000000 	.word	0x00000000
1a0000d8:	1a001de4 	.word	0x1a001de4
1a0000dc:	20000000 	.word	0x20000000
1a0000e0:	00000000 	.word	0x00000000
1a0000e4:	1a001de4 	.word	0x1a001de4
1a0000e8:	20008000 	.word	0x20008000
1a0000ec:	00000000 	.word	0x00000000
1a0000f0:	1a001de4 	.word	0x1a001de4
1a0000f4:	2000c000 	.word	0x2000c000
1a0000f8:	00000000 	.word	0x00000000

1a0000fc <__bss_section_table>:
1a0000fc:	10000048 	.word	0x10000048
1a000100:	00000048 	.word	0x00000048
1a000104:	10080000 	.word	0x10080000
1a000108:	00000000 	.word	0x00000000
1a00010c:	20000000 	.word	0x20000000
1a000110:	00000000 	.word	0x00000000
1a000114:	20008000 	.word	0x20008000
1a000118:	00000000 	.word	0x00000000
1a00011c:	2000c000 	.word	0x2000c000
1a000120:	00000000 	.word	0x00000000

1a000124 <NMI_Handler>:
1a000124:	e7fe      	b.n	1a000124 <NMI_Handler>

1a000126 <HardFault_Handler>:
1a000126:	e7fe      	b.n	1a000126 <HardFault_Handler>

1a000128 <MemManage_Handler>:
1a000128:	e7fe      	b.n	1a000128 <MemManage_Handler>

1a00012a <BusFault_Handler>:
1a00012a:	e7fe      	b.n	1a00012a <BusFault_Handler>

1a00012c <UsageFault_Handler>:
1a00012c:	e7fe      	b.n	1a00012c <UsageFault_Handler>

1a00012e <SVC_Handler>:
1a00012e:	e7fe      	b.n	1a00012e <SVC_Handler>

1a000130 <DebugMon_Handler>:
1a000130:	e7fe      	b.n	1a000130 <DebugMon_Handler>

1a000132 <PendSV_Handler>:
1a000132:	e7fe      	b.n	1a000132 <PendSV_Handler>
1a000134:	e7fe      	b.n	1a000134 <PendSV_Handler+0x2>

1a000136 <data_init>:
1a000136:	2300      	movs	r3, #0
1a000138:	4293      	cmp	r3, r2
1a00013a:	d20a      	bcs.n	1a000152 <data_init+0x1c>
1a00013c:	b410      	push	{r4}
1a00013e:	f850 4b04 	ldr.w	r4, [r0], #4
1a000142:	f841 4b04 	str.w	r4, [r1], #4
1a000146:	3304      	adds	r3, #4
1a000148:	4293      	cmp	r3, r2
1a00014a:	d3f8      	bcc.n	1a00013e <data_init+0x8>
1a00014c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000150:	4770      	bx	lr
1a000152:	4770      	bx	lr

1a000154 <bss_init>:
1a000154:	2300      	movs	r3, #0
1a000156:	428b      	cmp	r3, r1
1a000158:	d204      	bcs.n	1a000164 <bss_init+0x10>
1a00015a:	2200      	movs	r2, #0
1a00015c:	f840 2b04 	str.w	r2, [r0], #4
1a000160:	3304      	adds	r3, #4
1a000162:	e7f8      	b.n	1a000156 <bss_init+0x2>
1a000164:	4770      	bx	lr

1a000166 <ADC0_IRQHandler>:
1a000166:	e7fe      	b.n	1a000166 <ADC0_IRQHandler>
1a000168:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00016c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00017c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00018c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00019c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <buttonFalled>:
static myButton_t button2;
static myButton_t button3;
static myButton_t button4;


void buttonFalled(myButton_t* b){
1a000300:	b510      	push	{r4, lr}
1a000302:	4604      	mov	r4, r0
	uartWriteString( UART_USB, "Boton  " );
1a000304:	4914      	ldr	r1, [pc, #80]	; (1a000358 <buttonFalled+0x58>)
1a000306:	2003      	movs	r0, #3
1a000308:	f001 f821 	bl	1a00134e <uartWriteString>
	uartWriteString( UART_USB, b->name );
1a00030c:	6861      	ldr	r1, [r4, #4]
1a00030e:	2003      	movs	r0, #3
1a000310:	f001 f81d 	bl	1a00134e <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a000314:	4911      	ldr	r1, [pc, #68]	; (1a00035c <buttonFalled+0x5c>)
1a000316:	2003      	movs	r0, #3
1a000318:	f001 f819 	bl	1a00134e <uartWriteString>

	switch(b->button){
1a00031c:	f994 3000 	ldrsb.w	r3, [r4]
1a000320:	3b24      	subs	r3, #36	; 0x24
1a000322:	2b03      	cmp	r3, #3
1a000324:	d807      	bhi.n	1a000336 <buttonFalled+0x36>
1a000326:	e8df f003 	tbb	[pc, r3]
1a00032a:	0702      	.short	0x0702
1a00032c:	110c      	.short	0x110c
		case TEC1:
			gpioWrite(LEDG,HIGH);
1a00032e:	2101      	movs	r1, #1
1a000330:	2029      	movs	r0, #41	; 0x29
1a000332:	f001 f96d 	bl	1a001610 <gpioWrite>
			break;
		case TEC4:
			gpioWrite(LED3,HIGH);
			break;
	}
}
1a000336:	bd10      	pop	{r4, pc}
			gpioWrite(LED1,HIGH);
1a000338:	2101      	movs	r1, #1
1a00033a:	202b      	movs	r0, #43	; 0x2b
1a00033c:	f001 f968 	bl	1a001610 <gpioWrite>
			break;
1a000340:	e7f9      	b.n	1a000336 <buttonFalled+0x36>
			gpioWrite(LED2,HIGH);
1a000342:	2101      	movs	r1, #1
1a000344:	202c      	movs	r0, #44	; 0x2c
1a000346:	f001 f963 	bl	1a001610 <gpioWrite>
			break;
1a00034a:	e7f4      	b.n	1a000336 <buttonFalled+0x36>
			gpioWrite(LED3,HIGH);
1a00034c:	2101      	movs	r1, #1
1a00034e:	202d      	movs	r0, #45	; 0x2d
1a000350:	f001 f95e 	bl	1a001610 <gpioWrite>
}
1a000354:	e7ef      	b.n	1a000336 <buttonFalled+0x36>
1a000356:	bf00      	nop
1a000358:	1a001b08 	.word	0x1a001b08
1a00035c:	1a001b10 	.word	0x1a001b10

1a000360 <buttonRaised>:

void  buttonRaised(myButton_t* b){
1a000360:	b510      	push	{r4, lr}
1a000362:	4604      	mov	r4, r0
	uartWriteString( UART_USB, "Boton  " );
1a000364:	4914      	ldr	r1, [pc, #80]	; (1a0003b8 <buttonRaised+0x58>)
1a000366:	2003      	movs	r0, #3
1a000368:	f000 fff1 	bl	1a00134e <uartWriteString>
	uartWriteString( UART_USB, b->name );
1a00036c:	6861      	ldr	r1, [r4, #4]
1a00036e:	2003      	movs	r0, #3
1a000370:	f000 ffed 	bl	1a00134e <uartWriteString>
	uartWriteString( UART_USB, "\r\n" );
1a000374:	4911      	ldr	r1, [pc, #68]	; (1a0003bc <buttonRaised+0x5c>)
1a000376:	2003      	movs	r0, #3
1a000378:	f000 ffe9 	bl	1a00134e <uartWriteString>

	switch(b->button){
1a00037c:	f994 3000 	ldrsb.w	r3, [r4]
1a000380:	3b24      	subs	r3, #36	; 0x24
1a000382:	2b03      	cmp	r3, #3
1a000384:	d807      	bhi.n	1a000396 <buttonRaised+0x36>
1a000386:	e8df f003 	tbb	[pc, r3]
1a00038a:	0702      	.short	0x0702
1a00038c:	110c      	.short	0x110c
		case TEC1:
			gpioWrite(LEDG,LOW);
1a00038e:	2100      	movs	r1, #0
1a000390:	2029      	movs	r0, #41	; 0x29
1a000392:	f001 f93d 	bl	1a001610 <gpioWrite>
			break;
		case TEC4:
			gpioWrite(LED3,LOW);
			break;
		}
}
1a000396:	bd10      	pop	{r4, pc}
			gpioWrite(LED1,LOW);
1a000398:	2100      	movs	r1, #0
1a00039a:	202b      	movs	r0, #43	; 0x2b
1a00039c:	f001 f938 	bl	1a001610 <gpioWrite>
			break;
1a0003a0:	e7f9      	b.n	1a000396 <buttonRaised+0x36>
			gpioWrite(LED2,LOW);
1a0003a2:	2100      	movs	r1, #0
1a0003a4:	202c      	movs	r0, #44	; 0x2c
1a0003a6:	f001 f933 	bl	1a001610 <gpioWrite>
			break;
1a0003aa:	e7f4      	b.n	1a000396 <buttonRaised+0x36>
			gpioWrite(LED3,LOW);
1a0003ac:	2100      	movs	r1, #0
1a0003ae:	202d      	movs	r0, #45	; 0x2d
1a0003b0:	f001 f92e 	bl	1a001610 <gpioWrite>
}
1a0003b4:	e7ef      	b.n	1a000396 <buttonRaised+0x36>
1a0003b6:	bf00      	nop
1a0003b8:	1a001b08 	.word	0x1a001b08
1a0003bc:	1a001b10 	.word	0x1a001b10

1a0003c0 <InitButton>:

void InitButton(myButton_t* b, gpioMap_t button_number,  char* name){
	b->button_state = BUTTON_STATE_OFF;
1a0003c0:	2301      	movs	r3, #1
1a0003c2:	7043      	strb	r3, [r0, #1]
	b->button = button_number;
1a0003c4:	7001      	strb	r1, [r0, #0]
	b->name = name;
1a0003c6:	6042      	str	r2, [r0, #4]
}
1a0003c8:	4770      	bx	lr

1a0003ca <buttonUpdate>:


void buttonUpdate(myButton_t* b){
1a0003ca:	b510      	push	{r4, lr}
1a0003cc:	4604      	mov	r4, r0
	switch(b->button_state){
1a0003ce:	7843      	ldrb	r3, [r0, #1]
1a0003d0:	2b03      	cmp	r3, #3
1a0003d2:	d82a      	bhi.n	1a00042a <buttonUpdate+0x60>
1a0003d4:	e8df f003 	tbb	[pc, r3]
1a0003d8:	1321020a 	.word	0x1321020a
		case BUTTON_STATE_OFF:
			if(gpioRead(b->button) == LOW)
1a0003dc:	f990 0000 	ldrsb.w	r0, [r0]
1a0003e0:	f001 f94b 	bl	1a00167a <gpioRead>
1a0003e4:	bb08      	cbnz	r0, 1a00042a <buttonUpdate+0x60>
				b->button_state = BUTTON_RISING;
1a0003e6:	2303      	movs	r3, #3
1a0003e8:	7063      	strb	r3, [r4, #1]
1a0003ea:	e01e      	b.n	1a00042a <buttonUpdate+0x60>
			break;
			
		case BUTTON_STATE_ON:
			if(gpioRead(b->button) == HIGH)
1a0003ec:	f990 0000 	ldrsb.w	r0, [r0]
1a0003f0:	f001 f943 	bl	1a00167a <gpioRead>
1a0003f4:	2801      	cmp	r0, #1
1a0003f6:	d118      	bne.n	1a00042a <buttonUpdate+0x60>
				b->button_state = BUTTON_FALLING;
1a0003f8:	2302      	movs	r3, #2
1a0003fa:	7063      	strb	r3, [r4, #1]
1a0003fc:	e015      	b.n	1a00042a <buttonUpdate+0x60>
			break;
			
		case BUTTON_STATE_RISING:
			if(gpioRead(b->button) == LOW){
1a0003fe:	f990 0000 	ldrsb.w	r0, [r0]
1a000402:	f001 f93a 	bl	1a00167a <gpioRead>
1a000406:	b110      	cbz	r0, 1a00040e <buttonUpdate+0x44>
				b->button_state = BUTTON_STATE_ON;
				buttonRaised(b);
			} else
				b->button_state = BUTTON_STATE_OFF;
1a000408:	2301      	movs	r3, #1
1a00040a:	7063      	strb	r3, [r4, #1]
1a00040c:	e00d      	b.n	1a00042a <buttonUpdate+0x60>
				b->button_state = BUTTON_STATE_ON;
1a00040e:	2300      	movs	r3, #0
1a000410:	7063      	strb	r3, [r4, #1]
				buttonRaised(b);
1a000412:	4620      	mov	r0, r4
1a000414:	f7ff ffa4 	bl	1a000360 <buttonRaised>
1a000418:	e007      	b.n	1a00042a <buttonUpdate+0x60>
			break;
			
		case BUTTON_STATE_FALLING:
			if(gpioRead(b->button) == HIGH){
1a00041a:	f990 0000 	ldrsb.w	r0, [r0]
1a00041e:	f001 f92c 	bl	1a00167a <gpioRead>
1a000422:	2801      	cmp	r0, #1
1a000424:	d002      	beq.n	1a00042c <buttonUpdate+0x62>
				b->button_state = BUTTON_STATE_OFF;
				buttonFalled(b);
			} else
				b->button_state = BUTTON_STATE_ON;
1a000426:	2300      	movs	r3, #0
1a000428:	7063      	strb	r3, [r4, #1]
			break;
	}
}
1a00042a:	bd10      	pop	{r4, pc}
				b->button_state = BUTTON_STATE_OFF;
1a00042c:	2301      	movs	r3, #1
1a00042e:	7063      	strb	r3, [r4, #1]
				buttonFalled(b);
1a000430:	4620      	mov	r0, r4
1a000432:	f7ff ff65 	bl	1a000300 <buttonFalled>
1a000436:	e7f8      	b.n	1a00042a <buttonUpdate+0x60>

1a000438 <main>:

int main(void)
{
1a000438:	b508      	push	{r3, lr}
	boardConfig();
1a00043a:	f001 f961 	bl	1a001700 <boardInit>
	uartConfig(UART_USB, 115200);
1a00043e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000442:	2003      	movs	r0, #3
1a000444:	f000 ff38 	bl	1a0012b8 <uartInit>
	tickConfig(50);
1a000448:	2032      	movs	r0, #50	; 0x32
1a00044a:	2100      	movs	r1, #0
1a00044c:	f000 ff9c 	bl	1a001388 <tickInit>


	InitButton(&button1, TEC1, "Boton 1");
1a000450:	4a12      	ldr	r2, [pc, #72]	; (1a00049c <main+0x64>)
1a000452:	2124      	movs	r1, #36	; 0x24
1a000454:	4812      	ldr	r0, [pc, #72]	; (1a0004a0 <main+0x68>)
1a000456:	f7ff ffb3 	bl	1a0003c0 <InitButton>
	InitButton(&button2, TEC2, "Boton 2");
1a00045a:	4a12      	ldr	r2, [pc, #72]	; (1a0004a4 <main+0x6c>)
1a00045c:	2125      	movs	r1, #37	; 0x25
1a00045e:	4812      	ldr	r0, [pc, #72]	; (1a0004a8 <main+0x70>)
1a000460:	f7ff ffae 	bl	1a0003c0 <InitButton>
	InitButton(&button3, TEC3, "Boton 3");
1a000464:	4a11      	ldr	r2, [pc, #68]	; (1a0004ac <main+0x74>)
1a000466:	2126      	movs	r1, #38	; 0x26
1a000468:	4811      	ldr	r0, [pc, #68]	; (1a0004b0 <main+0x78>)
1a00046a:	f7ff ffa9 	bl	1a0003c0 <InitButton>
	InitButton(&button4, TEC4, "Boton 4");
1a00046e:	4a11      	ldr	r2, [pc, #68]	; (1a0004b4 <main+0x7c>)
1a000470:	2127      	movs	r1, #39	; 0x27
1a000472:	4811      	ldr	r0, [pc, #68]	; (1a0004b8 <main+0x80>)
1a000474:	f7ff ffa4 	bl	1a0003c0 <InitButton>


   delay(500);
1a000478:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00047c:	2100      	movs	r1, #0
1a00047e:	f001 f979 	bl	1a001774 <delay>

   while(1) {
   		buttonUpdate(&button1);
1a000482:	4807      	ldr	r0, [pc, #28]	; (1a0004a0 <main+0x68>)
1a000484:	f7ff ffa1 	bl	1a0003ca <buttonUpdate>
		buttonUpdate(&button2);
1a000488:	4807      	ldr	r0, [pc, #28]	; (1a0004a8 <main+0x70>)
1a00048a:	f7ff ff9e 	bl	1a0003ca <buttonUpdate>
		buttonUpdate(&button3);
1a00048e:	4808      	ldr	r0, [pc, #32]	; (1a0004b0 <main+0x78>)
1a000490:	f7ff ff9b 	bl	1a0003ca <buttonUpdate>
		buttonUpdate(&button4);
1a000494:	4808      	ldr	r0, [pc, #32]	; (1a0004b8 <main+0x80>)
1a000496:	f7ff ff98 	bl	1a0003ca <buttonUpdate>
1a00049a:	e7f2      	b.n	1a000482 <main+0x4a>
1a00049c:	1a001b14 	.word	0x1a001b14
1a0004a0:	10000048 	.word	0x10000048
1a0004a4:	1a001b1c 	.word	0x1a001b1c
1a0004a8:	10000050 	.word	0x10000050
1a0004ac:	1a001b24 	.word	0x1a001b24
1a0004b0:	10000058 	.word	0x10000058
1a0004b4:	1a001b2c 	.word	0x1a001b2c
1a0004b8:	10000060 	.word	0x10000060

1a0004bc <initialise_monitor_handles>:
1a0004bc:	4770      	bx	lr
1a0004be:	Address 0x000000001a0004be is out of bounds.


1a0004c0 <Reset_Handler>:
1a0004c0:	b510      	push	{r4, lr}
1a0004c2:	b672      	cpsid	i
1a0004c4:	4b19      	ldr	r3, [pc, #100]	; (1a00052c <Reset_Handler+0x6c>)
1a0004c6:	4a1a      	ldr	r2, [pc, #104]	; (1a000530 <Reset_Handler+0x70>)
1a0004c8:	601a      	str	r2, [r3, #0]
1a0004ca:	3304      	adds	r3, #4
1a0004cc:	4a19      	ldr	r2, [pc, #100]	; (1a000534 <Reset_Handler+0x74>)
1a0004ce:	601a      	str	r2, [r3, #0]
1a0004d0:	2300      	movs	r3, #0
1a0004d2:	e005      	b.n	1a0004e0 <Reset_Handler+0x20>
1a0004d4:	4a18      	ldr	r2, [pc, #96]	; (1a000538 <Reset_Handler+0x78>)
1a0004d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0004da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
1a0004de:	3301      	adds	r3, #1
1a0004e0:	2b07      	cmp	r3, #7
1a0004e2:	d9f7      	bls.n	1a0004d4 <Reset_Handler+0x14>
1a0004e4:	b662      	cpsie	i
1a0004e6:	4b15      	ldr	r3, [pc, #84]	; (1a00053c <Reset_Handler+0x7c>)
1a0004e8:	e007      	b.n	1a0004fa <Reset_Handler+0x3a>
1a0004ea:	f103 040c 	add.w	r4, r3, #12
1a0004ee:	689a      	ldr	r2, [r3, #8]
1a0004f0:	6859      	ldr	r1, [r3, #4]
1a0004f2:	6818      	ldr	r0, [r3, #0]
1a0004f4:	f7ff fe1f 	bl	1a000136 <data_init>
1a0004f8:	4623      	mov	r3, r4
1a0004fa:	4a11      	ldr	r2, [pc, #68]	; (1a000540 <Reset_Handler+0x80>)
1a0004fc:	4293      	cmp	r3, r2
1a0004fe:	d3f4      	bcc.n	1a0004ea <Reset_Handler+0x2a>
1a000500:	e006      	b.n	1a000510 <Reset_Handler+0x50>
1a000502:	461c      	mov	r4, r3
1a000504:	6859      	ldr	r1, [r3, #4]
1a000506:	f854 0b08 	ldr.w	r0, [r4], #8
1a00050a:	f7ff fe23 	bl	1a000154 <bss_init>
1a00050e:	4623      	mov	r3, r4
1a000510:	4a0c      	ldr	r2, [pc, #48]	; (1a000544 <Reset_Handler+0x84>)
1a000512:	4293      	cmp	r3, r2
1a000514:	d3f5      	bcc.n	1a000502 <Reset_Handler+0x42>
1a000516:	f000 fe8f 	bl	1a001238 <SystemInit>
1a00051a:	f001 fac9 	bl	1a001ab0 <__libc_init_array>
1a00051e:	f7ff ffcd 	bl	1a0004bc <initialise_monitor_handles>
1a000522:	f7ff ff89 	bl	1a000438 <main>
1a000526:	bf30      	wfi
1a000528:	e7fd      	b.n	1a000526 <Reset_Handler+0x66>
1a00052a:	bf00      	nop
1a00052c:	40053100 	.word	0x40053100
1a000530:	10df1000 	.word	0x10df1000
1a000534:	01dff7ff 	.word	0x01dff7ff
1a000538:	e000e280 	.word	0xe000e280
1a00053c:	1a0000c0 	.word	0x1a0000c0
1a000540:	1a0000fc 	.word	0x1a0000fc
1a000544:	1a000124 	.word	0x1a000124

1a000548 <_fini>:
1a000548:	4770      	bx	lr

1a00054a <_init>:
1a00054a:	4770      	bx	lr

1a00054c <Board_LED_Init>:
1a00054c:	2200      	movs	r2, #0
1a00054e:	2a05      	cmp	r2, #5
1a000550:	d819      	bhi.n	1a000586 <Board_LED_Init+0x3a>
1a000552:	b470      	push	{r4, r5, r6}
1a000554:	490c      	ldr	r1, [pc, #48]	; (1a000588 <Board_LED_Init+0x3c>)
1a000556:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00055a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00055e:	784c      	ldrb	r4, [r1, #1]
1a000560:	4b0a      	ldr	r3, [pc, #40]	; (1a00058c <Board_LED_Init+0x40>)
1a000562:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000566:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00056a:	2001      	movs	r0, #1
1a00056c:	40a0      	lsls	r0, r4
1a00056e:	4301      	orrs	r1, r0
1a000570:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
1a000574:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000578:	2100      	movs	r1, #0
1a00057a:	5519      	strb	r1, [r3, r4]
1a00057c:	3201      	adds	r2, #1
1a00057e:	2a05      	cmp	r2, #5
1a000580:	d9e8      	bls.n	1a000554 <Board_LED_Init+0x8>
1a000582:	bc70      	pop	{r4, r5, r6}
1a000584:	4770      	bx	lr
1a000586:	4770      	bx	lr
1a000588:	1a001b40 	.word	0x1a001b40
1a00058c:	400f4000 	.word	0x400f4000

1a000590 <Board_TEC_Init>:
1a000590:	2300      	movs	r3, #0
1a000592:	2b03      	cmp	r3, #3
1a000594:	d816      	bhi.n	1a0005c4 <Board_TEC_Init+0x34>
1a000596:	b430      	push	{r4, r5}
1a000598:	490b      	ldr	r1, [pc, #44]	; (1a0005c8 <Board_TEC_Init+0x38>)
1a00059a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00059e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0005a2:	784d      	ldrb	r5, [r1, #1]
1a0005a4:	4c09      	ldr	r4, [pc, #36]	; (1a0005cc <Board_TEC_Init+0x3c>)
1a0005a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0005aa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0005ae:	2001      	movs	r0, #1
1a0005b0:	40a8      	lsls	r0, r5
1a0005b2:	ea21 0100 	bic.w	r1, r1, r0
1a0005b6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
1a0005ba:	3301      	adds	r3, #1
1a0005bc:	2b03      	cmp	r3, #3
1a0005be:	d9eb      	bls.n	1a000598 <Board_TEC_Init+0x8>
1a0005c0:	bc30      	pop	{r4, r5}
1a0005c2:	4770      	bx	lr
1a0005c4:	4770      	bx	lr
1a0005c6:	bf00      	nop
1a0005c8:	1a001b38 	.word	0x1a001b38
1a0005cc:	400f4000 	.word	0x400f4000

1a0005d0 <Board_GPIO_Init>:
1a0005d0:	2300      	movs	r3, #0
1a0005d2:	2b08      	cmp	r3, #8
1a0005d4:	d816      	bhi.n	1a000604 <Board_GPIO_Init+0x34>
1a0005d6:	b430      	push	{r4, r5}
1a0005d8:	490b      	ldr	r1, [pc, #44]	; (1a000608 <Board_GPIO_Init+0x38>)
1a0005da:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0005de:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0005e2:	784d      	ldrb	r5, [r1, #1]
1a0005e4:	4c09      	ldr	r4, [pc, #36]	; (1a00060c <Board_GPIO_Init+0x3c>)
1a0005e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0005ea:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0005ee:	2001      	movs	r0, #1
1a0005f0:	40a8      	lsls	r0, r5
1a0005f2:	ea21 0100 	bic.w	r1, r1, r0
1a0005f6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
1a0005fa:	3301      	adds	r3, #1
1a0005fc:	2b08      	cmp	r3, #8
1a0005fe:	d9eb      	bls.n	1a0005d8 <Board_GPIO_Init+0x8>
1a000600:	bc30      	pop	{r4, r5}
1a000602:	4770      	bx	lr
1a000604:	4770      	bx	lr
1a000606:	bf00      	nop
1a000608:	1a001b4c 	.word	0x1a001b4c
1a00060c:	400f4000 	.word	0x400f4000

1a000610 <Board_ADC_Init>:
1a000610:	b510      	push	{r4, lr}
1a000612:	b082      	sub	sp, #8
1a000614:	4c08      	ldr	r4, [pc, #32]	; (1a000638 <Board_ADC_Init+0x28>)
1a000616:	4669      	mov	r1, sp
1a000618:	4620      	mov	r0, r4
1a00061a:	f000 f9b7 	bl	1a00098c <Chip_ADC_Init>
1a00061e:	4a07      	ldr	r2, [pc, #28]	; (1a00063c <Board_ADC_Init+0x2c>)
1a000620:	4669      	mov	r1, sp
1a000622:	4620      	mov	r0, r4
1a000624:	f000 f9d2 	bl	1a0009cc <Chip_ADC_SetSampleRate>
1a000628:	2200      	movs	r2, #0
1a00062a:	4669      	mov	r1, sp
1a00062c:	4620      	mov	r0, r4
1a00062e:	f000 f9e6 	bl	1a0009fe <Chip_ADC_SetResolution>
1a000632:	b002      	add	sp, #8
1a000634:	bd10      	pop	{r4, pc}
1a000636:	bf00      	nop
1a000638:	400e3000 	.word	0x400e3000
1a00063c:	00061a80 	.word	0x00061a80

1a000640 <Board_SPI_Init>:
1a000640:	b510      	push	{r4, lr}
1a000642:	4c0b      	ldr	r4, [pc, #44]	; (1a000670 <Board_SPI_Init+0x30>)
1a000644:	4620      	mov	r0, r4
1a000646:	f000 fd99 	bl	1a00117c <Chip_SSP_Init>
1a00064a:	6863      	ldr	r3, [r4, #4]
1a00064c:	f023 0304 	bic.w	r3, r3, #4
1a000650:	6063      	str	r3, [r4, #4]
1a000652:	6823      	ldr	r3, [r4, #0]
1a000654:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000658:	f043 0307 	orr.w	r3, r3, #7
1a00065c:	6023      	str	r3, [r4, #0]
1a00065e:	4905      	ldr	r1, [pc, #20]	; (1a000674 <Board_SPI_Init+0x34>)
1a000660:	4620      	mov	r0, r4
1a000662:	f000 fd6c 	bl	1a00113e <Chip_SSP_SetBitRate>
1a000666:	6863      	ldr	r3, [r4, #4]
1a000668:	f043 0302 	orr.w	r3, r3, #2
1a00066c:	6063      	str	r3, [r4, #4]
1a00066e:	bd10      	pop	{r4, pc}
1a000670:	400c5000 	.word	0x400c5000
1a000674:	000186a0 	.word	0x000186a0

1a000678 <Board_I2C_Init>:
1a000678:	b508      	push	{r3, lr}
1a00067a:	2000      	movs	r0, #0
1a00067c:	f000 fdaa 	bl	1a0011d4 <Chip_I2C_Init>
1a000680:	4b04      	ldr	r3, [pc, #16]	; (1a000694 <Board_I2C_Init+0x1c>)
1a000682:	f640 0208 	movw	r2, #2056	; 0x808
1a000686:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
1a00068a:	4903      	ldr	r1, [pc, #12]	; (1a000698 <Board_I2C_Init+0x20>)
1a00068c:	2000      	movs	r0, #0
1a00068e:	f000 fdb5 	bl	1a0011fc <Chip_I2C_SetClockRate>
1a000692:	bd08      	pop	{r3, pc}
1a000694:	40086000 	.word	0x40086000
1a000698:	000f4240 	.word	0x000f4240

1a00069c <Board_Debug_Init>:
1a00069c:	b510      	push	{r4, lr}
1a00069e:	4c07      	ldr	r4, [pc, #28]	; (1a0006bc <Board_Debug_Init+0x20>)
1a0006a0:	4620      	mov	r0, r4
1a0006a2:	f000 f897 	bl	1a0007d4 <Chip_UART_Init>
1a0006a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0006aa:	4620      	mov	r0, r4
1a0006ac:	f000 f8dc 	bl	1a000868 <Chip_UART_SetBaudFDR>
1a0006b0:	2303      	movs	r3, #3
1a0006b2:	60e3      	str	r3, [r4, #12]
1a0006b4:	2301      	movs	r3, #1
1a0006b6:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0006b8:	bd10      	pop	{r4, pc}
1a0006ba:	bf00      	nop
1a0006bc:	400c1000 	.word	0x400c1000

1a0006c0 <Board_Init>:
1a0006c0:	b508      	push	{r3, lr}
1a0006c2:	f7ff ffeb 	bl	1a00069c <Board_Debug_Init>
1a0006c6:	4809      	ldr	r0, [pc, #36]	; (1a0006ec <Board_Init+0x2c>)
1a0006c8:	f000 fd18 	bl	1a0010fc <Chip_GPIO_Init>
1a0006cc:	f7ff ff80 	bl	1a0005d0 <Board_GPIO_Init>
1a0006d0:	f7ff ff9e 	bl	1a000610 <Board_ADC_Init>
1a0006d4:	f7ff ffb4 	bl	1a000640 <Board_SPI_Init>
1a0006d8:	f7ff ffce 	bl	1a000678 <Board_I2C_Init>
1a0006dc:	f7ff ff36 	bl	1a00054c <Board_LED_Init>
1a0006e0:	f7ff ff56 	bl	1a000590 <Board_TEC_Init>
1a0006e4:	f000 f992 	bl	1a000a0c <SystemCoreClockUpdate>
1a0006e8:	bd08      	pop	{r3, pc}
1a0006ea:	bf00      	nop
1a0006ec:	400f4000 	.word	0x400f4000

1a0006f0 <__stdio_init>:
1a0006f0:	b508      	push	{r3, lr}
1a0006f2:	f7ff ffd3 	bl	1a00069c <Board_Debug_Init>
1a0006f6:	bd08      	pop	{r3, pc}

1a0006f8 <Board_SetupMuxing>:
1a0006f8:	2300      	movs	r3, #0
1a0006fa:	2b1c      	cmp	r3, #28
1a0006fc:	d812      	bhi.n	1a000724 <Board_SetupMuxing+0x2c>
1a0006fe:	b410      	push	{r4}
1a000700:	4a09      	ldr	r2, [pc, #36]	; (1a000728 <Board_SetupMuxing+0x30>)
1a000702:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000706:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00070a:	784a      	ldrb	r2, [r1, #1]
1a00070c:	8848      	ldrh	r0, [r1, #2]
1a00070e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000712:	4906      	ldr	r1, [pc, #24]	; (1a00072c <Board_SetupMuxing+0x34>)
1a000714:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
1a000718:	3301      	adds	r3, #1
1a00071a:	2b1c      	cmp	r3, #28
1a00071c:	d9f0      	bls.n	1a000700 <Board_SetupMuxing+0x8>
1a00071e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000722:	4770      	bx	lr
1a000724:	4770      	bx	lr
1a000726:	bf00      	nop
1a000728:	1a001b68 	.word	0x1a001b68
1a00072c:	40086000 	.word	0x40086000

1a000730 <Board_SetupClocking>:
1a000730:	b510      	push	{r4, lr}
1a000732:	4a17      	ldr	r2, [pc, #92]	; (1a000790 <Board_SetupClocking+0x60>)
1a000734:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00073c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000740:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
1a000744:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000748:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00074c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000750:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
1a000754:	2201      	movs	r2, #1
1a000756:	490f      	ldr	r1, [pc, #60]	; (1a000794 <Board_SetupClocking+0x64>)
1a000758:	2006      	movs	r0, #6
1a00075a:	f000 fc23 	bl	1a000fa4 <Chip_SetupCoreClock>
1a00075e:	2400      	movs	r4, #0
1a000760:	b14c      	cbz	r4, 1a000776 <Board_SetupClocking+0x46>
1a000762:	4b0b      	ldr	r3, [pc, #44]	; (1a000790 <Board_SetupClocking+0x60>)
1a000764:	685a      	ldr	r2, [r3, #4]
1a000766:	f022 020c 	bic.w	r2, r2, #12
1a00076a:	605a      	str	r2, [r3, #4]
1a00076c:	685a      	ldr	r2, [r3, #4]
1a00076e:	f042 0203 	orr.w	r2, r2, #3
1a000772:	605a      	str	r2, [r3, #4]
1a000774:	bd10      	pop	{r4, pc}
1a000776:	4808      	ldr	r0, [pc, #32]	; (1a000798 <Board_SetupClocking+0x68>)
1a000778:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00077c:	2301      	movs	r3, #1
1a00077e:	788a      	ldrb	r2, [r1, #2]
1a000780:	7849      	ldrb	r1, [r1, #1]
1a000782:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000786:	f000 fb69 	bl	1a000e5c <Chip_Clock_SetBaseClock>
1a00078a:	3401      	adds	r4, #1
1a00078c:	e7e8      	b.n	1a000760 <Board_SetupClocking+0x30>
1a00078e:	bf00      	nop
1a000790:	40043000 	.word	0x40043000
1a000794:	0c28cb00 	.word	0x0c28cb00
1a000798:	1a001b64 	.word	0x1a001b64

1a00079c <Board_SystemInit>:
1a00079c:	b508      	push	{r3, lr}
1a00079e:	f7ff ffab 	bl	1a0006f8 <Board_SetupMuxing>
1a0007a2:	f7ff ffc5 	bl	1a000730 <Board_SetupClocking>
1a0007a6:	bd08      	pop	{r3, pc}

1a0007a8 <Chip_UART_GetIndex>:
1a0007a8:	4b09      	ldr	r3, [pc, #36]	; (1a0007d0 <Chip_UART_GetIndex+0x28>)
1a0007aa:	4298      	cmp	r0, r3
1a0007ac:	d00b      	beq.n	1a0007c6 <Chip_UART_GetIndex+0x1e>
1a0007ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0007b2:	4298      	cmp	r0, r3
1a0007b4:	d009      	beq.n	1a0007ca <Chip_UART_GetIndex+0x22>
1a0007b6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0007ba:	4298      	cmp	r0, r3
1a0007bc:	d001      	beq.n	1a0007c2 <Chip_UART_GetIndex+0x1a>
1a0007be:	2000      	movs	r0, #0
1a0007c0:	4770      	bx	lr
1a0007c2:	2001      	movs	r0, #1
1a0007c4:	4770      	bx	lr
1a0007c6:	2002      	movs	r0, #2
1a0007c8:	4770      	bx	lr
1a0007ca:	2003      	movs	r0, #3
1a0007cc:	4770      	bx	lr
1a0007ce:	bf00      	nop
1a0007d0:	400c1000 	.word	0x400c1000

1a0007d4 <Chip_UART_Init>:
1a0007d4:	b530      	push	{r4, r5, lr}
1a0007d6:	b083      	sub	sp, #12
1a0007d8:	4604      	mov	r4, r0
1a0007da:	f7ff ffe5 	bl	1a0007a8 <Chip_UART_GetIndex>
1a0007de:	2301      	movs	r3, #1
1a0007e0:	461a      	mov	r2, r3
1a0007e2:	4619      	mov	r1, r3
1a0007e4:	4d0e      	ldr	r5, [pc, #56]	; (1a000820 <Chip_UART_Init+0x4c>)
1a0007e6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0007ea:	f000 fb7d 	bl	1a000ee8 <Chip_Clock_EnableOpts>
1a0007ee:	2307      	movs	r3, #7
1a0007f0:	60a3      	str	r3, [r4, #8]
1a0007f2:	2300      	movs	r3, #0
1a0007f4:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0007f6:	6063      	str	r3, [r4, #4]
1a0007f8:	60e3      	str	r3, [r4, #12]
1a0007fa:	6223      	str	r3, [r4, #32]
1a0007fc:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0007fe:	6563      	str	r3, [r4, #84]	; 0x54
1a000800:	6523      	str	r3, [r4, #80]	; 0x50
1a000802:	4b08      	ldr	r3, [pc, #32]	; (1a000824 <Chip_UART_Init+0x50>)
1a000804:	429c      	cmp	r4, r3
1a000806:	d006      	beq.n	1a000816 <Chip_UART_Init+0x42>
1a000808:	2303      	movs	r3, #3
1a00080a:	60e3      	str	r3, [r4, #12]
1a00080c:	2310      	movs	r3, #16
1a00080e:	62a3      	str	r3, [r4, #40]	; 0x28
1a000810:	9b01      	ldr	r3, [sp, #4]
1a000812:	b003      	add	sp, #12
1a000814:	bd30      	pop	{r4, r5, pc}
1a000816:	2300      	movs	r3, #0
1a000818:	6123      	str	r3, [r4, #16]
1a00081a:	69a3      	ldr	r3, [r4, #24]
1a00081c:	9301      	str	r3, [sp, #4]
1a00081e:	e7f3      	b.n	1a000808 <Chip_UART_Init+0x34>
1a000820:	1a001be4 	.word	0x1a001be4
1a000824:	40082000 	.word	0x40082000

1a000828 <Chip_UART_SetBaud>:
1a000828:	b538      	push	{r3, r4, r5, lr}
1a00082a:	4605      	mov	r5, r0
1a00082c:	460c      	mov	r4, r1
1a00082e:	f7ff ffbb 	bl	1a0007a8 <Chip_UART_GetIndex>
1a000832:	4b0c      	ldr	r3, [pc, #48]	; (1a000864 <Chip_UART_SetBaud+0x3c>)
1a000834:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000838:	f000 fb8e 	bl	1a000f58 <Chip_Clock_GetRate>
1a00083c:	0121      	lsls	r1, r4, #4
1a00083e:	fbb0 f1f1 	udiv	r1, r0, r1
1a000842:	b2ca      	uxtb	r2, r1
1a000844:	68eb      	ldr	r3, [r5, #12]
1a000846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00084a:	60eb      	str	r3, [r5, #12]
1a00084c:	602a      	str	r2, [r5, #0]
1a00084e:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a000852:	606b      	str	r3, [r5, #4]
1a000854:	68eb      	ldr	r3, [r5, #12]
1a000856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00085a:	60eb      	str	r3, [r5, #12]
1a00085c:	fbb0 f0f1 	udiv	r0, r0, r1
1a000860:	0900      	lsrs	r0, r0, #4
1a000862:	bd38      	pop	{r3, r4, r5, pc}
1a000864:	1a001bdc 	.word	0x1a001bdc

1a000868 <Chip_UART_SetBaudFDR>:
1a000868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00086c:	b083      	sub	sp, #12
1a00086e:	9001      	str	r0, [sp, #4]
1a000870:	4688      	mov	r8, r1
1a000872:	f7ff ff99 	bl	1a0007a8 <Chip_UART_GetIndex>
1a000876:	4b32      	ldr	r3, [pc, #200]	; (1a000940 <Chip_UART_SetBaudFDR+0xd8>)
1a000878:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00087c:	f000 fb6c 	bl	1a000f58 <Chip_Clock_GetRate>
1a000880:	4606      	mov	r6, r0
1a000882:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a000886:	2401      	movs	r4, #1
1a000888:	f04f 0b00 	mov.w	fp, #0
1a00088c:	46a2      	mov	sl, r4
1a00088e:	46d9      	mov	r9, fp
1a000890:	e02a      	b.n	1a0008e8 <Chip_UART_SetBaudFDR+0x80>
1a000892:	4242      	negs	r2, r0
1a000894:	1c4b      	adds	r3, r1, #1
1a000896:	e017      	b.n	1a0008c8 <Chip_UART_SetBaudFDR+0x60>
1a000898:	b30a      	cbz	r2, 1a0008de <Chip_UART_SetBaudFDR+0x76>
1a00089a:	4617      	mov	r7, r2
1a00089c:	46ab      	mov	fp, r5
1a00089e:	46a2      	mov	sl, r4
1a0008a0:	4699      	mov	r9, r3
1a0008a2:	3501      	adds	r5, #1
1a0008a4:	42ac      	cmp	r4, r5
1a0008a6:	d91e      	bls.n	1a0008e6 <Chip_UART_SetBaudFDR+0x7e>
1a0008a8:	0933      	lsrs	r3, r6, #4
1a0008aa:	0730      	lsls	r0, r6, #28
1a0008ac:	fba4 0100 	umull	r0, r1, r4, r0
1a0008b0:	fb04 1103 	mla	r1, r4, r3, r1
1a0008b4:	1962      	adds	r2, r4, r5
1a0008b6:	fb08 f202 	mul.w	r2, r8, r2
1a0008ba:	2300      	movs	r3, #0
1a0008bc:	f000 ff76 	bl	1a0017ac <__aeabi_uldivmod>
1a0008c0:	4602      	mov	r2, r0
1a0008c2:	460b      	mov	r3, r1
1a0008c4:	2800      	cmp	r0, #0
1a0008c6:	dbe4      	blt.n	1a000892 <Chip_UART_SetBaudFDR+0x2a>
1a0008c8:	4297      	cmp	r7, r2
1a0008ca:	d3ea      	bcc.n	1a0008a2 <Chip_UART_SetBaudFDR+0x3a>
1a0008cc:	2b00      	cmp	r3, #0
1a0008ce:	d0e8      	beq.n	1a0008a2 <Chip_UART_SetBaudFDR+0x3a>
1a0008d0:	0c19      	lsrs	r1, r3, #16
1a0008d2:	d1e6      	bne.n	1a0008a2 <Chip_UART_SetBaudFDR+0x3a>
1a0008d4:	2b02      	cmp	r3, #2
1a0008d6:	d8df      	bhi.n	1a000898 <Chip_UART_SetBaudFDR+0x30>
1a0008d8:	2d00      	cmp	r5, #0
1a0008da:	d0dd      	beq.n	1a000898 <Chip_UART_SetBaudFDR+0x30>
1a0008dc:	e7e1      	b.n	1a0008a2 <Chip_UART_SetBaudFDR+0x3a>
1a0008de:	4617      	mov	r7, r2
1a0008e0:	46ab      	mov	fp, r5
1a0008e2:	46a2      	mov	sl, r4
1a0008e4:	4699      	mov	r9, r3
1a0008e6:	3401      	adds	r4, #1
1a0008e8:	b11f      	cbz	r7, 1a0008f2 <Chip_UART_SetBaudFDR+0x8a>
1a0008ea:	2c0f      	cmp	r4, #15
1a0008ec:	d801      	bhi.n	1a0008f2 <Chip_UART_SetBaudFDR+0x8a>
1a0008ee:	2500      	movs	r5, #0
1a0008f0:	e7d8      	b.n	1a0008a4 <Chip_UART_SetBaudFDR+0x3c>
1a0008f2:	f1b9 0f00 	cmp.w	r9, #0
1a0008f6:	d01e      	beq.n	1a000936 <Chip_UART_SetBaudFDR+0xce>
1a0008f8:	9a01      	ldr	r2, [sp, #4]
1a0008fa:	4611      	mov	r1, r2
1a0008fc:	68d3      	ldr	r3, [r2, #12]
1a0008fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000902:	60d3      	str	r3, [r2, #12]
1a000904:	fa5f f389 	uxtb.w	r3, r9
1a000908:	6013      	str	r3, [r2, #0]
1a00090a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00090e:	6053      	str	r3, [r2, #4]
1a000910:	68d3      	ldr	r3, [r2, #12]
1a000912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000916:	60d3      	str	r3, [r2, #12]
1a000918:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00091c:	b2db      	uxtb	r3, r3
1a00091e:	f00b 020f 	and.w	r2, fp, #15
1a000922:	4313      	orrs	r3, r2
1a000924:	628b      	str	r3, [r1, #40]	; 0x28
1a000926:	0933      	lsrs	r3, r6, #4
1a000928:	fb0a f303 	mul.w	r3, sl, r3
1a00092c:	44da      	add	sl, fp
1a00092e:	fb09 f90a 	mul.w	r9, r9, sl
1a000932:	fbb3 f9f9 	udiv	r9, r3, r9
1a000936:	4648      	mov	r0, r9
1a000938:	b003      	add	sp, #12
1a00093a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00093e:	bf00      	nop
1a000940:	1a001bdc 	.word	0x1a001bdc

1a000944 <Chip_ADC_GetClockIndex>:
1a000944:	4b03      	ldr	r3, [pc, #12]	; (1a000954 <Chip_ADC_GetClockIndex+0x10>)
1a000946:	4298      	cmp	r0, r3
1a000948:	d001      	beq.n	1a00094e <Chip_ADC_GetClockIndex+0xa>
1a00094a:	2003      	movs	r0, #3
1a00094c:	4770      	bx	lr
1a00094e:	2004      	movs	r0, #4
1a000950:	4770      	bx	lr
1a000952:	bf00      	nop
1a000954:	400e4000 	.word	0x400e4000

1a000958 <getClkDiv>:
1a000958:	b570      	push	{r4, r5, r6, lr}
1a00095a:	460d      	mov	r5, r1
1a00095c:	4614      	mov	r4, r2
1a00095e:	461e      	mov	r6, r3
1a000960:	f7ff fff0 	bl	1a000944 <Chip_ADC_GetClockIndex>
1a000964:	f000 faf8 	bl	1a000f58 <Chip_Clock_GetRate>
1a000968:	b155      	cbz	r5, 1a000980 <getClkDiv+0x28>
1a00096a:	fb04 f406 	mul.w	r4, r4, r6
1a00096e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000972:	0064      	lsls	r4, r4, #1
1a000974:	fbb0 f0f4 	udiv	r0, r0, r4
1a000978:	b2c0      	uxtb	r0, r0
1a00097a:	3801      	subs	r0, #1
1a00097c:	b2c0      	uxtb	r0, r0
1a00097e:	bd70      	pop	{r4, r5, r6, pc}
1a000980:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000984:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000988:	e7f1      	b.n	1a00096e <getClkDiv+0x16>
1a00098a:	Address 0x000000001a00098a is out of bounds.


1a00098c <Chip_ADC_Init>:
1a00098c:	b538      	push	{r3, r4, r5, lr}
1a00098e:	4605      	mov	r5, r0
1a000990:	460c      	mov	r4, r1
1a000992:	f7ff ffd7 	bl	1a000944 <Chip_ADC_GetClockIndex>
1a000996:	2301      	movs	r3, #1
1a000998:	461a      	mov	r2, r3
1a00099a:	4619      	mov	r1, r3
1a00099c:	f000 faa4 	bl	1a000ee8 <Chip_Clock_EnableOpts>
1a0009a0:	2100      	movs	r1, #0
1a0009a2:	60e9      	str	r1, [r5, #12]
1a0009a4:	4a08      	ldr	r2, [pc, #32]	; (1a0009c8 <Chip_ADC_Init+0x3c>)
1a0009a6:	6022      	str	r2, [r4, #0]
1a0009a8:	7121      	strb	r1, [r4, #4]
1a0009aa:	7161      	strb	r1, [r4, #5]
1a0009ac:	230b      	movs	r3, #11
1a0009ae:	4628      	mov	r0, r5
1a0009b0:	f7ff ffd2 	bl	1a000958 <getClkDiv>
1a0009b4:	0200      	lsls	r0, r0, #8
1a0009b6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
1a0009ba:	7923      	ldrb	r3, [r4, #4]
1a0009bc:	045b      	lsls	r3, r3, #17
1a0009be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0009c2:	4303      	orrs	r3, r0
1a0009c4:	602b      	str	r3, [r5, #0]
1a0009c6:	bd38      	pop	{r3, r4, r5, pc}
1a0009c8:	00061a80 	.word	0x00061a80

1a0009cc <Chip_ADC_SetSampleRate>:
1a0009cc:	b570      	push	{r4, r5, r6, lr}
1a0009ce:	4605      	mov	r5, r0
1a0009d0:	460e      	mov	r6, r1
1a0009d2:	6804      	ldr	r4, [r0, #0]
1a0009d4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0009d8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
1a0009dc:	600a      	str	r2, [r1, #0]
1a0009de:	790b      	ldrb	r3, [r1, #4]
1a0009e0:	f1c3 030b 	rsb	r3, r3, #11
1a0009e4:	b2db      	uxtb	r3, r3
1a0009e6:	7949      	ldrb	r1, [r1, #5]
1a0009e8:	f7ff ffb6 	bl	1a000958 <getClkDiv>
1a0009ec:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
1a0009f0:	7933      	ldrb	r3, [r6, #4]
1a0009f2:	045b      	lsls	r3, r3, #17
1a0009f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0009f8:	4323      	orrs	r3, r4
1a0009fa:	602b      	str	r3, [r5, #0]
1a0009fc:	bd70      	pop	{r4, r5, r6, pc}

1a0009fe <Chip_ADC_SetResolution>:
1a0009fe:	b508      	push	{r3, lr}
1a000a00:	710a      	strb	r2, [r1, #4]
1a000a02:	680a      	ldr	r2, [r1, #0]
1a000a04:	f7ff ffe2 	bl	1a0009cc <Chip_ADC_SetSampleRate>
1a000a08:	bd08      	pop	{r3, pc}
1a000a0a:	Address 0x000000001a000a0a is out of bounds.


1a000a0c <SystemCoreClockUpdate>:
1a000a0c:	b508      	push	{r3, lr}
1a000a0e:	2069      	movs	r0, #105	; 0x69
1a000a10:	f000 faa2 	bl	1a000f58 <Chip_Clock_GetRate>
1a000a14:	4b01      	ldr	r3, [pc, #4]	; (1a000a1c <SystemCoreClockUpdate+0x10>)
1a000a16:	6018      	str	r0, [r3, #0]
1a000a18:	bd08      	pop	{r3, pc}
1a000a1a:	bf00      	nop
1a000a1c:	10000088 	.word	0x10000088

1a000a20 <pll_calc_divs>:
1a000a20:	b4f0      	push	{r4, r5, r6, r7}
1a000a22:	680b      	ldr	r3, [r1, #0]
1a000a24:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000a28:	d002      	beq.n	1a000a30 <pll_calc_divs+0x10>
1a000a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000a2e:	600b      	str	r3, [r1, #0]
1a000a30:	4607      	mov	r7, r0
1a000a32:	2501      	movs	r5, #1
1a000a34:	e03a      	b.n	1a000aac <pll_calc_divs+0x8c>
1a000a36:	694b      	ldr	r3, [r1, #20]
1a000a38:	fb03 f302 	mul.w	r3, r3, r2
1a000a3c:	fbb3 f3f5 	udiv	r3, r3, r5
1a000a40:	e01c      	b.n	1a000a7c <pll_calc_divs+0x5c>
1a000a42:	461c      	mov	r4, r3
1a000a44:	ebb0 0c04 	subs.w	ip, r0, r4
1a000a48:	d427      	bmi.n	1a000a9a <pll_calc_divs+0x7a>
1a000a4a:	4567      	cmp	r7, ip
1a000a4c:	d906      	bls.n	1a000a5c <pll_calc_divs+0x3c>
1a000a4e:	608d      	str	r5, [r1, #8]
1a000a50:	1c77      	adds	r7, r6, #1
1a000a52:	60cf      	str	r7, [r1, #12]
1a000a54:	610a      	str	r2, [r1, #16]
1a000a56:	618c      	str	r4, [r1, #24]
1a000a58:	61cb      	str	r3, [r1, #28]
1a000a5a:	4667      	mov	r7, ip
1a000a5c:	3201      	adds	r2, #1
1a000a5e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000a62:	dc1d      	bgt.n	1a000aa0 <pll_calc_divs+0x80>
1a000a64:	680c      	ldr	r4, [r1, #0]
1a000a66:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000a6a:	d0e4      	beq.n	1a000a36 <pll_calc_divs+0x16>
1a000a6c:	1c73      	adds	r3, r6, #1
1a000a6e:	fa02 fc03 	lsl.w	ip, r2, r3
1a000a72:	694b      	ldr	r3, [r1, #20]
1a000a74:	fb03 f30c 	mul.w	r3, r3, ip
1a000a78:	fbb3 f3f5 	udiv	r3, r3, r5
1a000a7c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000ab8 <pll_calc_divs+0x98>
1a000a80:	4563      	cmp	r3, ip
1a000a82:	d9eb      	bls.n	1a000a5c <pll_calc_divs+0x3c>
1a000a84:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000abc <pll_calc_divs+0x9c>
1a000a88:	4563      	cmp	r3, ip
1a000a8a:	d809      	bhi.n	1a000aa0 <pll_calc_divs+0x80>
1a000a8c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000a90:	d1d7      	bne.n	1a000a42 <pll_calc_divs+0x22>
1a000a92:	1c74      	adds	r4, r6, #1
1a000a94:	fa23 f404 	lsr.w	r4, r3, r4
1a000a98:	e7d4      	b.n	1a000a44 <pll_calc_divs+0x24>
1a000a9a:	f1cc 0c00 	rsb	ip, ip, #0
1a000a9e:	e7d4      	b.n	1a000a4a <pll_calc_divs+0x2a>
1a000aa0:	3601      	adds	r6, #1
1a000aa2:	2e03      	cmp	r6, #3
1a000aa4:	dc01      	bgt.n	1a000aaa <pll_calc_divs+0x8a>
1a000aa6:	2201      	movs	r2, #1
1a000aa8:	e7d9      	b.n	1a000a5e <pll_calc_divs+0x3e>
1a000aaa:	3501      	adds	r5, #1
1a000aac:	2d04      	cmp	r5, #4
1a000aae:	dc01      	bgt.n	1a000ab4 <pll_calc_divs+0x94>
1a000ab0:	2600      	movs	r6, #0
1a000ab2:	e7f6      	b.n	1a000aa2 <pll_calc_divs+0x82>
1a000ab4:	bcf0      	pop	{r4, r5, r6, r7}
1a000ab6:	4770      	bx	lr
1a000ab8:	094c5eff 	.word	0x094c5eff
1a000abc:	1312d000 	.word	0x1312d000

1a000ac0 <pll_get_frac>:
1a000ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ac2:	b099      	sub	sp, #100	; 0x64
1a000ac4:	4605      	mov	r5, r0
1a000ac6:	460c      	mov	r4, r1
1a000ac8:	225c      	movs	r2, #92	; 0x5c
1a000aca:	2100      	movs	r1, #0
1a000acc:	a801      	add	r0, sp, #4
1a000ace:	f001 f813 	bl	1a001af8 <memset>
1a000ad2:	2380      	movs	r3, #128	; 0x80
1a000ad4:	9300      	str	r3, [sp, #0]
1a000ad6:	6963      	ldr	r3, [r4, #20]
1a000ad8:	9305      	str	r3, [sp, #20]
1a000ada:	7923      	ldrb	r3, [r4, #4]
1a000adc:	f88d 3004 	strb.w	r3, [sp, #4]
1a000ae0:	4669      	mov	r1, sp
1a000ae2:	4628      	mov	r0, r5
1a000ae4:	f7ff ff9c 	bl	1a000a20 <pll_calc_divs>
1a000ae8:	9b06      	ldr	r3, [sp, #24]
1a000aea:	42ab      	cmp	r3, r5
1a000aec:	d027      	beq.n	1a000b3e <pll_get_frac+0x7e>
1a000aee:	1aeb      	subs	r3, r5, r3
1a000af0:	d42e      	bmi.n	1a000b50 <pll_get_frac+0x90>
1a000af2:	461e      	mov	r6, r3
1a000af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000afa:	9310      	str	r3, [sp, #64]	; 0x40
1a000afc:	6963      	ldr	r3, [r4, #20]
1a000afe:	9315      	str	r3, [sp, #84]	; 0x54
1a000b00:	7923      	ldrb	r3, [r4, #4]
1a000b02:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
1a000b06:	a910      	add	r1, sp, #64	; 0x40
1a000b08:	4628      	mov	r0, r5
1a000b0a:	f7ff ff89 	bl	1a000a20 <pll_calc_divs>
1a000b0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000b10:	42ab      	cmp	r3, r5
1a000b12:	d01f      	beq.n	1a000b54 <pll_get_frac+0x94>
1a000b14:	1aeb      	subs	r3, r5, r3
1a000b16:	d425      	bmi.n	1a000b64 <pll_get_frac+0xa4>
1a000b18:	461f      	mov	r7, r3
1a000b1a:	4b2b      	ldr	r3, [pc, #172]	; (1a000bc8 <pll_get_frac+0x108>)
1a000b1c:	429d      	cmp	r5, r3
1a000b1e:	d923      	bls.n	1a000b68 <pll_get_frac+0xa8>
1a000b20:	980e      	ldr	r0, [sp, #56]	; 0x38
1a000b22:	1a2d      	subs	r5, r5, r0
1a000b24:	d433      	bmi.n	1a000b8e <pll_get_frac+0xce>
1a000b26:	42ae      	cmp	r6, r5
1a000b28:	dc3b      	bgt.n	1a000ba2 <pll_get_frac+0xe2>
1a000b2a:	42be      	cmp	r6, r7
1a000b2c:	dc31      	bgt.n	1a000b92 <pll_get_frac+0xd2>
1a000b2e:	466d      	mov	r5, sp
1a000b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b3c:	e006      	b.n	1a000b4c <pll_get_frac+0x8c>
1a000b3e:	466d      	mov	r5, sp
1a000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b4c:	b019      	add	sp, #100	; 0x64
1a000b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000b50:	425b      	negs	r3, r3
1a000b52:	e7ce      	b.n	1a000af2 <pll_get_frac+0x32>
1a000b54:	ad10      	add	r5, sp, #64	; 0x40
1a000b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b62:	e7f3      	b.n	1a000b4c <pll_get_frac+0x8c>
1a000b64:	425b      	negs	r3, r3
1a000b66:	e7d7      	b.n	1a000b18 <pll_get_frac+0x58>
1a000b68:	2340      	movs	r3, #64	; 0x40
1a000b6a:	9308      	str	r3, [sp, #32]
1a000b6c:	6963      	ldr	r3, [r4, #20]
1a000b6e:	930d      	str	r3, [sp, #52]	; 0x34
1a000b70:	a908      	add	r1, sp, #32
1a000b72:	4628      	mov	r0, r5
1a000b74:	f7ff ff54 	bl	1a000a20 <pll_calc_divs>
1a000b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000b7a:	42ab      	cmp	r3, r5
1a000b7c:	d1d0      	bne.n	1a000b20 <pll_get_frac+0x60>
1a000b7e:	ad08      	add	r5, sp, #32
1a000b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b8c:	e7de      	b.n	1a000b4c <pll_get_frac+0x8c>
1a000b8e:	426d      	negs	r5, r5
1a000b90:	e7c9      	b.n	1a000b26 <pll_get_frac+0x66>
1a000b92:	ad10      	add	r5, sp, #64	; 0x40
1a000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ba0:	e7d4      	b.n	1a000b4c <pll_get_frac+0x8c>
1a000ba2:	42af      	cmp	r7, r5
1a000ba4:	db07      	blt.n	1a000bb6 <pll_get_frac+0xf6>
1a000ba6:	ad08      	add	r5, sp, #32
1a000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bb4:	e7ca      	b.n	1a000b4c <pll_get_frac+0x8c>
1a000bb6:	ad10      	add	r5, sp, #64	; 0x40
1a000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bc4:	e7c2      	b.n	1a000b4c <pll_get_frac+0x8c>
1a000bc6:	bf00      	nop
1a000bc8:	068e7780 	.word	0x068e7780

1a000bcc <Chip_Clock_FindBaseClock>:
1a000bcc:	b430      	push	{r4, r5}
1a000bce:	4605      	mov	r5, r0
1a000bd0:	2300      	movs	r3, #0
1a000bd2:	201c      	movs	r0, #28
1a000bd4:	e000      	b.n	1a000bd8 <Chip_Clock_FindBaseClock+0xc>
1a000bd6:	3301      	adds	r3, #1
1a000bd8:	281c      	cmp	r0, #28
1a000bda:	d117      	bne.n	1a000c0c <Chip_Clock_FindBaseClock+0x40>
1a000bdc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000be0:	490b      	ldr	r1, [pc, #44]	; (1a000c10 <Chip_Clock_FindBaseClock+0x44>)
1a000be2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
1a000be6:	7911      	ldrb	r1, [r2, #4]
1a000be8:	4281      	cmp	r1, r0
1a000bea:	d00f      	beq.n	1a000c0c <Chip_Clock_FindBaseClock+0x40>
1a000bec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000bf0:	4c07      	ldr	r4, [pc, #28]	; (1a000c10 <Chip_Clock_FindBaseClock+0x44>)
1a000bf2:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000bf6:	42aa      	cmp	r2, r5
1a000bf8:	d8ed      	bhi.n	1a000bd6 <Chip_Clock_FindBaseClock+0xa>
1a000bfa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000bfe:	eb04 0242 	add.w	r2, r4, r2, lsl #1
1a000c02:	8852      	ldrh	r2, [r2, #2]
1a000c04:	42aa      	cmp	r2, r5
1a000c06:	d3e6      	bcc.n	1a000bd6 <Chip_Clock_FindBaseClock+0xa>
1a000c08:	4608      	mov	r0, r1
1a000c0a:	e7e5      	b.n	1a000bd8 <Chip_Clock_FindBaseClock+0xc>
1a000c0c:	bc30      	pop	{r4, r5}
1a000c0e:	4770      	bx	lr
1a000c10:	1a001bf4 	.word	0x1a001bf4

1a000c14 <Chip_Clock_EnableCrystal>:
1a000c14:	b082      	sub	sp, #8
1a000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000c1a:	9301      	str	r3, [sp, #4]
1a000c1c:	4a0d      	ldr	r2, [pc, #52]	; (1a000c54 <Chip_Clock_EnableCrystal+0x40>)
1a000c1e:	6993      	ldr	r3, [r2, #24]
1a000c20:	f023 0102 	bic.w	r1, r3, #2
1a000c24:	6992      	ldr	r2, [r2, #24]
1a000c26:	428a      	cmp	r2, r1
1a000c28:	d001      	beq.n	1a000c2e <Chip_Clock_EnableCrystal+0x1a>
1a000c2a:	4a0a      	ldr	r2, [pc, #40]	; (1a000c54 <Chip_Clock_EnableCrystal+0x40>)
1a000c2c:	6191      	str	r1, [r2, #24]
1a000c2e:	f023 0303 	bic.w	r3, r3, #3
1a000c32:	4a09      	ldr	r2, [pc, #36]	; (1a000c58 <Chip_Clock_EnableCrystal+0x44>)
1a000c34:	6811      	ldr	r1, [r2, #0]
1a000c36:	4a09      	ldr	r2, [pc, #36]	; (1a000c5c <Chip_Clock_EnableCrystal+0x48>)
1a000c38:	4291      	cmp	r1, r2
1a000c3a:	d901      	bls.n	1a000c40 <Chip_Clock_EnableCrystal+0x2c>
1a000c3c:	f043 0304 	orr.w	r3, r3, #4
1a000c40:	4a04      	ldr	r2, [pc, #16]	; (1a000c54 <Chip_Clock_EnableCrystal+0x40>)
1a000c42:	6193      	str	r3, [r2, #24]
1a000c44:	9b01      	ldr	r3, [sp, #4]
1a000c46:	1e5a      	subs	r2, r3, #1
1a000c48:	9201      	str	r2, [sp, #4]
1a000c4a:	2b00      	cmp	r3, #0
1a000c4c:	d1fa      	bne.n	1a000c44 <Chip_Clock_EnableCrystal+0x30>
1a000c4e:	b002      	add	sp, #8
1a000c50:	4770      	bx	lr
1a000c52:	bf00      	nop
1a000c54:	40050000 	.word	0x40050000
1a000c58:	1a001b60 	.word	0x1a001b60
1a000c5c:	01312cff 	.word	0x01312cff

1a000c60 <Chip_Clock_GetDividerSource>:
1a000c60:	3012      	adds	r0, #18
1a000c62:	4b05      	ldr	r3, [pc, #20]	; (1a000c78 <Chip_Clock_GetDividerSource+0x18>)
1a000c64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
1a000c68:	f010 0f01 	tst.w	r0, #1
1a000c6c:	d102      	bne.n	1a000c74 <Chip_Clock_GetDividerSource+0x14>
1a000c6e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000c72:	4770      	bx	lr
1a000c74:	2011      	movs	r0, #17
1a000c76:	4770      	bx	lr
1a000c78:	40050000 	.word	0x40050000

1a000c7c <Chip_Clock_GetDividerDivisor>:
1a000c7c:	f100 0212 	add.w	r2, r0, #18
1a000c80:	4b03      	ldr	r3, [pc, #12]	; (1a000c90 <Chip_Clock_GetDividerDivisor+0x14>)
1a000c82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000c86:	4b03      	ldr	r3, [pc, #12]	; (1a000c94 <Chip_Clock_GetDividerDivisor+0x18>)
1a000c88:	5c18      	ldrb	r0, [r3, r0]
1a000c8a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000c8e:	4770      	bx	lr
1a000c90:	40050000 	.word	0x40050000
1a000c94:	1a001bec 	.word	0x1a001bec

1a000c98 <Chip_Clock_GetClockInputHz>:
1a000c98:	b508      	push	{r3, lr}
1a000c9a:	2810      	cmp	r0, #16
1a000c9c:	d80a      	bhi.n	1a000cb4 <Chip_Clock_GetClockInputHz+0x1c>
1a000c9e:	e8df f000 	tbb	[pc, r0]
1a000ca2:	0b44      	.short	0x0b44
1a000ca4:	0921180d 	.word	0x0921180d
1a000ca8:	2d2a2724 	.word	0x2d2a2724
1a000cac:	34300909 	.word	0x34300909
1a000cb0:	3c38      	.short	0x3c38
1a000cb2:	40          	.byte	0x40
1a000cb3:	00          	.byte	0x00
1a000cb4:	2000      	movs	r0, #0
1a000cb6:	bd08      	pop	{r3, pc}
1a000cb8:	481e      	ldr	r0, [pc, #120]	; (1a000d34 <Chip_Clock_GetClockInputHz+0x9c>)
1a000cba:	e7fc      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000cbc:	4b1e      	ldr	r3, [pc, #120]	; (1a000d38 <Chip_Clock_GetClockInputHz+0xa0>)
1a000cbe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000cc2:	f003 0307 	and.w	r3, r3, #7
1a000cc6:	2b04      	cmp	r3, #4
1a000cc8:	d001      	beq.n	1a000cce <Chip_Clock_GetClockInputHz+0x36>
1a000cca:	481c      	ldr	r0, [pc, #112]	; (1a000d3c <Chip_Clock_GetClockInputHz+0xa4>)
1a000ccc:	e7f3      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000cce:	2000      	movs	r0, #0
1a000cd0:	e7f1      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000cd2:	4b19      	ldr	r3, [pc, #100]	; (1a000d38 <Chip_Clock_GetClockInputHz+0xa0>)
1a000cd4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000cd8:	f003 0307 	and.w	r3, r3, #7
1a000cdc:	2b04      	cmp	r3, #4
1a000cde:	d027      	beq.n	1a000d30 <Chip_Clock_GetClockInputHz+0x98>
1a000ce0:	4816      	ldr	r0, [pc, #88]	; (1a000d3c <Chip_Clock_GetClockInputHz+0xa4>)
1a000ce2:	e7e8      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000ce4:	4b16      	ldr	r3, [pc, #88]	; (1a000d40 <Chip_Clock_GetClockInputHz+0xa8>)
1a000ce6:	6818      	ldr	r0, [r3, #0]
1a000ce8:	e7e5      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000cea:	4b16      	ldr	r3, [pc, #88]	; (1a000d44 <Chip_Clock_GetClockInputHz+0xac>)
1a000cec:	6818      	ldr	r0, [r3, #0]
1a000cee:	e7e2      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000cf0:	4b15      	ldr	r3, [pc, #84]	; (1a000d48 <Chip_Clock_GetClockInputHz+0xb0>)
1a000cf2:	6818      	ldr	r0, [r3, #0]
1a000cf4:	e7df      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000cf6:	4b14      	ldr	r3, [pc, #80]	; (1a000d48 <Chip_Clock_GetClockInputHz+0xb0>)
1a000cf8:	6858      	ldr	r0, [r3, #4]
1a000cfa:	e7dc      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000cfc:	f000 f868 	bl	1a000dd0 <Chip_Clock_GetMainPLLHz>
1a000d00:	e7d9      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d02:	2100      	movs	r1, #0
1a000d04:	f000 f898 	bl	1a000e38 <Chip_Clock_GetDivRate>
1a000d08:	e7d5      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d0a:	2101      	movs	r1, #1
1a000d0c:	f000 f894 	bl	1a000e38 <Chip_Clock_GetDivRate>
1a000d10:	e7d1      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d12:	2102      	movs	r1, #2
1a000d14:	f000 f890 	bl	1a000e38 <Chip_Clock_GetDivRate>
1a000d18:	e7cd      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d1a:	2103      	movs	r1, #3
1a000d1c:	f000 f88c 	bl	1a000e38 <Chip_Clock_GetDivRate>
1a000d20:	e7c9      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d22:	2104      	movs	r1, #4
1a000d24:	f000 f888 	bl	1a000e38 <Chip_Clock_GetDivRate>
1a000d28:	e7c5      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000d2e:	e7c2      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d30:	4806      	ldr	r0, [pc, #24]	; (1a000d4c <Chip_Clock_GetClockInputHz+0xb4>)
1a000d32:	e7c0      	b.n	1a000cb6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d34:	00b71b00 	.word	0x00b71b00
1a000d38:	40043000 	.word	0x40043000
1a000d3c:	017d7840 	.word	0x017d7840
1a000d40:	1a001b34 	.word	0x1a001b34
1a000d44:	1a001b60 	.word	0x1a001b60
1a000d48:	10000068 	.word	0x10000068
1a000d4c:	02faf080 	.word	0x02faf080

1a000d50 <Chip_Clock_CalcMainPLLValue>:
1a000d50:	b538      	push	{r3, r4, r5, lr}
1a000d52:	4605      	mov	r5, r0
1a000d54:	460c      	mov	r4, r1
1a000d56:	7908      	ldrb	r0, [r1, #4]
1a000d58:	f7ff ff9e 	bl	1a000c98 <Chip_Clock_GetClockInputHz>
1a000d5c:	6160      	str	r0, [r4, #20]
1a000d5e:	4b19      	ldr	r3, [pc, #100]	; (1a000dc4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000d60:	442b      	add	r3, r5
1a000d62:	4a19      	ldr	r2, [pc, #100]	; (1a000dc8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000d64:	4293      	cmp	r3, r2
1a000d66:	d821      	bhi.n	1a000dac <Chip_Clock_CalcMainPLLValue+0x5c>
1a000d68:	b318      	cbz	r0, 1a000db2 <Chip_Clock_CalcMainPLLValue+0x62>
1a000d6a:	2380      	movs	r3, #128	; 0x80
1a000d6c:	6023      	str	r3, [r4, #0]
1a000d6e:	2300      	movs	r3, #0
1a000d70:	60a3      	str	r3, [r4, #8]
1a000d72:	60e3      	str	r3, [r4, #12]
1a000d74:	fbb5 f3f0 	udiv	r3, r5, r0
1a000d78:	6123      	str	r3, [r4, #16]
1a000d7a:	4a14      	ldr	r2, [pc, #80]	; (1a000dcc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000d7c:	4295      	cmp	r5, r2
1a000d7e:	d903      	bls.n	1a000d88 <Chip_Clock_CalcMainPLLValue+0x38>
1a000d80:	fb03 f000 	mul.w	r0, r3, r0
1a000d84:	42a8      	cmp	r0, r5
1a000d86:	d007      	beq.n	1a000d98 <Chip_Clock_CalcMainPLLValue+0x48>
1a000d88:	4621      	mov	r1, r4
1a000d8a:	4628      	mov	r0, r5
1a000d8c:	f7ff fe98 	bl	1a000ac0 <pll_get_frac>
1a000d90:	68a3      	ldr	r3, [r4, #8]
1a000d92:	b18b      	cbz	r3, 1a000db8 <Chip_Clock_CalcMainPLLValue+0x68>
1a000d94:	3b01      	subs	r3, #1
1a000d96:	60a3      	str	r3, [r4, #8]
1a000d98:	6923      	ldr	r3, [r4, #16]
1a000d9a:	b183      	cbz	r3, 1a000dbe <Chip_Clock_CalcMainPLLValue+0x6e>
1a000d9c:	68e2      	ldr	r2, [r4, #12]
1a000d9e:	b10a      	cbz	r2, 1a000da4 <Chip_Clock_CalcMainPLLValue+0x54>
1a000da0:	3a01      	subs	r2, #1
1a000da2:	60e2      	str	r2, [r4, #12]
1a000da4:	3b01      	subs	r3, #1
1a000da6:	6123      	str	r3, [r4, #16]
1a000da8:	2000      	movs	r0, #0
1a000daa:	bd38      	pop	{r3, r4, r5, pc}
1a000dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000db0:	e7fb      	b.n	1a000daa <Chip_Clock_CalcMainPLLValue+0x5a>
1a000db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000db6:	e7f8      	b.n	1a000daa <Chip_Clock_CalcMainPLLValue+0x5a>
1a000db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dbc:	e7f5      	b.n	1a000daa <Chip_Clock_CalcMainPLLValue+0x5a>
1a000dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dc2:	e7f2      	b.n	1a000daa <Chip_Clock_CalcMainPLLValue+0x5a>
1a000dc4:	ff6b3a10 	.word	0xff6b3a10
1a000dc8:	0b940510 	.word	0x0b940510
1a000dcc:	094c5eff 	.word	0x094c5eff

1a000dd0 <Chip_Clock_GetMainPLLHz>:
1a000dd0:	b570      	push	{r4, r5, r6, lr}
1a000dd2:	b082      	sub	sp, #8
1a000dd4:	4d16      	ldr	r5, [pc, #88]	; (1a000e30 <Chip_Clock_GetMainPLLHz+0x60>)
1a000dd6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
1a000dd8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000ddc:	f7ff ff5c 	bl	1a000c98 <Chip_Clock_GetClockInputHz>
1a000de0:	4606      	mov	r6, r0
1a000de2:	4a14      	ldr	r2, [pc, #80]	; (1a000e34 <Chip_Clock_GetMainPLLHz+0x64>)
1a000de4:	9201      	str	r2, [sp, #4]
1a000de6:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000de8:	f010 0001 	ands.w	r0, r0, #1
1a000dec:	d01d      	beq.n	1a000e2a <Chip_Clock_GetMainPLLHz+0x5a>
1a000dee:	f3c4 4207 	ubfx	r2, r4, #16, #8
1a000df2:	f3c4 3101 	ubfx	r1, r4, #12, #2
1a000df6:	f3c4 2501 	ubfx	r5, r4, #8, #2
1a000dfa:	f3c4 1080 	ubfx	r0, r4, #6, #1
1a000dfe:	3201      	adds	r2, #1
1a000e00:	3101      	adds	r1, #1
1a000e02:	ab02      	add	r3, sp, #8
1a000e04:	441d      	add	r5, r3
1a000e06:	f815 3c04 	ldrb.w	r3, [r5, #-4]
1a000e0a:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000e0e:	d108      	bne.n	1a000e22 <Chip_Clock_GetMainPLLHz+0x52>
1a000e10:	b938      	cbnz	r0, 1a000e22 <Chip_Clock_GetMainPLLHz+0x52>
1a000e12:	0058      	lsls	r0, r3, #1
1a000e14:	fbb2 f2f0 	udiv	r2, r2, r0
1a000e18:	fbb6 f0f1 	udiv	r0, r6, r1
1a000e1c:	fb00 f002 	mul.w	r0, r0, r2
1a000e20:	e003      	b.n	1a000e2a <Chip_Clock_GetMainPLLHz+0x5a>
1a000e22:	fbb6 f0f1 	udiv	r0, r6, r1
1a000e26:	fb02 f000 	mul.w	r0, r2, r0
1a000e2a:	b002      	add	sp, #8
1a000e2c:	bd70      	pop	{r4, r5, r6, pc}
1a000e2e:	bf00      	nop
1a000e30:	40050000 	.word	0x40050000
1a000e34:	08040201 	.word	0x08040201

1a000e38 <Chip_Clock_GetDivRate>:
1a000e38:	b538      	push	{r3, r4, r5, lr}
1a000e3a:	460c      	mov	r4, r1
1a000e3c:	4608      	mov	r0, r1
1a000e3e:	f7ff ff0f 	bl	1a000c60 <Chip_Clock_GetDividerSource>
1a000e42:	4605      	mov	r5, r0
1a000e44:	4620      	mov	r0, r4
1a000e46:	f7ff ff19 	bl	1a000c7c <Chip_Clock_GetDividerDivisor>
1a000e4a:	4604      	mov	r4, r0
1a000e4c:	4628      	mov	r0, r5
1a000e4e:	f7ff ff23 	bl	1a000c98 <Chip_Clock_GetClockInputHz>
1a000e52:	3401      	adds	r4, #1
1a000e54:	fbb0 f0f4 	udiv	r0, r0, r4
1a000e58:	bd38      	pop	{r3, r4, r5, pc}
1a000e5a:	Address 0x000000001a000e5a is out of bounds.


1a000e5c <Chip_Clock_SetBaseClock>:
1a000e5c:	b430      	push	{r4, r5}
1a000e5e:	f100 0416 	add.w	r4, r0, #22
1a000e62:	00a4      	lsls	r4, r4, #2
1a000e64:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000e68:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000e6c:	6864      	ldr	r4, [r4, #4]
1a000e6e:	281b      	cmp	r0, #27
1a000e70:	d813      	bhi.n	1a000e9a <Chip_Clock_SetBaseClock+0x3e>
1a000e72:	2911      	cmp	r1, #17
1a000e74:	d01a      	beq.n	1a000eac <Chip_Clock_SetBaseClock+0x50>
1a000e76:	4d0e      	ldr	r5, [pc, #56]	; (1a000eb0 <Chip_Clock_SetBaseClock+0x54>)
1a000e78:	4025      	ands	r5, r4
1a000e7a:	b10a      	cbz	r2, 1a000e80 <Chip_Clock_SetBaseClock+0x24>
1a000e7c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
1a000e80:	b10b      	cbz	r3, 1a000e86 <Chip_Clock_SetBaseClock+0x2a>
1a000e82:	f045 0501 	orr.w	r5, r5, #1
1a000e86:	ea45 6101 	orr.w	r1, r5, r1, lsl #24
1a000e8a:	3016      	adds	r0, #22
1a000e8c:	0080      	lsls	r0, r0, #2
1a000e8e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e92:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e96:	6041      	str	r1, [r0, #4]
1a000e98:	e008      	b.n	1a000eac <Chip_Clock_SetBaseClock+0x50>
1a000e9a:	f044 0401 	orr.w	r4, r4, #1
1a000e9e:	3016      	adds	r0, #22
1a000ea0:	0080      	lsls	r0, r0, #2
1a000ea2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ea6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000eaa:	6044      	str	r4, [r0, #4]
1a000eac:	bc30      	pop	{r4, r5}
1a000eae:	4770      	bx	lr
1a000eb0:	e0fff7fe 	.word	0xe0fff7fe

1a000eb4 <Chip_Clock_GetBaseClock>:
1a000eb4:	281b      	cmp	r0, #27
1a000eb6:	d80d      	bhi.n	1a000ed4 <Chip_Clock_GetBaseClock+0x20>
1a000eb8:	f100 0316 	add.w	r3, r0, #22
1a000ebc:	009b      	lsls	r3, r3, #2
1a000ebe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a000ec2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a000ec6:	6858      	ldr	r0, [r3, #4]
1a000ec8:	f010 0f01 	tst.w	r0, #1
1a000ecc:	d104      	bne.n	1a000ed8 <Chip_Clock_GetBaseClock+0x24>
1a000ece:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000ed2:	4770      	bx	lr
1a000ed4:	2011      	movs	r0, #17
1a000ed6:	4770      	bx	lr
1a000ed8:	2011      	movs	r0, #17
1a000eda:	4770      	bx	lr

1a000edc <Chip_Clock_GetBaseClocktHz>:
1a000edc:	b508      	push	{r3, lr}
1a000ede:	f7ff ffe9 	bl	1a000eb4 <Chip_Clock_GetBaseClock>
1a000ee2:	f7ff fed9 	bl	1a000c98 <Chip_Clock_GetClockInputHz>
1a000ee6:	bd08      	pop	{r3, pc}

1a000ee8 <Chip_Clock_EnableOpts>:
1a000ee8:	b971      	cbnz	r1, 1a000f08 <Chip_Clock_EnableOpts+0x20>
1a000eea:	2101      	movs	r1, #1
1a000eec:	b10a      	cbz	r2, 1a000ef2 <Chip_Clock_EnableOpts+0xa>
1a000eee:	f041 0104 	orr.w	r1, r1, #4
1a000ef2:	2b02      	cmp	r3, #2
1a000ef4:	d00a      	beq.n	1a000f0c <Chip_Clock_EnableOpts+0x24>
1a000ef6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000efa:	d30a      	bcc.n	1a000f12 <Chip_Clock_EnableOpts+0x2a>
1a000efc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000f00:	4b06      	ldr	r3, [pc, #24]	; (1a000f1c <Chip_Clock_EnableOpts+0x34>)
1a000f02:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000f06:	4770      	bx	lr
1a000f08:	2103      	movs	r1, #3
1a000f0a:	e7ef      	b.n	1a000eec <Chip_Clock_EnableOpts+0x4>
1a000f0c:	f041 0120 	orr.w	r1, r1, #32
1a000f10:	e7f1      	b.n	1a000ef6 <Chip_Clock_EnableOpts+0xe>
1a000f12:	3020      	adds	r0, #32
1a000f14:	4b02      	ldr	r3, [pc, #8]	; (1a000f20 <Chip_Clock_EnableOpts+0x38>)
1a000f16:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000f1a:	4770      	bx	lr
1a000f1c:	40052000 	.word	0x40052000
1a000f20:	40051000 	.word	0x40051000

1a000f24 <Chip_Clock_Enable>:
1a000f24:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f28:	d309      	bcc.n	1a000f3e <Chip_Clock_Enable+0x1a>
1a000f2a:	4a09      	ldr	r2, [pc, #36]	; (1a000f50 <Chip_Clock_Enable+0x2c>)
1a000f2c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000f30:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000f34:	f043 0301 	orr.w	r3, r3, #1
1a000f38:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000f3c:	4770      	bx	lr
1a000f3e:	4a05      	ldr	r2, [pc, #20]	; (1a000f54 <Chip_Clock_Enable+0x30>)
1a000f40:	3020      	adds	r0, #32
1a000f42:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000f46:	f043 0301 	orr.w	r3, r3, #1
1a000f4a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000f4e:	4770      	bx	lr
1a000f50:	40052000 	.word	0x40052000
1a000f54:	40051000 	.word	0x40051000

1a000f58 <Chip_Clock_GetRate>:
1a000f58:	b510      	push	{r4, lr}
1a000f5a:	4603      	mov	r3, r0
1a000f5c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f60:	d308      	bcc.n	1a000f74 <Chip_Clock_GetRate+0x1c>
1a000f62:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a000f66:	490d      	ldr	r1, [pc, #52]	; (1a000f9c <Chip_Clock_GetRate+0x44>)
1a000f68:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a000f6c:	f014 0001 	ands.w	r0, r4, #1
1a000f70:	d106      	bne.n	1a000f80 <Chip_Clock_GetRate+0x28>
1a000f72:	bd10      	pop	{r4, pc}
1a000f74:	f100 0220 	add.w	r2, r0, #32
1a000f78:	4909      	ldr	r1, [pc, #36]	; (1a000fa0 <Chip_Clock_GetRate+0x48>)
1a000f7a:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a000f7e:	e7f5      	b.n	1a000f6c <Chip_Clock_GetRate+0x14>
1a000f80:	4618      	mov	r0, r3
1a000f82:	f7ff fe23 	bl	1a000bcc <Chip_Clock_FindBaseClock>
1a000f86:	f7ff ffa9 	bl	1a000edc <Chip_Clock_GetBaseClocktHz>
1a000f8a:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000f8e:	d103      	bne.n	1a000f98 <Chip_Clock_GetRate+0x40>
1a000f90:	2301      	movs	r3, #1
1a000f92:	fbb0 f0f3 	udiv	r0, r0, r3
1a000f96:	e7ec      	b.n	1a000f72 <Chip_Clock_GetRate+0x1a>
1a000f98:	2302      	movs	r3, #2
1a000f9a:	e7fa      	b.n	1a000f92 <Chip_Clock_GetRate+0x3a>
1a000f9c:	40052000 	.word	0x40052000
1a000fa0:	40051000 	.word	0x40051000

1a000fa4 <Chip_SetupCoreClock>:
1a000fa4:	b570      	push	{r4, r5, r6, lr}
1a000fa6:	b08a      	sub	sp, #40	; 0x28
1a000fa8:	4605      	mov	r5, r0
1a000faa:	460e      	mov	r6, r1
1a000fac:	4614      	mov	r4, r2
1a000fae:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000fb2:	9309      	str	r3, [sp, #36]	; 0x24
1a000fb4:	2806      	cmp	r0, #6
1a000fb6:	d018      	beq.n	1a000fea <Chip_SetupCoreClock+0x46>
1a000fb8:	2300      	movs	r3, #0
1a000fba:	2201      	movs	r2, #1
1a000fbc:	4629      	mov	r1, r5
1a000fbe:	2004      	movs	r0, #4
1a000fc0:	f7ff ff4c 	bl	1a000e5c <Chip_Clock_SetBaseClock>
1a000fc4:	4a4a      	ldr	r2, [pc, #296]	; (1a0010f0 <Chip_SetupCoreClock+0x14c>)
1a000fc6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000fc8:	f043 0301 	orr.w	r3, r3, #1
1a000fcc:	6453      	str	r3, [r2, #68]	; 0x44
1a000fce:	f88d 5008 	strb.w	r5, [sp, #8]
1a000fd2:	a901      	add	r1, sp, #4
1a000fd4:	4630      	mov	r0, r6
1a000fd6:	f7ff febb 	bl	1a000d50 <Chip_Clock_CalcMainPLLValue>
1a000fda:	4b46      	ldr	r3, [pc, #280]	; (1a0010f4 <Chip_SetupCoreClock+0x150>)
1a000fdc:	429e      	cmp	r6, r3
1a000fde:	d916      	bls.n	1a00100e <Chip_SetupCoreClock+0x6a>
1a000fe0:	9b01      	ldr	r3, [sp, #4]
1a000fe2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000fe6:	d003      	beq.n	1a000ff0 <Chip_SetupCoreClock+0x4c>
1a000fe8:	e7fe      	b.n	1a000fe8 <Chip_SetupCoreClock+0x44>
1a000fea:	f7ff fe13 	bl	1a000c14 <Chip_Clock_EnableCrystal>
1a000fee:	e7e3      	b.n	1a000fb8 <Chip_SetupCoreClock+0x14>
1a000ff0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ff4:	d005      	beq.n	1a001002 <Chip_SetupCoreClock+0x5e>
1a000ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ffa:	9301      	str	r3, [sp, #4]
1a000ffc:	2500      	movs	r5, #0
1a000ffe:	2601      	movs	r6, #1
1a001000:	e007      	b.n	1a001012 <Chip_SetupCoreClock+0x6e>
1a001002:	9b04      	ldr	r3, [sp, #16]
1a001004:	3301      	adds	r3, #1
1a001006:	9304      	str	r3, [sp, #16]
1a001008:	2501      	movs	r5, #1
1a00100a:	2600      	movs	r6, #0
1a00100c:	e001      	b.n	1a001012 <Chip_SetupCoreClock+0x6e>
1a00100e:	2500      	movs	r5, #0
1a001010:	462e      	mov	r6, r5
1a001012:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001016:	9b01      	ldr	r3, [sp, #4]
1a001018:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00101c:	9a05      	ldr	r2, [sp, #20]
1a00101e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001022:	9a03      	ldr	r2, [sp, #12]
1a001024:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001028:	9a04      	ldr	r2, [sp, #16]
1a00102a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00102e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001032:	4a2f      	ldr	r2, [pc, #188]	; (1a0010f0 <Chip_SetupCoreClock+0x14c>)
1a001034:	6453      	str	r3, [r2, #68]	; 0x44
1a001036:	4b2e      	ldr	r3, [pc, #184]	; (1a0010f0 <Chip_SetupCoreClock+0x14c>)
1a001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a00103a:	f013 0f01 	tst.w	r3, #1
1a00103e:	d0fa      	beq.n	1a001036 <Chip_SetupCoreClock+0x92>
1a001040:	2300      	movs	r3, #0
1a001042:	2201      	movs	r2, #1
1a001044:	2109      	movs	r1, #9
1a001046:	2004      	movs	r0, #4
1a001048:	f7ff ff08 	bl	1a000e5c <Chip_Clock_SetBaseClock>
1a00104c:	b306      	cbz	r6, 1a001090 <Chip_SetupCoreClock+0xec>
1a00104e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001052:	9309      	str	r3, [sp, #36]	; 0x24
1a001054:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001056:	1e5a      	subs	r2, r3, #1
1a001058:	9209      	str	r2, [sp, #36]	; 0x24
1a00105a:	2b00      	cmp	r3, #0
1a00105c:	d1fa      	bne.n	1a001054 <Chip_SetupCoreClock+0xb0>
1a00105e:	9b01      	ldr	r3, [sp, #4]
1a001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001064:	9301      	str	r3, [sp, #4]
1a001066:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00106a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00106e:	9a05      	ldr	r2, [sp, #20]
1a001070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001074:	9a03      	ldr	r2, [sp, #12]
1a001076:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00107a:	9a04      	ldr	r2, [sp, #16]
1a00107c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001084:	4a1a      	ldr	r2, [pc, #104]	; (1a0010f0 <Chip_SetupCoreClock+0x14c>)
1a001086:	6453      	str	r3, [r2, #68]	; 0x44
1a001088:	2c00      	cmp	r4, #0
1a00108a:	d12e      	bne.n	1a0010ea <Chip_SetupCoreClock+0x146>
1a00108c:	b00a      	add	sp, #40	; 0x28
1a00108e:	bd70      	pop	{r4, r5, r6, pc}
1a001090:	2d00      	cmp	r5, #0
1a001092:	d0f9      	beq.n	1a001088 <Chip_SetupCoreClock+0xe4>
1a001094:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001098:	9309      	str	r3, [sp, #36]	; 0x24
1a00109a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00109c:	1e5a      	subs	r2, r3, #1
1a00109e:	9209      	str	r2, [sp, #36]	; 0x24
1a0010a0:	2b00      	cmp	r3, #0
1a0010a2:	d1fa      	bne.n	1a00109a <Chip_SetupCoreClock+0xf6>
1a0010a4:	9b04      	ldr	r3, [sp, #16]
1a0010a6:	1e5a      	subs	r2, r3, #1
1a0010a8:	9204      	str	r2, [sp, #16]
1a0010aa:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0010ae:	9b01      	ldr	r3, [sp, #4]
1a0010b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0010b4:	9905      	ldr	r1, [sp, #20]
1a0010b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0010ba:	9903      	ldr	r1, [sp, #12]
1a0010bc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0010c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0010c8:	4a09      	ldr	r2, [pc, #36]	; (1a0010f0 <Chip_SetupCoreClock+0x14c>)
1a0010ca:	6453      	str	r3, [r2, #68]	; 0x44
1a0010cc:	e7dc      	b.n	1a001088 <Chip_SetupCoreClock+0xe4>
1a0010ce:	480a      	ldr	r0, [pc, #40]	; (1a0010f8 <Chip_SetupCoreClock+0x154>)
1a0010d0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0010d4:	78cb      	ldrb	r3, [r1, #3]
1a0010d6:	788a      	ldrb	r2, [r1, #2]
1a0010d8:	7849      	ldrb	r1, [r1, #1]
1a0010da:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0010de:	f7ff febd 	bl	1a000e5c <Chip_Clock_SetBaseClock>
1a0010e2:	3401      	adds	r4, #1
1a0010e4:	2c11      	cmp	r4, #17
1a0010e6:	d9f2      	bls.n	1a0010ce <Chip_SetupCoreClock+0x12a>
1a0010e8:	e7d0      	b.n	1a00108c <Chip_SetupCoreClock+0xe8>
1a0010ea:	2400      	movs	r4, #0
1a0010ec:	e7fa      	b.n	1a0010e4 <Chip_SetupCoreClock+0x140>
1a0010ee:	bf00      	nop
1a0010f0:	40050000 	.word	0x40050000
1a0010f4:	068e7780 	.word	0x068e7780
1a0010f8:	1a001c60 	.word	0x1a001c60

1a0010fc <Chip_GPIO_Init>:
1a0010fc:	4770      	bx	lr
1a0010fe:	Address 0x000000001a0010fe is out of bounds.


1a001100 <Chip_SSP_GetClockIndex>:
1a001100:	4b03      	ldr	r3, [pc, #12]	; (1a001110 <Chip_SSP_GetClockIndex+0x10>)
1a001102:	4298      	cmp	r0, r3
1a001104:	d001      	beq.n	1a00110a <Chip_SSP_GetClockIndex+0xa>
1a001106:	2083      	movs	r0, #131	; 0x83
1a001108:	4770      	bx	lr
1a00110a:	20a5      	movs	r0, #165	; 0xa5
1a00110c:	4770      	bx	lr
1a00110e:	bf00      	nop
1a001110:	400c5000 	.word	0x400c5000

1a001114 <Chip_SSP_GetPeriphClockIndex>:
1a001114:	4b04      	ldr	r3, [pc, #16]	; (1a001128 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001116:	4298      	cmp	r0, r3
1a001118:	d002      	beq.n	1a001120 <Chip_SSP_GetPeriphClockIndex+0xc>
1a00111a:	f240 2002 	movw	r0, #514	; 0x202
1a00111e:	4770      	bx	lr
1a001120:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001124:	4770      	bx	lr
1a001126:	bf00      	nop
1a001128:	400c5000 	.word	0x400c5000

1a00112c <Chip_SSP_SetClockRate>:
1a00112c:	6803      	ldr	r3, [r0, #0]
1a00112e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1a001132:	0209      	lsls	r1, r1, #8
1a001134:	b289      	uxth	r1, r1
1a001136:	4319      	orrs	r1, r3
1a001138:	6001      	str	r1, [r0, #0]
1a00113a:	6102      	str	r2, [r0, #16]
1a00113c:	4770      	bx	lr

1a00113e <Chip_SSP_SetBitRate>:
1a00113e:	b570      	push	{r4, r5, r6, lr}
1a001140:	4606      	mov	r6, r0
1a001142:	460c      	mov	r4, r1
1a001144:	f7ff ffe6 	bl	1a001114 <Chip_SSP_GetPeriphClockIndex>
1a001148:	f7ff ff06 	bl	1a000f58 <Chip_Clock_GetRate>
1a00114c:	2202      	movs	r2, #2
1a00114e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001152:	2100      	movs	r1, #0
1a001154:	e000      	b.n	1a001158 <Chip_SSP_SetBitRate+0x1a>
1a001156:	4629      	mov	r1, r5
1a001158:	42a3      	cmp	r3, r4
1a00115a:	d90b      	bls.n	1a001174 <Chip_SSP_SetBitRate+0x36>
1a00115c:	1c4d      	adds	r5, r1, #1
1a00115e:	fb01 2302 	mla	r3, r1, r2, r2
1a001162:	fbb0 f3f3 	udiv	r3, r0, r3
1a001166:	429c      	cmp	r4, r3
1a001168:	d2f6      	bcs.n	1a001158 <Chip_SSP_SetBitRate+0x1a>
1a00116a:	2dff      	cmp	r5, #255	; 0xff
1a00116c:	d9f3      	bls.n	1a001156 <Chip_SSP_SetBitRate+0x18>
1a00116e:	3202      	adds	r2, #2
1a001170:	2100      	movs	r1, #0
1a001172:	e7f1      	b.n	1a001158 <Chip_SSP_SetBitRate+0x1a>
1a001174:	4630      	mov	r0, r6
1a001176:	f7ff ffd9 	bl	1a00112c <Chip_SSP_SetClockRate>
1a00117a:	bd70      	pop	{r4, r5, r6, pc}

1a00117c <Chip_SSP_Init>:
1a00117c:	b510      	push	{r4, lr}
1a00117e:	4604      	mov	r4, r0
1a001180:	f7ff ffbe 	bl	1a001100 <Chip_SSP_GetClockIndex>
1a001184:	f7ff fece 	bl	1a000f24 <Chip_Clock_Enable>
1a001188:	4620      	mov	r0, r4
1a00118a:	f7ff ffc3 	bl	1a001114 <Chip_SSP_GetPeriphClockIndex>
1a00118e:	f7ff fec9 	bl	1a000f24 <Chip_Clock_Enable>
1a001192:	6863      	ldr	r3, [r4, #4]
1a001194:	f023 0304 	bic.w	r3, r3, #4
1a001198:	6063      	str	r3, [r4, #4]
1a00119a:	6823      	ldr	r3, [r4, #0]
1a00119c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0011a0:	f043 0307 	orr.w	r3, r3, #7
1a0011a4:	6023      	str	r3, [r4, #0]
1a0011a6:	4902      	ldr	r1, [pc, #8]	; (1a0011b0 <Chip_SSP_Init+0x34>)
1a0011a8:	4620      	mov	r0, r4
1a0011aa:	f7ff ffc8 	bl	1a00113e <Chip_SSP_SetBitRate>
1a0011ae:	bd10      	pop	{r4, pc}
1a0011b0:	000186a0 	.word	0x000186a0

1a0011b4 <Chip_I2C_EventHandler>:
1a0011b4:	2901      	cmp	r1, #1
1a0011b6:	d109      	bne.n	1a0011cc <Chip_I2C_EventHandler+0x18>
1a0011b8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0011bc:	4b04      	ldr	r3, [pc, #16]	; (1a0011d0 <Chip_I2C_EventHandler+0x1c>)
1a0011be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a0011c2:	6902      	ldr	r2, [r0, #16]
1a0011c4:	7d13      	ldrb	r3, [r2, #20]
1a0011c6:	b2db      	uxtb	r3, r3
1a0011c8:	2b04      	cmp	r3, #4
1a0011ca:	d0fb      	beq.n	1a0011c4 <Chip_I2C_EventHandler+0x10>
1a0011cc:	4770      	bx	lr
1a0011ce:	bf00      	nop
1a0011d0:	10000000 	.word	0x10000000

1a0011d4 <Chip_I2C_Init>:
1a0011d4:	b570      	push	{r4, r5, r6, lr}
1a0011d6:	4604      	mov	r4, r0
1a0011d8:	4e07      	ldr	r6, [pc, #28]	; (1a0011f8 <Chip_I2C_Init+0x24>)
1a0011da:	00c5      	lsls	r5, r0, #3
1a0011dc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0011e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a0011e4:	8898      	ldrh	r0, [r3, #4]
1a0011e6:	f7ff fe9d 	bl	1a000f24 <Chip_Clock_Enable>
1a0011ea:	1b2c      	subs	r4, r5, r4
1a0011ec:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
1a0011f0:	226c      	movs	r2, #108	; 0x6c
1a0011f2:	619a      	str	r2, [r3, #24]
1a0011f4:	bd70      	pop	{r4, r5, r6, pc}
1a0011f6:	bf00      	nop
1a0011f8:	10000000 	.word	0x10000000

1a0011fc <Chip_I2C_SetClockRate>:
1a0011fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001200:	4604      	mov	r4, r0
1a001202:	4688      	mov	r8, r1
1a001204:	4d0b      	ldr	r5, [pc, #44]	; (1a001234 <Chip_I2C_SetClockRate+0x38>)
1a001206:	00c6      	lsls	r6, r0, #3
1a001208:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a00120c:	009f      	lsls	r7, r3, #2
1a00120e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a001212:	8898      	ldrh	r0, [r3, #4]
1a001214:	f7ff fea0 	bl	1a000f58 <Chip_Clock_GetRate>
1a001218:	fbb0 f1f8 	udiv	r1, r0, r8
1a00121c:	59eb      	ldr	r3, [r5, r7]
1a00121e:	084a      	lsrs	r2, r1, #1
1a001220:	611a      	str	r2, [r3, #16]
1a001222:	1b34      	subs	r4, r6, r4
1a001224:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1a001228:	6918      	ldr	r0, [r3, #16]
1a00122a:	1a09      	subs	r1, r1, r0
1a00122c:	6159      	str	r1, [r3, #20]
1a00122e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001232:	bf00      	nop
1a001234:	10000000 	.word	0x10000000

1a001238 <SystemInit>:
1a001238:	b508      	push	{r3, lr}
1a00123a:	4a0b      	ldr	r2, [pc, #44]	; (1a001268 <SystemInit+0x30>)
1a00123c:	4b0b      	ldr	r3, [pc, #44]	; (1a00126c <SystemInit+0x34>)
1a00123e:	609a      	str	r2, [r3, #8]
1a001240:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001244:	691b      	ldr	r3, [r3, #16]
1a001246:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00124a:	2b20      	cmp	r3, #32
1a00124c:	d004      	beq.n	1a001258 <SystemInit+0x20>
1a00124e:	f7ff faa5 	bl	1a00079c <Board_SystemInit>
1a001252:	f7ff fa35 	bl	1a0006c0 <Board_Init>
1a001256:	bd08      	pop	{r3, pc}
1a001258:	4a04      	ldr	r2, [pc, #16]	; (1a00126c <SystemInit+0x34>)
1a00125a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00125e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001262:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001266:	e7f2      	b.n	1a00124e <SystemInit+0x16>
1a001268:	1a000000 	.word	0x1a000000
1a00126c:	e000ed00 	.word	0xe000ed00

1a001270 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001270:	4b04      	ldr	r3, [pc, #16]	; (1a001284 <cyclesCounterInit+0x14>)
1a001272:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001274:	4a04      	ldr	r2, [pc, #16]	; (1a001288 <cyclesCounterInit+0x18>)
1a001276:	6813      	ldr	r3, [r2, #0]
1a001278:	f043 0301 	orr.w	r3, r3, #1
1a00127c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00127e:	2001      	movs	r0, #1
1a001280:	4770      	bx	lr
1a001282:	bf00      	nop
1a001284:	10000038 	.word	0x10000038
1a001288:	e0001000 	.word	0xe0001000

1a00128c <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a00128c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001290:	0083      	lsls	r3, r0, #2
1a001292:	4a03      	ldr	r2, [pc, #12]	; (1a0012a0 <uartTxReady+0x14>)
1a001294:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001296:	6958      	ldr	r0, [r3, #20]
}
1a001298:	f000 0020 	and.w	r0, r0, #32
1a00129c:	4770      	bx	lr
1a00129e:	bf00      	nop
1a0012a0:	1a001ca8 	.word	0x1a001ca8

1a0012a4 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0012a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0012a8:	0083      	lsls	r3, r0, #2
1a0012aa:	4a02      	ldr	r2, [pc, #8]	; (1a0012b4 <uartTxWrite+0x10>)
1a0012ac:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0012ae:	6019      	str	r1, [r3, #0]
}
1a0012b0:	4770      	bx	lr
1a0012b2:	bf00      	nop
1a0012b4:	1a001ca8 	.word	0x1a001ca8

1a0012b8 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0012b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0012bc:	4680      	mov	r8, r0
1a0012be:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0012c0:	4c19      	ldr	r4, [pc, #100]	; (1a001328 <uartInit+0x70>)
1a0012c2:	0045      	lsls	r5, r0, #1
1a0012c4:	182a      	adds	r2, r5, r0
1a0012c6:	0093      	lsls	r3, r2, #2
1a0012c8:	18e6      	adds	r6, r4, r3
1a0012ca:	58e7      	ldr	r7, [r4, r3]
1a0012cc:	4638      	mov	r0, r7
1a0012ce:	f7ff fa81 	bl	1a0007d4 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0012d2:	4649      	mov	r1, r9
1a0012d4:	4638      	mov	r0, r7
1a0012d6:	f7ff faa7 	bl	1a000828 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0012da:	2307      	movs	r3, #7
1a0012dc:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0012de:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0012e0:	2301      	movs	r3, #1
1a0012e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0012e4:	7930      	ldrb	r0, [r6, #4]
1a0012e6:	7973      	ldrb	r3, [r6, #5]
1a0012e8:	79b2      	ldrb	r2, [r6, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0012ea:	f042 0218 	orr.w	r2, r2, #24
1a0012ee:	490f      	ldr	r1, [pc, #60]	; (1a00132c <uartInit+0x74>)
1a0012f0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0012f8:	79f0      	ldrb	r0, [r6, #7]
1a0012fa:	7a33      	ldrb	r3, [r6, #8]
1a0012fc:	7a72      	ldrb	r2, [r6, #9]
1a0012fe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001302:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00130a:	f1b8 0f01 	cmp.w	r8, #1
1a00130e:	d001      	beq.n	1a001314 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001314:	4a06      	ldr	r2, [pc, #24]	; (1a001330 <uartInit+0x78>)
1a001316:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001318:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00131c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00131e:	221a      	movs	r2, #26
1a001320:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001324:	e7f4      	b.n	1a001310 <uartInit+0x58>
1a001326:	bf00      	nop
1a001328:	1a001ca8 	.word	0x1a001ca8
1a00132c:	40086000 	.word	0x40086000
1a001330:	40081000 	.word	0x40081000

1a001334 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a001334:	b538      	push	{r3, r4, r5, lr}
1a001336:	4604      	mov	r4, r0
1a001338:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00133a:	4620      	mov	r0, r4
1a00133c:	f7ff ffa6 	bl	1a00128c <uartTxReady>
1a001340:	2800      	cmp	r0, #0
1a001342:	d0fa      	beq.n	1a00133a <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a001344:	4629      	mov	r1, r5
1a001346:	4620      	mov	r0, r4
1a001348:	f7ff ffac 	bl	1a0012a4 <uartTxWrite>
}
1a00134c:	bd38      	pop	{r3, r4, r5, pc}

1a00134e <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a00134e:	b538      	push	{r3, r4, r5, lr}
1a001350:	4605      	mov	r5, r0
1a001352:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001354:	7821      	ldrb	r1, [r4, #0]
1a001356:	b121      	cbz	r1, 1a001362 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a001358:	4628      	mov	r0, r5
1a00135a:	f7ff ffeb 	bl	1a001334 <uartWriteByte>
      str++;
1a00135e:	3401      	adds	r4, #1
1a001360:	e7f8      	b.n	1a001354 <uartWriteString+0x6>
   }
}
1a001362:	bd38      	pop	{r3, r4, r5, pc}

1a001364 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001364:	4b01      	ldr	r3, [pc, #4]	; (1a00136c <tickRead+0x8>)
1a001366:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00136a:	4770      	bx	lr
1a00136c:	10000078 	.word	0x10000078

1a001370 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001370:	b118      	cbz	r0, 1a00137a <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001372:	4b04      	ldr	r3, [pc, #16]	; (1a001384 <tickPowerSet+0x14>)
1a001374:	2207      	movs	r2, #7
1a001376:	601a      	str	r2, [r3, #0]
1a001378:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00137a:	4b02      	ldr	r3, [pc, #8]	; (1a001384 <tickPowerSet+0x14>)
1a00137c:	2200      	movs	r2, #0
1a00137e:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001380:	4770      	bx	lr
1a001382:	bf00      	nop
1a001384:	e000e010 	.word	0xe000e010

1a001388 <tickInit>:
{
1a001388:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00138a:	ea50 0401 	orrs.w	r4, r0, r1
1a00138e:	d02a      	beq.n	1a0013e6 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001390:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001394:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001398:	2b00      	cmp	r3, #0
1a00139a:	bf08      	it	eq
1a00139c:	2a32      	cmpeq	r2, #50	; 0x32
1a00139e:	d227      	bcs.n	1a0013f0 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0013a0:	4b14      	ldr	r3, [pc, #80]	; (1a0013f4 <tickInit+0x6c>)
1a0013a2:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0013a6:	4b14      	ldr	r3, [pc, #80]	; (1a0013f8 <tickInit+0x70>)
1a0013a8:	681b      	ldr	r3, [r3, #0]
1a0013aa:	fba3 4500 	umull	r4, r5, r3, r0
1a0013ae:	fb03 5501 	mla	r5, r3, r1, r5
1a0013b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0013b6:	2300      	movs	r3, #0
1a0013b8:	4620      	mov	r0, r4
1a0013ba:	4629      	mov	r1, r5
1a0013bc:	f000 f9f6 	bl	1a0017ac <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0013c0:	3801      	subs	r0, #1
1a0013c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0013c6:	d209      	bcs.n	1a0013dc <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0013c8:	4b0c      	ldr	r3, [pc, #48]	; (1a0013fc <tickInit+0x74>)
1a0013ca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0013cc:	4a0c      	ldr	r2, [pc, #48]	; (1a001400 <tickInit+0x78>)
1a0013ce:	21e0      	movs	r1, #224	; 0xe0
1a0013d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0013d4:	2200      	movs	r2, #0
1a0013d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0013d8:	2207      	movs	r2, #7
1a0013da:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0013dc:	2001      	movs	r0, #1
1a0013de:	f7ff ffc7 	bl	1a001370 <tickPowerSet>
      bool_t ret_val = 1;
1a0013e2:	2001      	movs	r0, #1
}
1a0013e4:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0013e6:	2000      	movs	r0, #0
1a0013e8:	f7ff ffc2 	bl	1a001370 <tickPowerSet>
         ret_val = 0;
1a0013ec:	2000      	movs	r0, #0
1a0013ee:	e7f9      	b.n	1a0013e4 <tickInit+0x5c>
            ret_val = 0;
1a0013f0:	2000      	movs	r0, #0
1a0013f2:	e7f7      	b.n	1a0013e4 <tickInit+0x5c>
1a0013f4:	10000040 	.word	0x10000040
1a0013f8:	10000088 	.word	0x10000088
1a0013fc:	e000e010 	.word	0xe000e010
1a001400:	e000ed00 	.word	0xe000ed00

1a001404 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001404:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001406:	4a07      	ldr	r2, [pc, #28]	; (1a001424 <SysTick_Handler+0x20>)
1a001408:	6813      	ldr	r3, [r2, #0]
1a00140a:	6851      	ldr	r1, [r2, #4]
1a00140c:	3301      	adds	r3, #1
1a00140e:	f141 0100 	adc.w	r1, r1, #0
1a001412:	6013      	str	r3, [r2, #0]
1a001414:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001416:	4b04      	ldr	r3, [pc, #16]	; (1a001428 <SysTick_Handler+0x24>)
1a001418:	681b      	ldr	r3, [r3, #0]
1a00141a:	b113      	cbz	r3, 1a001422 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a00141c:	4a03      	ldr	r2, [pc, #12]	; (1a00142c <SysTick_Handler+0x28>)
1a00141e:	6810      	ldr	r0, [r2, #0]
1a001420:	4798      	blx	r3
   }
}
1a001422:	bd08      	pop	{r3, pc}
1a001424:	10000078 	.word	0x10000078
1a001428:	10000080 	.word	0x10000080
1a00142c:	10000070 	.word	0x10000070

1a001430 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001430:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001432:	4d0b      	ldr	r5, [pc, #44]	; (1a001460 <gpioObtainPinInit+0x30>)
1a001434:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001438:	182c      	adds	r4, r5, r0
1a00143a:	5628      	ldrsb	r0, [r5, r0]
1a00143c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00143e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001442:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001444:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001448:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00144a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00144e:	9b02      	ldr	r3, [sp, #8]
1a001450:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001452:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001456:	9b03      	ldr	r3, [sp, #12]
1a001458:	701a      	strb	r2, [r3, #0]
}
1a00145a:	bc30      	pop	{r4, r5}
1a00145c:	4770      	bx	lr
1a00145e:	bf00      	nop
1a001460:	1a001cf0 	.word	0x1a001cf0

1a001464 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001464:	f110 0f02 	cmn.w	r0, #2
1a001468:	f000 80c7 	beq.w	1a0015fa <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00146c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001470:	f000 80c5 	beq.w	1a0015fe <gpioInit+0x19a>
{
1a001474:	b570      	push	{r4, r5, r6, lr}
1a001476:	b084      	sub	sp, #16
1a001478:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00147a:	2300      	movs	r3, #0
1a00147c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001480:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001484:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001488:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00148c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001490:	f10d 030b 	add.w	r3, sp, #11
1a001494:	9301      	str	r3, [sp, #4]
1a001496:	ab03      	add	r3, sp, #12
1a001498:	9300      	str	r3, [sp, #0]
1a00149a:	f10d 030d 	add.w	r3, sp, #13
1a00149e:	f10d 020e 	add.w	r2, sp, #14
1a0014a2:	f10d 010f 	add.w	r1, sp, #15
1a0014a6:	f7ff ffc3 	bl	1a001430 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0014aa:	2c05      	cmp	r4, #5
1a0014ac:	f200 80a9 	bhi.w	1a001602 <gpioInit+0x19e>
1a0014b0:	e8df f004 	tbb	[pc, r4]
1a0014b4:	45278109 	.word	0x45278109
1a0014b8:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0014ba:	4853      	ldr	r0, [pc, #332]	; (1a001608 <gpioInit+0x1a4>)
1a0014bc:	f7ff fe1e 	bl	1a0010fc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0014c0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0014c2:	b004      	add	sp, #16
1a0014c4:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0014c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014d2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0014d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014da:	494c      	ldr	r1, [pc, #304]	; (1a00160c <gpioInit+0x1a8>)
1a0014dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014e4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014e8:	2001      	movs	r0, #1
1a0014ea:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0014ee:	4c46      	ldr	r4, [pc, #280]	; (1a001608 <gpioInit+0x1a4>)
1a0014f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014f4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014f8:	ea22 0201 	bic.w	r2, r2, r1
1a0014fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001500:	e7df      	b.n	1a0014c2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001502:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001506:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00150a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00150e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001512:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001516:	493d      	ldr	r1, [pc, #244]	; (1a00160c <gpioInit+0x1a8>)
1a001518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00151c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001520:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001524:	2001      	movs	r0, #1
1a001526:	fa00 f102 	lsl.w	r1, r0, r2
1a00152a:	4c37      	ldr	r4, [pc, #220]	; (1a001608 <gpioInit+0x1a4>)
1a00152c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001530:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001534:	ea22 0201 	bic.w	r2, r2, r1
1a001538:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00153c:	e7c1      	b.n	1a0014c2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00153e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001542:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001546:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00154a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00154e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001552:	492e      	ldr	r1, [pc, #184]	; (1a00160c <gpioInit+0x1a8>)
1a001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001558:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00155c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001560:	2001      	movs	r0, #1
1a001562:	fa00 f102 	lsl.w	r1, r0, r2
1a001566:	4c28      	ldr	r4, [pc, #160]	; (1a001608 <gpioInit+0x1a4>)
1a001568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00156c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001570:	ea22 0201 	bic.w	r2, r2, r1
1a001574:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001578:	e7a3      	b.n	1a0014c2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00157a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00157e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001582:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001586:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00158a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00158e:	491f      	ldr	r1, [pc, #124]	; (1a00160c <gpioInit+0x1a8>)
1a001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001594:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001598:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00159c:	2001      	movs	r0, #1
1a00159e:	fa00 f102 	lsl.w	r1, r0, r2
1a0015a2:	4c19      	ldr	r4, [pc, #100]	; (1a001608 <gpioInit+0x1a4>)
1a0015a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0015a8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0015ac:	ea22 0201 	bic.w	r2, r2, r1
1a0015b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0015b4:	e785      	b.n	1a0014c2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0015b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0015ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0015be:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0015c2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0015c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0015ca:	4910      	ldr	r1, [pc, #64]	; (1a00160c <gpioInit+0x1a8>)
1a0015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0015d0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0015d4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0015d8:	2001      	movs	r0, #1
1a0015da:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0015de:	4b0a      	ldr	r3, [pc, #40]	; (1a001608 <gpioInit+0x1a4>)
1a0015e0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0015e4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0015e8:	4331      	orrs	r1, r6
1a0015ea:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0015ee:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0015f0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0015f4:	2100      	movs	r1, #0
1a0015f6:	5499      	strb	r1, [r3, r2]
1a0015f8:	e763      	b.n	1a0014c2 <gpioInit+0x5e>
	  return FALSE;
1a0015fa:	2000      	movs	r0, #0
1a0015fc:	4770      	bx	lr
	  return FALSE;
1a0015fe:	2000      	movs	r0, #0
}
1a001600:	4770      	bx	lr
      ret_val = 0;
1a001602:	2000      	movs	r0, #0
1a001604:	e75d      	b.n	1a0014c2 <gpioInit+0x5e>
1a001606:	bf00      	nop
1a001608:	400f4000 	.word	0x400f4000
1a00160c:	40086000 	.word	0x40086000

1a001610 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001610:	f110 0f02 	cmn.w	r0, #2
1a001614:	d02d      	beq.n	1a001672 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001616:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00161a:	d02c      	beq.n	1a001676 <gpioWrite+0x66>
{
1a00161c:	b510      	push	{r4, lr}
1a00161e:	b084      	sub	sp, #16
1a001620:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001622:	2300      	movs	r3, #0
1a001624:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001628:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00162c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001630:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001634:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001638:	f10d 030b 	add.w	r3, sp, #11
1a00163c:	9301      	str	r3, [sp, #4]
1a00163e:	ab03      	add	r3, sp, #12
1a001640:	9300      	str	r3, [sp, #0]
1a001642:	f10d 030d 	add.w	r3, sp, #13
1a001646:	f10d 020e 	add.w	r2, sp, #14
1a00164a:	f10d 010f 	add.w	r1, sp, #15
1a00164e:	f7ff feef 	bl	1a001430 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001652:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001656:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00165a:	1c21      	adds	r1, r4, #0
1a00165c:	bf18      	it	ne
1a00165e:	2101      	movne	r1, #1
1a001660:	015b      	lsls	r3, r3, #5
1a001662:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001666:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00166a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00166c:	2001      	movs	r0, #1
}
1a00166e:	b004      	add	sp, #16
1a001670:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001672:	2000      	movs	r0, #0
1a001674:	4770      	bx	lr
	  return FALSE;
1a001676:	2000      	movs	r0, #0
}
1a001678:	4770      	bx	lr

1a00167a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00167a:	f110 0f02 	cmn.w	r0, #2
1a00167e:	d02c      	beq.n	1a0016da <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001680:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001684:	d02b      	beq.n	1a0016de <gpioRead+0x64>
{
1a001686:	b500      	push	{lr}
1a001688:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00168a:	2300      	movs	r3, #0
1a00168c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001690:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001694:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001698:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00169c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0016a0:	f10d 030b 	add.w	r3, sp, #11
1a0016a4:	9301      	str	r3, [sp, #4]
1a0016a6:	ab03      	add	r3, sp, #12
1a0016a8:	9300      	str	r3, [sp, #0]
1a0016aa:	f10d 030d 	add.w	r3, sp, #13
1a0016ae:	f10d 020e 	add.w	r2, sp, #14
1a0016b2:	f10d 010f 	add.w	r1, sp, #15
1a0016b6:	f7ff febb 	bl	1a001430 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0016ba:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0016be:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0016c2:	015b      	lsls	r3, r3, #5
1a0016c4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0016c8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0016cc:	5c98      	ldrb	r0, [r3, r2]
1a0016ce:	3000      	adds	r0, #0
1a0016d0:	bf18      	it	ne
1a0016d2:	2001      	movne	r0, #1

   return ret_val;
}
1a0016d4:	b005      	add	sp, #20
1a0016d6:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0016da:	2001      	movs	r0, #1
1a0016dc:	4770      	bx	lr
      return FALSE;
1a0016de:	2000      	movs	r0, #0
}
1a0016e0:	4770      	bx	lr
1a0016e2:	Address 0x000000001a0016e2 is out of bounds.


1a0016e4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0016e4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0016e6:	4b04      	ldr	r3, [pc, #16]	; (1a0016f8 <USB0_IRQHandler+0x14>)
1a0016e8:	681b      	ldr	r3, [r3, #0]
1a0016ea:	681b      	ldr	r3, [r3, #0]
1a0016ec:	68db      	ldr	r3, [r3, #12]
1a0016ee:	4a03      	ldr	r2, [pc, #12]	; (1a0016fc <USB0_IRQHandler+0x18>)
1a0016f0:	6810      	ldr	r0, [r2, #0]
1a0016f2:	4798      	blx	r3
}
1a0016f4:	bd08      	pop	{r3, pc}
1a0016f6:	bf00      	nop
1a0016f8:	1000008c 	.word	0x1000008c
1a0016fc:	10000084 	.word	0x10000084

1a001700 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001700:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001702:	f7ff f983 	bl	1a000a0c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001706:	4b1a      	ldr	r3, [pc, #104]	; (1a001770 <boardInit+0x70>)
1a001708:	6818      	ldr	r0, [r3, #0]
1a00170a:	f7ff fdb1 	bl	1a001270 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a00170e:	2001      	movs	r0, #1
1a001710:	2100      	movs	r1, #0
1a001712:	f7ff fe39 	bl	1a001388 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001716:	2105      	movs	r1, #5
1a001718:	2000      	movs	r0, #0
1a00171a:	f7ff fea3 	bl	1a001464 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00171e:	2100      	movs	r1, #0
1a001720:	2024      	movs	r0, #36	; 0x24
1a001722:	f7ff fe9f 	bl	1a001464 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001726:	2100      	movs	r1, #0
1a001728:	2025      	movs	r0, #37	; 0x25
1a00172a:	f7ff fe9b 	bl	1a001464 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00172e:	2100      	movs	r1, #0
1a001730:	2026      	movs	r0, #38	; 0x26
1a001732:	f7ff fe97 	bl	1a001464 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001736:	2100      	movs	r1, #0
1a001738:	2027      	movs	r0, #39	; 0x27
1a00173a:	f7ff fe93 	bl	1a001464 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00173e:	2101      	movs	r1, #1
1a001740:	2028      	movs	r0, #40	; 0x28
1a001742:	f7ff fe8f 	bl	1a001464 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001746:	2101      	movs	r1, #1
1a001748:	2029      	movs	r0, #41	; 0x29
1a00174a:	f7ff fe8b 	bl	1a001464 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00174e:	2101      	movs	r1, #1
1a001750:	202a      	movs	r0, #42	; 0x2a
1a001752:	f7ff fe87 	bl	1a001464 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001756:	2101      	movs	r1, #1
1a001758:	202b      	movs	r0, #43	; 0x2b
1a00175a:	f7ff fe83 	bl	1a001464 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00175e:	2101      	movs	r1, #1
1a001760:	202c      	movs	r0, #44	; 0x2c
1a001762:	f7ff fe7f 	bl	1a001464 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001766:	2101      	movs	r1, #1
1a001768:	202d      	movs	r0, #45	; 0x2d
1a00176a:	f7ff fe7b 	bl	1a001464 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00176e:	bd08      	pop	{r3, pc}
1a001770:	10000088 	.word	0x10000088

1a001774 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001778:	4680      	mov	r8, r0
1a00177a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a00177c:	f7ff fdf2 	bl	1a001364 <tickRead>
1a001780:	4606      	mov	r6, r0
1a001782:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001784:	f7ff fdee 	bl	1a001364 <tickRead>
1a001788:	1b84      	subs	r4, r0, r6
1a00178a:	eb61 0507 	sbc.w	r5, r1, r7
1a00178e:	4b06      	ldr	r3, [pc, #24]	; (1a0017a8 <delay+0x34>)
1a001790:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001794:	4640      	mov	r0, r8
1a001796:	4649      	mov	r1, r9
1a001798:	f000 f808 	bl	1a0017ac <__aeabi_uldivmod>
1a00179c:	428d      	cmp	r5, r1
1a00179e:	bf08      	it	eq
1a0017a0:	4284      	cmpeq	r4, r0
1a0017a2:	d3ef      	bcc.n	1a001784 <delay+0x10>
}
1a0017a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0017a8:	10000040 	.word	0x10000040

1a0017ac <__aeabi_uldivmod>:
1a0017ac:	b953      	cbnz	r3, 1a0017c4 <__aeabi_uldivmod+0x18>
1a0017ae:	b94a      	cbnz	r2, 1a0017c4 <__aeabi_uldivmod+0x18>
1a0017b0:	2900      	cmp	r1, #0
1a0017b2:	bf08      	it	eq
1a0017b4:	2800      	cmpeq	r0, #0
1a0017b6:	bf1c      	itt	ne
1a0017b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0017bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0017c0:	f000 b974 	b.w	1a001aac <__aeabi_idiv0>
1a0017c4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0017c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0017cc:	f000 f806 	bl	1a0017dc <__udivmoddi4>
1a0017d0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0017d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0017d8:	b004      	add	sp, #16
1a0017da:	4770      	bx	lr

1a0017dc <__udivmoddi4>:
1a0017dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0017e0:	9e08      	ldr	r6, [sp, #32]
1a0017e2:	4604      	mov	r4, r0
1a0017e4:	4688      	mov	r8, r1
1a0017e6:	2b00      	cmp	r3, #0
1a0017e8:	f040 8085 	bne.w	1a0018f6 <__udivmoddi4+0x11a>
1a0017ec:	428a      	cmp	r2, r1
1a0017ee:	4615      	mov	r5, r2
1a0017f0:	d948      	bls.n	1a001884 <__udivmoddi4+0xa8>
1a0017f2:	fab2 f282 	clz	r2, r2
1a0017f6:	b14a      	cbz	r2, 1a00180c <__udivmoddi4+0x30>
1a0017f8:	f1c2 0720 	rsb	r7, r2, #32
1a0017fc:	fa01 f302 	lsl.w	r3, r1, r2
1a001800:	fa20 f707 	lsr.w	r7, r0, r7
1a001804:	4095      	lsls	r5, r2
1a001806:	ea47 0803 	orr.w	r8, r7, r3
1a00180a:	4094      	lsls	r4, r2
1a00180c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001810:	0c23      	lsrs	r3, r4, #16
1a001812:	fbb8 f7fe 	udiv	r7, r8, lr
1a001816:	fa1f fc85 	uxth.w	ip, r5
1a00181a:	fb0e 8817 	mls	r8, lr, r7, r8
1a00181e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001822:	fb07 f10c 	mul.w	r1, r7, ip
1a001826:	4299      	cmp	r1, r3
1a001828:	d909      	bls.n	1a00183e <__udivmoddi4+0x62>
1a00182a:	18eb      	adds	r3, r5, r3
1a00182c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001830:	f080 80e3 	bcs.w	1a0019fa <__udivmoddi4+0x21e>
1a001834:	4299      	cmp	r1, r3
1a001836:	f240 80e0 	bls.w	1a0019fa <__udivmoddi4+0x21e>
1a00183a:	3f02      	subs	r7, #2
1a00183c:	442b      	add	r3, r5
1a00183e:	1a5b      	subs	r3, r3, r1
1a001840:	b2a4      	uxth	r4, r4
1a001842:	fbb3 f0fe 	udiv	r0, r3, lr
1a001846:	fb0e 3310 	mls	r3, lr, r0, r3
1a00184a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00184e:	fb00 fc0c 	mul.w	ip, r0, ip
1a001852:	45a4      	cmp	ip, r4
1a001854:	d909      	bls.n	1a00186a <__udivmoddi4+0x8e>
1a001856:	192c      	adds	r4, r5, r4
1a001858:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00185c:	f080 80cb 	bcs.w	1a0019f6 <__udivmoddi4+0x21a>
1a001860:	45a4      	cmp	ip, r4
1a001862:	f240 80c8 	bls.w	1a0019f6 <__udivmoddi4+0x21a>
1a001866:	3802      	subs	r0, #2
1a001868:	442c      	add	r4, r5
1a00186a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00186e:	eba4 040c 	sub.w	r4, r4, ip
1a001872:	2700      	movs	r7, #0
1a001874:	b11e      	cbz	r6, 1a00187e <__udivmoddi4+0xa2>
1a001876:	40d4      	lsrs	r4, r2
1a001878:	2300      	movs	r3, #0
1a00187a:	e9c6 4300 	strd	r4, r3, [r6]
1a00187e:	4639      	mov	r1, r7
1a001880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001884:	2a00      	cmp	r2, #0
1a001886:	d053      	beq.n	1a001930 <__udivmoddi4+0x154>
1a001888:	fab2 f282 	clz	r2, r2
1a00188c:	2a00      	cmp	r2, #0
1a00188e:	f040 80b6 	bne.w	1a0019fe <__udivmoddi4+0x222>
1a001892:	1b49      	subs	r1, r1, r5
1a001894:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001898:	fa1f f885 	uxth.w	r8, r5
1a00189c:	2701      	movs	r7, #1
1a00189e:	fbb1 fcfe 	udiv	ip, r1, lr
1a0018a2:	0c23      	lsrs	r3, r4, #16
1a0018a4:	fb0e 111c 	mls	r1, lr, ip, r1
1a0018a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0018ac:	fb08 f10c 	mul.w	r1, r8, ip
1a0018b0:	4299      	cmp	r1, r3
1a0018b2:	d907      	bls.n	1a0018c4 <__udivmoddi4+0xe8>
1a0018b4:	18eb      	adds	r3, r5, r3
1a0018b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0018ba:	d202      	bcs.n	1a0018c2 <__udivmoddi4+0xe6>
1a0018bc:	4299      	cmp	r1, r3
1a0018be:	f200 80ec 	bhi.w	1a001a9a <__udivmoddi4+0x2be>
1a0018c2:	4684      	mov	ip, r0
1a0018c4:	1a59      	subs	r1, r3, r1
1a0018c6:	b2a3      	uxth	r3, r4
1a0018c8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0018cc:	fb0e 1410 	mls	r4, lr, r0, r1
1a0018d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0018d4:	fb08 f800 	mul.w	r8, r8, r0
1a0018d8:	45a0      	cmp	r8, r4
1a0018da:	d907      	bls.n	1a0018ec <__udivmoddi4+0x110>
1a0018dc:	192c      	adds	r4, r5, r4
1a0018de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0018e2:	d202      	bcs.n	1a0018ea <__udivmoddi4+0x10e>
1a0018e4:	45a0      	cmp	r8, r4
1a0018e6:	f200 80dc 	bhi.w	1a001aa2 <__udivmoddi4+0x2c6>
1a0018ea:	4618      	mov	r0, r3
1a0018ec:	eba4 0408 	sub.w	r4, r4, r8
1a0018f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0018f4:	e7be      	b.n	1a001874 <__udivmoddi4+0x98>
1a0018f6:	428b      	cmp	r3, r1
1a0018f8:	d908      	bls.n	1a00190c <__udivmoddi4+0x130>
1a0018fa:	2e00      	cmp	r6, #0
1a0018fc:	d078      	beq.n	1a0019f0 <__udivmoddi4+0x214>
1a0018fe:	2700      	movs	r7, #0
1a001900:	e9c6 0100 	strd	r0, r1, [r6]
1a001904:	4638      	mov	r0, r7
1a001906:	4639      	mov	r1, r7
1a001908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00190c:	fab3 f783 	clz	r7, r3
1a001910:	b97f      	cbnz	r7, 1a001932 <__udivmoddi4+0x156>
1a001912:	428b      	cmp	r3, r1
1a001914:	d302      	bcc.n	1a00191c <__udivmoddi4+0x140>
1a001916:	4282      	cmp	r2, r0
1a001918:	f200 80bd 	bhi.w	1a001a96 <__udivmoddi4+0x2ba>
1a00191c:	1a84      	subs	r4, r0, r2
1a00191e:	eb61 0303 	sbc.w	r3, r1, r3
1a001922:	2001      	movs	r0, #1
1a001924:	4698      	mov	r8, r3
1a001926:	2e00      	cmp	r6, #0
1a001928:	d0a9      	beq.n	1a00187e <__udivmoddi4+0xa2>
1a00192a:	e9c6 4800 	strd	r4, r8, [r6]
1a00192e:	e7a6      	b.n	1a00187e <__udivmoddi4+0xa2>
1a001930:	deff      	udf	#255	; 0xff
1a001932:	f1c7 0520 	rsb	r5, r7, #32
1a001936:	40bb      	lsls	r3, r7
1a001938:	fa22 fc05 	lsr.w	ip, r2, r5
1a00193c:	ea4c 0c03 	orr.w	ip, ip, r3
1a001940:	fa01 f407 	lsl.w	r4, r1, r7
1a001944:	fa20 f805 	lsr.w	r8, r0, r5
1a001948:	fa21 f305 	lsr.w	r3, r1, r5
1a00194c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001950:	ea48 0404 	orr.w	r4, r8, r4
1a001954:	fbb3 f9fe 	udiv	r9, r3, lr
1a001958:	0c21      	lsrs	r1, r4, #16
1a00195a:	fb0e 3319 	mls	r3, lr, r9, r3
1a00195e:	fa1f f88c 	uxth.w	r8, ip
1a001962:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001966:	fb09 fa08 	mul.w	sl, r9, r8
1a00196a:	459a      	cmp	sl, r3
1a00196c:	fa02 f207 	lsl.w	r2, r2, r7
1a001970:	fa00 f107 	lsl.w	r1, r0, r7
1a001974:	d90b      	bls.n	1a00198e <__udivmoddi4+0x1b2>
1a001976:	eb1c 0303 	adds.w	r3, ip, r3
1a00197a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00197e:	f080 8088 	bcs.w	1a001a92 <__udivmoddi4+0x2b6>
1a001982:	459a      	cmp	sl, r3
1a001984:	f240 8085 	bls.w	1a001a92 <__udivmoddi4+0x2b6>
1a001988:	f1a9 0902 	sub.w	r9, r9, #2
1a00198c:	4463      	add	r3, ip
1a00198e:	eba3 030a 	sub.w	r3, r3, sl
1a001992:	b2a4      	uxth	r4, r4
1a001994:	fbb3 f0fe 	udiv	r0, r3, lr
1a001998:	fb0e 3310 	mls	r3, lr, r0, r3
1a00199c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0019a0:	fb00 f808 	mul.w	r8, r0, r8
1a0019a4:	45a0      	cmp	r8, r4
1a0019a6:	d908      	bls.n	1a0019ba <__udivmoddi4+0x1de>
1a0019a8:	eb1c 0404 	adds.w	r4, ip, r4
1a0019ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0019b0:	d26b      	bcs.n	1a001a8a <__udivmoddi4+0x2ae>
1a0019b2:	45a0      	cmp	r8, r4
1a0019b4:	d969      	bls.n	1a001a8a <__udivmoddi4+0x2ae>
1a0019b6:	3802      	subs	r0, #2
1a0019b8:	4464      	add	r4, ip
1a0019ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0019be:	eba4 0408 	sub.w	r4, r4, r8
1a0019c2:	fba0 8902 	umull	r8, r9, r0, r2
1a0019c6:	454c      	cmp	r4, r9
1a0019c8:	46c6      	mov	lr, r8
1a0019ca:	464b      	mov	r3, r9
1a0019cc:	d354      	bcc.n	1a001a78 <__udivmoddi4+0x29c>
1a0019ce:	d051      	beq.n	1a001a74 <__udivmoddi4+0x298>
1a0019d0:	2e00      	cmp	r6, #0
1a0019d2:	d069      	beq.n	1a001aa8 <__udivmoddi4+0x2cc>
1a0019d4:	ebb1 020e 	subs.w	r2, r1, lr
1a0019d8:	eb64 0403 	sbc.w	r4, r4, r3
1a0019dc:	fa04 f505 	lsl.w	r5, r4, r5
1a0019e0:	fa22 f307 	lsr.w	r3, r2, r7
1a0019e4:	40fc      	lsrs	r4, r7
1a0019e6:	431d      	orrs	r5, r3
1a0019e8:	e9c6 5400 	strd	r5, r4, [r6]
1a0019ec:	2700      	movs	r7, #0
1a0019ee:	e746      	b.n	1a00187e <__udivmoddi4+0xa2>
1a0019f0:	4637      	mov	r7, r6
1a0019f2:	4630      	mov	r0, r6
1a0019f4:	e743      	b.n	1a00187e <__udivmoddi4+0xa2>
1a0019f6:	4618      	mov	r0, r3
1a0019f8:	e737      	b.n	1a00186a <__udivmoddi4+0x8e>
1a0019fa:	4607      	mov	r7, r0
1a0019fc:	e71f      	b.n	1a00183e <__udivmoddi4+0x62>
1a0019fe:	f1c2 0320 	rsb	r3, r2, #32
1a001a02:	fa20 f703 	lsr.w	r7, r0, r3
1a001a06:	4095      	lsls	r5, r2
1a001a08:	fa01 f002 	lsl.w	r0, r1, r2
1a001a0c:	fa21 f303 	lsr.w	r3, r1, r3
1a001a10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001a14:	4338      	orrs	r0, r7
1a001a16:	0c01      	lsrs	r1, r0, #16
1a001a18:	fbb3 f7fe 	udiv	r7, r3, lr
1a001a1c:	fa1f f885 	uxth.w	r8, r5
1a001a20:	fb0e 3317 	mls	r3, lr, r7, r3
1a001a24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001a28:	fb07 f308 	mul.w	r3, r7, r8
1a001a2c:	428b      	cmp	r3, r1
1a001a2e:	fa04 f402 	lsl.w	r4, r4, r2
1a001a32:	d907      	bls.n	1a001a44 <__udivmoddi4+0x268>
1a001a34:	1869      	adds	r1, r5, r1
1a001a36:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001a3a:	d228      	bcs.n	1a001a8e <__udivmoddi4+0x2b2>
1a001a3c:	428b      	cmp	r3, r1
1a001a3e:	d926      	bls.n	1a001a8e <__udivmoddi4+0x2b2>
1a001a40:	3f02      	subs	r7, #2
1a001a42:	4429      	add	r1, r5
1a001a44:	1acb      	subs	r3, r1, r3
1a001a46:	b281      	uxth	r1, r0
1a001a48:	fbb3 f0fe 	udiv	r0, r3, lr
1a001a4c:	fb0e 3310 	mls	r3, lr, r0, r3
1a001a50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001a54:	fb00 f308 	mul.w	r3, r0, r8
1a001a58:	428b      	cmp	r3, r1
1a001a5a:	d907      	bls.n	1a001a6c <__udivmoddi4+0x290>
1a001a5c:	1869      	adds	r1, r5, r1
1a001a5e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001a62:	d210      	bcs.n	1a001a86 <__udivmoddi4+0x2aa>
1a001a64:	428b      	cmp	r3, r1
1a001a66:	d90e      	bls.n	1a001a86 <__udivmoddi4+0x2aa>
1a001a68:	3802      	subs	r0, #2
1a001a6a:	4429      	add	r1, r5
1a001a6c:	1ac9      	subs	r1, r1, r3
1a001a6e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001a72:	e714      	b.n	1a00189e <__udivmoddi4+0xc2>
1a001a74:	4541      	cmp	r1, r8
1a001a76:	d2ab      	bcs.n	1a0019d0 <__udivmoddi4+0x1f4>
1a001a78:	ebb8 0e02 	subs.w	lr, r8, r2
1a001a7c:	eb69 020c 	sbc.w	r2, r9, ip
1a001a80:	3801      	subs	r0, #1
1a001a82:	4613      	mov	r3, r2
1a001a84:	e7a4      	b.n	1a0019d0 <__udivmoddi4+0x1f4>
1a001a86:	4660      	mov	r0, ip
1a001a88:	e7f0      	b.n	1a001a6c <__udivmoddi4+0x290>
1a001a8a:	4618      	mov	r0, r3
1a001a8c:	e795      	b.n	1a0019ba <__udivmoddi4+0x1de>
1a001a8e:	4667      	mov	r7, ip
1a001a90:	e7d8      	b.n	1a001a44 <__udivmoddi4+0x268>
1a001a92:	4681      	mov	r9, r0
1a001a94:	e77b      	b.n	1a00198e <__udivmoddi4+0x1b2>
1a001a96:	4638      	mov	r0, r7
1a001a98:	e745      	b.n	1a001926 <__udivmoddi4+0x14a>
1a001a9a:	f1ac 0c02 	sub.w	ip, ip, #2
1a001a9e:	442b      	add	r3, r5
1a001aa0:	e710      	b.n	1a0018c4 <__udivmoddi4+0xe8>
1a001aa2:	3802      	subs	r0, #2
1a001aa4:	442c      	add	r4, r5
1a001aa6:	e721      	b.n	1a0018ec <__udivmoddi4+0x110>
1a001aa8:	4637      	mov	r7, r6
1a001aaa:	e6e8      	b.n	1a00187e <__udivmoddi4+0xa2>

1a001aac <__aeabi_idiv0>:
1a001aac:	4770      	bx	lr
1a001aae:	bf00      	nop

1a001ab0 <__libc_init_array>:
1a001ab0:	b570      	push	{r4, r5, r6, lr}
1a001ab2:	4d0d      	ldr	r5, [pc, #52]	; (1a001ae8 <__libc_init_array+0x38>)
1a001ab4:	4c0d      	ldr	r4, [pc, #52]	; (1a001aec <__libc_init_array+0x3c>)
1a001ab6:	1b64      	subs	r4, r4, r5
1a001ab8:	10a4      	asrs	r4, r4, #2
1a001aba:	2600      	movs	r6, #0
1a001abc:	42a6      	cmp	r6, r4
1a001abe:	d109      	bne.n	1a001ad4 <__libc_init_array+0x24>
1a001ac0:	4d0b      	ldr	r5, [pc, #44]	; (1a001af0 <__libc_init_array+0x40>)
1a001ac2:	4c0c      	ldr	r4, [pc, #48]	; (1a001af4 <__libc_init_array+0x44>)
1a001ac4:	f7fe fd41 	bl	1a00054a <_init>
1a001ac8:	1b64      	subs	r4, r4, r5
1a001aca:	10a4      	asrs	r4, r4, #2
1a001acc:	2600      	movs	r6, #0
1a001ace:	42a6      	cmp	r6, r4
1a001ad0:	d105      	bne.n	1a001ade <__libc_init_array+0x2e>
1a001ad2:	bd70      	pop	{r4, r5, r6, pc}
1a001ad4:	f855 3b04 	ldr.w	r3, [r5], #4
1a001ad8:	4798      	blx	r3
1a001ada:	3601      	adds	r6, #1
1a001adc:	e7ee      	b.n	1a001abc <__libc_init_array+0xc>
1a001ade:	f855 3b04 	ldr.w	r3, [r5], #4
1a001ae2:	4798      	blx	r3
1a001ae4:	3601      	adds	r6, #1
1a001ae6:	e7f2      	b.n	1a001ace <__libc_init_array+0x1e>
1a001ae8:	1a001dd8 	.word	0x1a001dd8
1a001aec:	1a001dd8 	.word	0x1a001dd8
1a001af0:	1a001dd8 	.word	0x1a001dd8
1a001af4:	1a001ddc 	.word	0x1a001ddc

1a001af8 <memset>:
1a001af8:	4402      	add	r2, r0
1a001afa:	4603      	mov	r3, r0
1a001afc:	4293      	cmp	r3, r2
1a001afe:	d100      	bne.n	1a001b02 <memset+0xa>
1a001b00:	4770      	bx	lr
1a001b02:	f803 1b01 	strb.w	r1, [r3], #1
1a001b06:	e7f9      	b.n	1a001afc <memset+0x4>
1a001b08:	6f746f42 	.word	0x6f746f42
1a001b0c:	0020206e 	.word	0x0020206e
1a001b10:	ff000a0d 	.word	0xff000a0d
1a001b14:	6f746f42 	.word	0x6f746f42
1a001b18:	0031206e 	.word	0x0031206e
1a001b1c:	6f746f42 	.word	0x6f746f42
1a001b20:	0032206e 	.word	0x0032206e
1a001b24:	6f746f42 	.word	0x6f746f42
1a001b28:	0033206e 	.word	0x0033206e
1a001b2c:	6f746f42 	.word	0x6f746f42
1a001b30:	0034206e 	.word	0x0034206e

1a001b34 <ExtRateIn>:
1a001b34:	00000000                                ....

1a001b38 <GpioButtons>:
1a001b38:	08000400 09010900                       ........

1a001b40 <GpioLeds>:
1a001b40:	01050005 0e000205 0c010b01              ............

1a001b4c <GpioPorts>:
1a001b4c:	03030003 0f050403 05031005 07030603     ................
1a001b5c:	ffff0802                                ....

1a001b60 <OscRateIn>:
1a001b60:	00b71b00                                ....

1a001b64 <InitClkStates>:
1a001b64:	01010f01                                ....

1a001b68 <pinmuxing>:
1a001b68:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a001b78:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a001b88:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a001b98:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a001ba8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a001bb8:	00d50301 00d50401 00160107 00560207     ..............V.
1a001bc8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a001bd8:	00570206                                ..W.

1a001bdc <UART_BClock>:
1a001bdc:	01a201c2 01620182                       ......b.

1a001be4 <UART_PClock>:
1a001be4:	00820081 00a200a1 0f0f0f03 000000ff     ................

1a001bf4 <periph_to_base>:
1a001bf4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001c04:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001c14:	000100e0 01000100 01200003 00060120     .......... . ...
1a001c24:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001c34:	01820013 00120182 01a201a2 01c20011     ................
1a001c44:	001001c2 01e201e2 0202000f 000e0202     ................
1a001c54:	02220222 0223000d 001c0223              "."...#.#...

1a001c60 <InitClkStates>:
1a001c60:	00010100 00010909 0001090a 01010701     ................
1a001c70:	00010902 00010906 0101090c 0001090d     ................
1a001c80:	0001090e 0001090f 00010910 00010911     ................
1a001c90:	00010912 00010913 00011114 00011119     ................
1a001ca0:	0001111a 0001111b                       ........

1a001ca8 <lpcUarts>:
1a001ca8:	40081000 06020406 00180205 40081000     ...@...........@
1a001cb8:	09070509 00180706 40082000 00000000     ......... .@....
1a001cc8:	00190000 400c1000 07060107 001a0602     .......@........
1a001cd8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a001ce8:	02020302 001b0204                       ........

1a001cf0 <gpioPinsInit>:
1a001cf0:	02000104 00050701 05010d03 04080100     ................
1a001d00:	02020002 02000304 00000403 04070002     ................
1a001d10:	030c0300 09050402 05040103 04030208     ................
1a001d20:	04020305 06040504 0802000c 03000b06     ................
1a001d30:	00090607 07060503 060f0504 03030004     ................
1a001d40:	02000404 00050404 06040502 04060200     ................
1a001d50:	0c050408 05040a04 0003010e 14010a00     ................
1a001d60:	010f0000 0d000012 00001101 0010010c     ................
1a001d70:	07070300 000f0300 01000001 00000000     ................
1a001d80:	000a0600 08060603 06100504 04030005     ................
1a001d90:	03000106 04090400 04010d05 010b0000     ................
1a001da0:	0200000f 00000001 00010104 02010800     ................
1a001db0:	01090000 09010006 05040002 04010200     ................
1a001dc0:	02020105 02020504 0e00000a 01000b02     ................
1a001dd0:	000c020b ffff0c01                       ........
